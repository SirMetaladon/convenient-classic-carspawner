@name Convenient Classic Carspawner

@outputs Quota HideChat X Y Z N TC TB Loaded RopeID TotalTrainLength TotalTrainWeight AjstAngle CTS Time Phase CTR Car Weathering Fail Angle DELT FUNC DEBU Loadveride NoDef NewPos XO MdlTag HUEEE WX DD INCR LTS LTR WTS WTR Spacer TQ HOLID Mode BaseAngle WeightBefore CarEnt CarCount


@persist Quota HideChat X Y Z N TC TB Loaded RopeID TotalTrainLength TotalTrainWeight AjstAngle CTS Time Phase CTR Car Weathering Fail Angle DELT FUNC DEBU Loadveride NoDef NewPos XO MdlTag HUEEE WX DD INCR LTS LTR WTS WTR Spacer TQ HOLID Mode BaseAngle WeightBefore CarEnt CarCount
@persist [PoolTrack]:string [BasePos Orgin]:vector [E]:entity

@persist [MDL TagAttributes Tags SPWND TagDefaults TrainTypes]:table
@persist [Print WeatheringPresets LS Pool Colors Multipliers]:array  

@model models/magtrains/trucks/barber_s2_phx.mdl

if(first()|dupefinished()){
    
    #Variables for debugging purposes
    
    DELT = 1 #If 0, all cars have the same chance to spawn
    FUNC = 1 #If 1, the "functional" tag is automatically added to searches
    DEBU = DD = 0 #If 1, one of every type of car in a search will be spawned
    
    TQ = 0.5 #PT2 sees everything as double-weight, use this to negate it.
    LoadChance = 0.6 #How often cars are likely to be loaded (unless modified)

    #Weathering presets, in order from least to most weathered
    
    WeatheringPresets = array(
        
        "models/proppertextures/acrylic","sprops/trans/lights/light_plastic","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "wtp/paint_2","sprops/trans/lights/light_plastic","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "models/proppertextures/acrylic","sprops/textures/sprops_metal5","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "wtp/paint_2","sprops/textures/sprops_metal5","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal","models/proppertextures/acrylic_gold",
        
        "sprops/trans/lights/light_plastic","phoenix_storms/concrete1","icegt/loco/ice_trainmetal_black","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "sprops/textures/sprops_metal5","sprops/textures/sprops_metal1","icegt/loco/ice_trainmetal_black","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "sprops/trans/lights/light_plastic","sprops/textures/sprops_metal1","icegt/loco/ice_trainmetal_black","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/proppertextures/acrylic_gold",
        "sprops/textures/sprops_metal5","phoenix_storms/concrete1","icegt/loco/ice_trainmetal_black","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/proppertextures/acrylic_gold",
        
        "wtp/metal_2","wtp/metal_5","icegt/loco/ice_trainmetal_black","models/props_forest/sawmill_wood","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_darkgrey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "wtp/metal_2","wtp/metal_5","icegt/loco/ice_trainmetal_black","models/props_forest/sawmill_wood","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_darkgrey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        
        "models/props_gulch/tinycars/tc_colorable","sprops/textures/sprops_metal3","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "models/props_gulch/tinycars/tc_colorable","models/props_c17/metalladder001","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "sprops/textures/sprops_metal2","sprops/textures/sprops_metal3","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "sprops/textures/sprops_metal2","models/props_c17/metalladder001","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "wtp/metal_5","sprops/textures/sprops_metal3","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold",
        "wtp/metal_5","models/props_c17/metalladder001","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal","models/props_gulch/tinycars/tc_gold"
        
    )
    WX = 8 #How many strings per preset
    
    setName("Convenient Classic Carspawner V1.0 PROTOTYPE")
    print("Welcome to the Convenient, Classic Carspawner. Type .help for a how-to.")
    print("Made by Sir Metaladon. (Do not distribute, dev version)")
    runOnChat(1)
    
    #Color presets
    
    Colors = array(    
        
        vec(-2.5,0.6,0.25),vec(8,0.1,0.02), #RED 1 
        vec(18,0.6,0.35),vec(28,0.1,0.05), #ORANGE 2 
        vec(-2.5,0.1,0.8),vec(240,0.1,0.15), #WHITE 3 
        vec(42,0.65,0.5),vec(47.5,0.1,0.05), #YELLOW 4
        vec(75,0.35,0.3),vec(125,0.1,0.05), #GREEN 5  
        vec(190,0.35,0.3),vec(230,0.15,0.1),  #BLUE 6 
        vec(-2.5,0.02,0.15),vec(47.5,0.02,0.05), #BLACK 7 
        vec(-2.5,0.02,0.4),vec(47.5,0.02,0.1), #GREY - 8
        vec(40,0.1,0.4),vec(55,0.025,0.125), #ALUMINUM - 9
        vec(-2.5,0.25,0.35),vec(30,0.15,0.05), #WOOD - 10
        vec(-2.5,0.3,0.3),vec(10,0.1,0.02) #TUSCAN - 11
        
    )
    
    #HOW TO ADD A CAR
    
    #"models",ChanceToSpawn,"tags",vec(FromMountToMount,UpandDown,Rotation),array(MaterialType,MaterialSlot,MaterialType,MaterialSlot,etc,etc),
    #array(#Red,#Orange,#White,#Yellow,#Green,#Blue,#Black,#Grey,#Aluminum,#Wood,#Tuscan),vec2(SkinMin,SkinMax),array(vec(Bodygroup,Minimum,Maximum),vec(etc,etc,etc),etc),vec2(Weight of Load,Chance to be Loaded),
    
    #Tag Attributes
    
    TagAttributes = table(
        
        array("general_boxcar_highcube","appliance_boxcar_highcube","autoparts_boxcar_highcube","general_boxcar_nonhigh",
            "scrap_gondola","woodchips_gondola","ore_gondola","general_gondola","steel_gondola","water_gondola","coal_gondola",
            "general_tanker","ethanol_tanker","lpg_tanker","chemical_tanker","oil_tanker",
            "l_coal_hopper_loaded","grain_hopper","cement_hopper","aggregate_hopper","ore_hopper","u_coal_hopper_empty","gravel_hopper",
            "airslide_hopper_sugar","airslide_hopper_flour",
            "centerbeam_flatcar_wood","log_flatcar","wood_flatcar","general_flatcar","heavy_flatcar","tofctrailer_flatcar","general_flatcar_bulkhead","water_flatcar","trash_flatcar","tofc_flatcar",
            "caboose",
            "stock",
            "single_wellcar_40ft","single_wellcar_48ft","single_wellcar_53ft",
            "icereeferrefridgerator",
            "trilevel_open_autorack","bilevel_open_autorack","bilevel_closed_autorack",
            "anytype"),
            
        array("modern","90s","80s","70s","60s","50s","40s","30s","20s","10s","preera","anytime"),
        array("metaladon","gsgrove","magnum","union","joeconqueror","monkatraz","goomz","daylight","jazzie","anyone991","anyone"),
        array("new","old","anysuspension"),
        array("manifest","unitfreight","mow","buffer","passenger","freight","dummy","anykind",
        "caboose","l_coal_hopper_loaded","u_coal_hopper_empty","trilevel_open_autorack","bilevel_open_autorack","bilevel_closed_autorack","ore_gondola",
        "ore_hopper","single_wellcar_40ft","single_wellcar_48ft","single_wellcar_53ft"),
        array("janky","functional"),
        array("hdetail","mdetail","ldetail","anydetail"),
        array("usamerican","russian","european","anywhere"),
        array("nodef","debug","mdltag","loaded","empty"),
        array()
        
    )
    
    #Default Tags. Feel free to edit this!
    
    TagDefaults = table(
    
        array(),
        array("80s"),
        array(),
        array(),
        array("manifest"),
        array(),
        array("mdetail","hdetail"),
        array("usamerican")
        
    )
    
    Multipliers = array(
    
        "metaladon",1.2,
        "union",0.6,
        "old",0.75,
        "hdetail",1.25,
        "ldetail",0.75
        
    )
    
    function table bogie(Parent,Length,Type){
        
        return table(0,"bogie","models/magtrains/trucks/barber_s2_phx.mdl","pos",vec(0,Length,-18),"submat",array(1,"models/props_gulch/tinycars/tc_colorable"),
        "submat",array(7,"models/proppertextures/wheel"),"axcom",array(Parent,vec(0,0,1)),"bodygroup",array(0,vec(1,4,4)),"colorand",array(vec(80,60,50)*0.9,vec(90,65,55)*1.1))
        
    }
    
    function number carLength(Ent:entity){
        
        if(Ent:boxSize():y()-8 > Ent:boxSize():x()-8){
        
            return Ent:boxSize():y()-8
            
        }else{
            
            return Ent:boxSize():x()-8 
        
        }

    }
    
    function number modelLength(Model:string){
    
        holoCreate(1,vec(0))
        holoAlpha(1,0)
        holoModel(1,Model)
        
        return carLength(holoEntity(1))
        
    }
    
    #[
    
    List of Cars, alphabetized.
     
    Parent IsHologram Model 
    
    everything randomised must have a "slave" mode
    
    
    
    
    List of Extra Commands: 
    
    
    posrand,array(vec(pos min),vec(pos max))
    poslave,array(master,vec(translation),vec(mirroraxis),rotation)
    colorand,vec(min),vec(max) 
    colorslave,master
    weather,array(type,slot,type,slot,etc)
    color,array(master,red,orange,white,yellow,green,blue,black,grey,aluminum,wood,tuscan)
    skin,vec(master,min,max)
    bodygroup,array(master,vec(slot,min,max),vec(slot,min,max),etc)
    axcom,array(parent,vec(localaxis))
    axis,array(vec(localpos),parent,vec(localaxis))
    slider,undef
    ballsoc,undef
    submat,array(slot,"material")
    material,"material"
    scale,vec(scale)
    scalerand,array(master,vec(scalemin),vec(scalemax),mult)
    holoclip,undef
    physmat,"physmat"
    
    
    
    
    
    ]#
    
    #[Description of car data:
    
    1st Array: Basic, Overaching Info. 
    Chance to Spawn (aggregated across all possible types)
    Tags (string, usually country, load type, freight/other, manifest/other, suspension-gauge, detail level, modeler, era and make sure to add the apropriate model descriptor at the end)
    Car Length (coupled length, usually by applying modelLength() to your base model. add more for cars lacking full collisions or comprising multiple sets)
    Orgin height off the railhead (need to measure this)
    Weight (vec2(tons avg load,loaded or unloaded) (bool))
    
    Next, props spawned:
    
    Parented/Relative To (0 for freestanding, negative for bogies)
    Model Name (string),
    Position (relative to the "parent")
    Angle (again relative)
    
    
    
    
    
    
    
    
    
    #Maybe add a check which applies CL/LC to the score of a car if it has the "invisiload" tag based on search parameters?
    #Add invisiload when either loaded or empty is searched.
    
    
    Data Storage Template:
    
    data[entID,table] = table(
    
    Car numType,
    LoadType, (string)
    Parent EntID,
    array(childID,childID,childID),
    
    
    
    
    
    
    )
    
    
    
    ]#
    
    MDL = table(
        
        table(
            array(8,"usamerican general_tanker_l chemical_tanker_l general_tanker_e chemical_tanker_e invisiload freight manifest phxold hdetail daylight 20s 30s 40s ll_tankcar",modelLength("models/daylight/ll_tankcar.mdl"),18,vec2(50,LoadChance)),
            table(0,"models/daylight/ll_tankcar.mdl",vec(0,0,-2),ang(0,90,0),"weather",array(1,1,3,3,2,4),"color",array(0,0,0,2,1,0,0,50),"bodygroup",array(0,vec(1,0,1))),
            bogie(-1,296/2,1),
            bogie(-1,-296/2,1),
            table(2,"models/sprops/misc/tubes/size_2/tube_24x18.mdl",vec(0,0,9),ang(0,0,90),"weather",array(2,1),"colorcopy",2)
            #table(2,"models/sprops/misc/tubes/size_2/tube_24x18.mdl",vec(0,0,9),ang(0,0,90),"weather",array(2,1),"colorcopy",3),
            #table(1,
            
            #[
            table(3,"holo","models/sprops/misc/tubes/size_2/tube_24x18.mdl","pos",vec(0,0,9),"weather",array(2,1),"ang",ang(0,0,90),"colorand",array(vec(80,60,50)*0.9,vec(90,65,55)*1.1)),
            table(1,"holo","models/magtrains/reportingmark.mdl","weather",array(1,2),"posrand",array(vec(122,43.5,50),vec(80,43.5,53)),"ang",ang(90,0,-90),"color",array(0,0,0,1,0,0,0,0),"bodygroup",array(0,vec(1,0,30),vec(2,0,25),vec(3,0,25),vec(4,0,30))),
            table(1,"holo","models/magtrains/reportingmark.mdl","weather",array(1,2),"poslave",array(6,vec(),vec(),180),"ang",ang(90,0,90),"color",array(0,0,0,1,0,0,0,0),"bodygroup",array(6)),
            table(1,"holo","models/magtrains/runningnumber.mdl","weather",array(1,2),"poslave",array(6,vec(0,0,-12),vec(),0),"ang",ang(90,0,-90),"color",array(0,0,0,1,0,0,0,0),"bodygroup",array(0,vec(1,1,15),vec(2,1,9),vec(3,0,9),vec(4,0,9),vec(5,0,9),vec(6,0,15)))
        ]#
        )
        
        #[,table(
            array(15,"usamerican general_gondola freight manifest mow old mdetail magnum 40s 50s 60s 70s 80s 90s gondola1",modelLength("models/magtrains/gondola1.mdl"),18,vec2(100,LoadChance)),
            table(0,"frame","models/magtrains/gondola1.mdl","weather",array(2,1,3,3,1,2),"color",array(0,7,1,1,1,3,1,60,0,0,40),"bodygroup",array(0,vec(1,0,1))),
            bogie(1,304,1),
            bogie(1,-304,1),
            table(2,"holo","models/sprops/misc/tubes/size_2/tube_24x18.mdl","pos",vec(0,0,9),"weather",array(2,1),"ang",ang(0,0,90),"colorand",array(vec(80,60,50)*0.9,vec(90,65,55)*1.1)),
            table(3,"holo","models/sprops/misc/tubes/size_2/tube_24x18.mdl","pos",vec(0,0,9),"weather",array(2,1),"ang",ang(0,0,90),"colorand",array(vec(80,60,50)*0.9,vec(90,65,55)*1.1))
        )

        #[
        
        "models/anytrains/rollingstock/freight/rus/rus_wagon_19-1241.mdl",2,"russian gravel_hopper freight manifest old hdetail anyone991 70s 80s 90s",
        vec(270,-4,0),array(1,3,3,2,6,4),array(1,1,1,2,10,15,50,75,15,0,15),vec2(0,0),array(),vec2(50,LoadChance),
        
        
        
            
        "models/daylight/ll_tankcar.mdl",8,"usamerican general_tanker chemical_tanker freight manifest old hdetail daylight 20s 30s 40s",
        vec(296,-2,90),array(1,1,3,3,2,4),array(0,0,1,2,0,0,0,50),vec2(0,0),array(),vec2(50,LoadChance),
            
        "models/daylight/woodreefer.mdl",30*0.7,"usamerican icereeferrefridgerator freight manifest old mdetail daylight 10s 20s 30s 40s 50s",
        vec(326,0,0),array(3,5,2,3,2,4),array(0,5,0,20,0,0,0,0,0,10,1),vec2(0,0),array(),vec2(50,LoadChance),
        
        
        
        
        "models/gsgtrainprops/trains/rolling_stock/autorack_bilevel_enclosed.mdl",3,"usamerican bilevel_closed_autorack freight unitfreight new hdetail gsgrove 80s 90s modern",
        vec(804,-14,90),array(),array(),vec2(0,12),array(),vec2(100,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/autorack_bilevel_semiopen.mdl",1,"usamerican bilevel_open_autorack freight unitfreight old hdetail gsgrove 70s 80s 90s",
        vec(804,-14,90),array(),array(),vec2(0,2),array(vec(1,0,1)),vec2(100,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/autorack_trilevel_semiopen.mdl",1,"usamerican trilevel_open_autorack freight unitfreight old hdetail gsgrove 70s 80s 90s",
        vec(786,-14,90),array(),array(),vec2(0,3),array(vec(1,0,1)),vec2(100,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",2,"usamerican l_coal_hopper_loaded freight unitfreight old hdetail gsgrove 70s 80s 90s",
        vec(551,-14,90),array(),array(),vec2(0,9),array(vec(1,1,1)),vec2(100,1),
        "models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",2,"usamerican u_coal_hopper_empty freight unitfreight old hdetail gsgrove 70s 80s 90s",
        vec(551,-14,90),array(),array(),vec2(0,9),array(),vec2(100,0),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",3,"usamerican l_coal_hopper_loaded freight unitfreight old hdetail gsgrove 70s 80s 90s",
        vec(459,-14,90),array(),array(),vec2(0,15),array(vec(1,1,1)),vec2(100,1),
        "models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",3,"usamerican u_coal_hopper_empty freight unitfreight old hdetail gsgrove 70s 80s 90s",
        vec(459,-14,90),array(),array(),vec2(0,15),array(vec(1,0,0)),vec2(100,0),
        
        "models/gsgtrainprops/trains/rolling_stock/caboose_baywindow_acf.mdl",1,"usamerican caboose old hdetail gsgrove 70s 80s 90s modern",
        vec(286,-14,90),array(),array(),vec2(0,7),array(),vec2(30,1),
        
        "models/gsgtrainprops/trains/rolling_stock/flatcar_89ft_garbage.mdl",2,"usamerican trash_flatcar freight manifest old hdetail gsgrove 80s 90s modern",
        vec(804,-14,90),array(),array(),vec2(0,2),array(vec(1,0,2)),vec2(90,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",6,"usamerican scrap_gondola freight manifest mow old hdetail gsgrove 70s 80s 90s modern", 
        vec(505,-14,90),array(),array(),vec2(0,2),array(vec(1,1,2)),vec2(100,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",6,"usamerican scrap_gondola freight manifest mow old hdetail gsgrove 70s 80s 90s modern",
        vec(505,-14,90),array(),array(),vec2(0,2),array(vec(1,1,2)),vec2(100,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_3800.mdl",4,"usamerican cement_hopper freight manifest hdetail old hdetail gsgrove 60 70s 80s 90s",
        vec(509,-14,90),array(),array(),vec2(0,3),array(),vec2(70,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",7,"usamerican grain_hopper freight manifest old hdetail gsgrove 60s 70s 80s 90s modern",
        vec(544,-14,90),array(),array(),vec2(0,20),array(),vec2(100,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4100.mdl",7,"usamerican grain_hopper freight manifest old hdetail gsgrove 70s 80s 90s",
        vec(570,-14,90),array(),array(),vec2(0,1),array(),vec2(100,LoadChance),
        
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4550.mdl",7,"usamerican grain_hopper freight manifest old hdetail gsgrove 70s 80s 90s",
        vec(560,-14,90),array(),array(),vec2(0,13),array(),vec2(100,LoadChance),
        
        
        
        
        "models/jazzie/trains/cars/aar_bulkhead_flatcar.mdl",3,"usamerican general_flatcar_bulkhead freight janky manifest old hdetail jazzie 30s 40s 50s 60s",
        vec(622,38,0),array(1,1,1,3,2,2),array(1,1,0,15,3,1,3,3,0,0,8),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/jazzie/trains/cars/aar_flatcar.mdl",3,"usamerican general_flatcar_bulkhead freight janky manifest old hdetail jazzie 30s 40s 50s 60s",
        vec(622,1,0),array(1,1,1,3,2,2),array(1,1,0,15,3,1,3,3,0,0,8),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/jazzie/trains/cars/aar_flatcar_stakes.mdl",3,"usamerican general_flatcar_bulkhead freight janky manifest old hdetail jazzie 30s 40s 50s 60s",
        vec(622,22,0),array(1,1,1,3,2,2),array(1,1,0,15,3,1,3,3,0,0,8),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/jazzie/trains/cars/ps1_boxcar.mdl",20,"usamerican general_boxcar_nonhigh freight janky manifest old hdetail jazzie 40s 50s 60s 70s",
        vec(600,78,0),array(3,1,3,2,2,3,2,4,1,6,1,7,2,10),array(6,3,1,4,4,3,1,1,0,15,50),vec2(0,0),array(),vec2(70,LoadChance),
        
        
        
        
        "models/joe/rolling_stock/1860s/24_boxcar/24_boxcar.mdl",7*3*1.5,"usamerican general_boxcar_nonhigh freight janky manifest old hdetail joeconqueror preera 10s",
        vec(220,-8,90),array(2,1,2,2,2,3,2,5,2,9),array(0,0,0,0,0,0,0,0,0,3,1),vec2(0,0),array(),vec2(30,LoadChance),
        
        "models/joe/rolling_stock/1860s/boxcar/boxcar.mdl",30*1.5,"usamerican general_boxcar_nonhigh janky freight manifest old hdetail joeconqueror preera 10s 20s 30s",
        vec(264,-10,90),array(2,1,2,3,2,5),array(0,0,0,0,0,0,0,0,0,3,1),vec2(0,0),array(),vec2(40,LoadChance),
        
        "models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",5*1.5*0.8,"usamerican general_flatcar freight manifest mow old hdetail joeconqueror preera 10s 20s",
        vec(220,-8,90),array(3,3,2,4,3,7),array(0,0,0,0,0,0,0,0,0,3,1),vec2(0,0),array(vec(1,1,1),vec(2,0,1)),vec2(35,LoadChance),
        "models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",5*1.5*0.8,"usamerican general_gondola freight manifest mow old hdetail joeconqueror preera 10s 20s",
        vec(220,-8,90),array(3,3,2,4,3,7),array(0,0,0,0,0,0,0,0,0,3,1),vec2(0,0),array(vec(3,1,1)),vec2(35,LoadChance),
        "models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",2*1.5*0.8,"usamerican water_flatcar freight manifest old hdetail joeconqueror preera 10s 20s",
        vec(220,-8,90),array(3,3,2,4,3,7),array(0,0,0,0,0,0,0,0,0,3,1),vec2(0,0),array(vec(4,2,2)),vec2(35,LoadChance),
        "models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",2*1.5*0.8,"usamerican water_gondola freight manifest old hdetail joeconqueror preera 10s 20s",
        vec(220,-8,90),array(3,3,2,4,3,7),array(0,0,0,0,0,0,0,0,0,3,1),vec2(0,0),array(vec(3,1,1),vec(4,2,2)),vec2(35,LoadChance),
        "models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",10*1.5*0.8,"usamerican coal_gondola freight manifest old hdetail joeconqueror preera 10s 20s",
        vec(220,-8,90),array(3,3,2,4,3,7),array(0,0,0,0,0,0,0,0,0,3,1),vec2(0,0),array(vec(3,1,1),vec(4,1,1)),vec2(35,LoadChance),
        
        "models/joe/rolling_stock/1860s/open_stock_car/open_stock_car.mdl",1*1.5*0.8,"usamerican stock freight manifest old janky hdetail joeconqueror preera",
        vec(220,-8,90),array(3,2,2,3,2,7,2,8),array(0,0,0,0,0,0,0,0,0,3,1),vec2(0,0),array(),vec2(25,LoadChance),
        
        "models/joe/rolling_stock/stock_car.mdl",20*0.7,"usamerican stock freight manifest old hdetail janky joeconqueror 10s 20s 30s 40s 50s",
        vec(344,0,90),array(3,1,2,7,1,4,4,2,4,6,3,9,1,5),array(0,0,0,0,0,0,1,0,0,4,2),vec2(0,0),array(),vec2(50,LoadChance),
        
        "models/joe/rolling_stock/tank_car.mdl",10,"usamerican general_tanker freight manifest old hdetail janky joeconqueror 30s 40s 50s 60s 70s",
        vec(208*2,0,90),array(4,5,3,1,1,2,2,3,2,7),array(0,1,2,0,0,0,50),vec2(0,0),array(),vec2(55,LoadChance),
        
        
        
        
        "models/magtrains/autorack1.mdl",1,"usamerican bilevel_closed_autorack freight unitfreight old ldetail magnum 80s 90s",
        vec(608,0,0),array(1,1,3,3,2,2),array(1,3,8,60,5,2,1,1,0,0,5),vec2(0,0),array(),vec2(120,LoadChance),
        
        "models/magtrains/autorack2.mdl",1,"usamerican bilevel_open_autorack freight unitfreight old ldetail vmagnum 70s 80s 90s",
        vec(608,0,0),array(3,1,2,2,1,3),array(1,3,8,60,5,2,1,1,0,0,5),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/autorack_89_covered.mdl",3,"usamerican bilevel_closed_autorack freight unitfreight new hdetail magnum 80s 90s modern",
        vec(784,0,0),array(3,1,1,2,1,7),array(1,3,8,60,5,2,1,1,0,0,5),vec2(0,0),array(vec(1,0,5),vec(2,0,3),vec(3,0,1)),vec2(120,LoadChance),
        
        "models/magtrains/boxcar1.mdl",5,"usamerican general_boxcar_nonhigh freight manifest old ldetail magnum 40s 50s 60s",
        vec(352,0,0),array(1,2,2,1,3,3),array(6,3,1,4,4,3,1,1,0,15,50),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/magtrains/boxcar2.mdl",5,"usamerican general_boxcar_nonhigh freight manifest old ldetail magnum 40s 50s 60s",
        vec(352,0,0),array(1,2,2,1,3,3),array(6,3,1,4,4,3,1,1,0,15,50),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/magtrains/boxcar3.mdl",80,"usamerican general_boxcar_highcube freight manifest old mdetail magnum 80s 90s modern",
        vec(304*2,0,0),array(1,4,2,3,3,1,6,5),array(4,0,0,16,1,7,0,0,0,0,30),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/boxcar4.mdl",15,"usamerican general_boxcar_nonhigh freight manifest old ldetail magnum 80s 90s modern",
        vec(608,0,0),array(1,4,3,1,2,3),array(6,3,1,4,4,3,1,1,0,15,50),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/boxcar5.mdl",30,"usamerican general_boxcar_nonhigh freight manifest old mdetail magnum 70s 80s 90s modern",
        vec(512,0,0),array(1,4,3,1,2,2),array(6,3,1,4,4,3,1,1,0,15,50),vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),vec2(100,LoadChance),
        
        "models/magtrains/boxcar_50.mdl",70,"usamerican general_boxcar_nonhigh freight manifest new hdetail magnum 70s 80s 90s modern",
        vec(224*2,0,0),array(1,5,2,7,3,1),array(3,2,1,10,2,4,1,2,0,0,25),vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),vec2(100,LoadChance),
        
        "models/magtrains/caboose1.mdl",1,"usamerican caboose old mdetail magnum 30s 40s 50s 60s 70s 80s 90s",
        vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),array(30,1,1,1,3,1,1,1,0,3,15),vec2(0,0),array(vec(1,0,1)),vec2(30,1),
        
        "models/magtrains/caboose2.mdl",1,"usamerican caboose old mdetail magnum 30s 40s 50s 60s 70s 80s 90s",
        vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),array(30,1,1,1,3,1,1,1,0,3,15),vec2(0,0),array(vec(1,0,1)),vec2(30,1),
        
        "models/magtrains/caboose3.mdl",1,"usamerican caboose old mdetail magnum 30s 40s 50s 60s 70s 80s 90s",
        vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,10),array(30,1,1,1,3,1,1,1,0,3,15),vec2(0,0),array(vec(1,0,1)),vec2(30,1),
        
        "models/magtrains/caboose4.mdl",1,"usamerican caboose old mdetail magnum 30s 40s 50s 60s 70s 80s 90s",
        vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,3,9),array(30,1,1,1,3,1,1,1,0,3,15),vec2(0,0),array(vec(1,0,1)),vec2(30,1),
        
        "models/magtrains/centerbeam1.mdl",4,"usamerican centerbeam_flatcar_wood freight manifest mdetail old magnum wood 70s 80s 90s",
        vec(304*2,0,0),array(3,2,4,3,1,5,2,1),array(5,1,1,15,15,5,1,1,0,0,15),vec2(0,0),array(vec(1,0,1)),vec2(80,LoadChance),
        
        "models/magtrains/flatcar1.mdl",8,"usamerican wood_flatcar freight manifest old mdetail magnum 40s 50s 60s 70s 80s",
        vec(304*2,0,0),array(3,1,4,2,1,4,2,5),array(1,1,0,15,3,1,3,3,0,0,8),vec2(0,0),array(vec(1,1,1)),vec2(80,LoadChance),
        
        "models/magtrains/flatcar1.mdl",15,"usamerican general_flatcar freight manifest old mdetail magnum 40s 50s 60s 70s 80s",
        vec(304*2,0,0),array(3,1,4,2,1,4,2,5),array(1,1,0,15,3,1,3,3,0,0,8),vec2(0,0),array(),vec2(80,LoadChance),
        
        "models/magtrains/flatcar2.mdl",20,"usamerican general_flatcar_bulkhead freight manifest old mdetail magnum 40s 50s 60s 70s 80s 90s",
        vec(304*2,0,0),array(3,1,4,2,1,4,2,5),array(1,1,0,15,3,1,3,3,0,0,8),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/flatcar3.mdl",4,"usamerican heavy_flatcar freight manifest old mdetail magnum 40s 50s 60s",
        vec(264*2,0,0),array(1,1,3,2,3,3,2,5),array(0,0,0,0,0,0,0,1,0,0,3),vec2(0,0),array(),vec2(120,LoadChance),
        
        "models/magtrains/flatcar4.mdl",2,"usamerican heavy_flatcar freight manifest old mdetail magnum 40s 50s 60s",
        vec(608,0,0),array(1,3,3,1,2,4),array(5,1,1,15,15,5,1,1,0,0,15),vec2(0,0),array(),vec2(120,LoadChance),
        
        "models/magtrains/flatcar_f89f.mdl",2,"usamerican tofc_flatcar freight manifest unitfreight new hdetail magnum 80s 90s modern",
        vec(736,0,0),array(1,1,3,2,6,3),array(0,0,1,25,0,0,0,3,0,0,5),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/flatcar_f89j.mdl",2,"usamerican tofc_flatcar freight manifest unitfreight new hdetail magnum 80s 90s modern",
        vec(736,0,0),array(1,1,3,2,6,3),array(0,0,1,25,0,0,0,3,0,0,5),vec2(0,0),array(),vec2(100,LoadChance),
              
        "models/magtrains/gondola1.mdl",15,"usamerican general_gondola freight manifest mow old mdetail magnum 40s 50s 60s 70s 80s 90s modern",
        vec(304*2,0,0),array(2,1,3,3,1,2),array(7,1,1,1,3,1,60,0,0,40),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/gondola2.mdl",10,"usamerican scrap_gondola freight manifest old ldetail magnum 60s 70s 80s 90s modern",
        vec(304*2,0,0),array(2,1,3,2,1,3),array(7,1,1,1,3,1,60,0,0,40),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/hopper1.mdl",16,"usamerican cement_hopper freight manifest old mdetail magnum 50s 60s 70s 80s",
        vec(176*2,0,0),array(3,2,1,4,2,1),array(0,0,50,0,0,1,1,3,0,0,15),vec2(0,0),array(vec(1,2,2)),vec2(70,LoadChance),
        
        "models/magtrains/hopper1.mdl",8,"usamerican grain_hopper freight manifest old mdetail magnum 60s 70s 80s",
        vec(176*2,0,0),array(3,2,1,4,2,1),array(1,1,20,1,2,2,1,1,0,0,5),vec2(0,0),array(vec(1,1,1)),vec2(70,LoadChance),
        
        "models/magtrains/hopper1.mdl",10,"usamerican u_coal_hopper_empty freight manifest unitfreight mdetail old magnum 20s 30s 40s 50s 60s 70s",
        vec(176*2,0,0),array(3,2,1,4,2,1),array(3,0,1,1,5,1,50,5,3,0,25),vec2(0,0),array(vec(2,0,0)),vec2(70,0),
        
        "models/magtrains/hopper1.mdl",10,"usamerican l_coal_hopper_loaded freight manifest unitfreight mdetail old magnum 20s 30s 40s 50s 60s 70s",
        vec(176*2,0,0),array(3,2,1,4,2,1),array(3,0,1,1,5,1,50,5,3,0,25),vec2(0,0),array(vec(2,1,1)),vec2(70,1),
        
        "models/magtrains/hopper2.mdl",10,"usamerican cement_hopper freight manifest mdetail old magnum 60s 70s 80s 90s",
        vec(176*2,0,0),array(3,2,1,4,2,1),array(3,0,40,2,2,1,2,1,0,0,8),vec2(0,0),array(),vec2(90,LoadChance),
                
        "models/magtrains/hopper3.mdl",35,"usamerican grain_hopper freight manifest old ldetail magnum 80s 90s modern",
        vec(272*2,0,0),array(1,4,2,3,3,1),array(0,0,5,0,0,0,0,0,0,0,1),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/hopper4.mdl",7,"usamerican grain_hopper freight manifest old mdetail magnum 50s 60s 70s 80s",
        vec(256*2,0,0),array(3,2,1,4,2,1),array(0,0,50,0,0,1,1,3,0,0,15),vec2(0,0),array(vec(1,3,3)),vec2(100,LoadChance),
        
        "models/magtrains/hopper4.mdl",20,"usamerican grain_hopper freight manifest old mdetail magnum 70s 80s 90s modern",
        vec(256*2,0,0),array(3,2,1,4,2,1),array(1,1,20,1,2,2,1,1,0,0,5),vec2(0,0),array(vec(1,2,2)),vec2(100,LoadChance),
        
        "models/magtrains/hopper4.mdl",5,"usamerican u_coal_hopper_empty freight manifest unitfreight old mdetail magnum 40s 50s 60s 70s 80s",
        vec(256*2,0,0),array(3,2,1,4,2,1),array(3,0,1,1,5,1,50,5,3,0,25),vec2(0,0),array(vec(1,0,1),vec(2,0,0)),vec2(100,0),
        
        "models/magtrains/hopper4.mdl",5,"usamerican l_coal_hopper_loaded freight manifest unitfreight old mdetail magnum 40s 50s 60s 70s 80s",
        vec(256*2,0,0),array(3,2,1,4,2,1),array(3,0,1,1,5,1,50,5,3,0,25),vec2(0,0),array(vec(1,0,1),vec(2,1,1)),vec2(100,1),
        
        "models/magtrains/intermodal/wellcar_40_single.mdl",3,"usamerican single_wellcar_40ft freight unitfreight new hdetail magnum 80s 90s modern",
        vec(640,0,0),array(1,1,2,3,3,2),array(1,0,0,10,0,1,0,0,0,0,2),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/intermodal/wellcar_40r_single.mdl",1,"usamerican single_wellcar_40ft freight unitfreight new hdetail magnum 80s 90s modern",
        vec(640,0,0),array(1,1,3,3,2,2),array(1,0,0,10,0,1,0,0,0,0,2),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/intermodal/wellcar_48_single.mdl",5,"usamerican single_wellcar_48ft freight unitfreight new hdetail magnum 80s 90s modern",
        vec(736,0,0),array(1,1,2,3,3,2),array(1,0,0,10,0,1,0,0,0,0,2),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/intermodal/wellcar_53_single.mdl",15,"usamerican single_wellcar_53ft freight unitfreight new hdetail magnum 80s 90s modern",
        vec(800,0,0),array(1,1,3,4,2,2),array(1,0,0,10,0,1,0,0,0,0,2),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/jenny1.mdl",1,"usamerican ore_gondola freight unitfreight old mdetail magnum 40s 50s 60s 70s 80s",
        vec(108*2,-2,0),array(1,1,3,2,2,3,2,5),array(0,0,0,0,0,0,1,0,0,0,2),vec2(0,0),array(vec(3,0,3),vec(5,0,2),vec(7,0,2)),vec2(100,LoadChance),
        
        "models/magtrains/monkatraz/boxcars/boxcar_40pw_standard.mdl",25,"usamerican general_boxcar_nonhigh freight manifest old hdetail magnum monkatraz general 20s 30s 40s 50s 60s 70s",
        vec(172*2,0,0),array(1,2,1,4,1,6,1,9,2,5,3,1),array(6,3,1,4,4,3,1,1,0,5,50),vec2(0,0),array(vec(5,0,2),vec(1,2,2)),vec2(70,LoadChance),
        "models/magtrains/monkatraz/boxcars/boxcar_40pw_standard.mdl",150,"usamerican general_boxcar_nonhigh freight manifest old hdetail magnum monkatraz general 40s 50s 60s",
        vec(172*2,0,0),array(1,2,1,4,1,6,1,9,2,5,3,1),array(6,3,1,4,4,3,1,1,0,15,50),vec2(0,0),array(vec(4,0,2),vec(5,0,2),vec(1,2,3),vec(3,0,5)),vec2(70,LoadChance),
        
        "models/magtrains/tanker1.mdl",1,"usamerican general_tanker chemical_tanker freight manifest mow old ldetail magnum 60s 70s 80s",
        vec(208*2,-4,0),array(3,1,2,4,1,3),array(0,0,5,0,0,1,10),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/magtrains/tanker2.mdl",5,"usamerican lpg_tanker freight manifest old ldetail magnum 60s 70s 80s 90s",
        vec(304*2,0,0),array(3,1,1,3,2,4),array(0,0,5,0,0,1,50),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/tanker3.mdl",4,"usamerican ethanol_tanker oil_tanker freight manifest old mdetail magnum general 80s 90s modern",
        vec(320*2,0,0),array(3,1,1,2,2,3),array(0,0,5,0,0,1,75),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/magtrains/tanker4.mdl",8,"usamerican general_tanker freight manifest old mdetail magnum general 80s 90s modern",
        vec(256*2,0,0),array(3,1,2,2,1,5),array(0,0,5,0,0,1,75),vec2(0,0),array(),vec2(100,LoadChance),
        
        
        
        
        "models/props_metaladon/boxcar_40ft_hycube.mdl",3,"usamerican appliance_boxcar_highcube freight manifest mow new hdetail metaladon 50s 60s 70s",
        vec(176*2,0,0),array(1,4,2,3,3,1,1,7,2,8,5,13),array(1,1,0,1,1,0,0,0,0,0,2),vec2(0,0),array(vec(6,0,1)),vec2(70,LoadChance),
        "models/props_metaladon/boxcar_40ft_hycube.mdl",1,"usamerican appliance_boxcar_highcube freight manifest mow new hdetail metaladon 50s 60s 70s",
        vec(176*2,0,0),array(1,4,2,3,3,1,1,7,2,8,5,13),array(1,1,0,1,1,0,0,0,0,0,2),vec2(1,1),array(vec(6,0,1)),vec2(70,LoadChance),
        
        "models/props_metaladon/boxcar_86ft_autoparts.mdl",1,"usamerican autoparts_boxcar_highcube freight unitfreight old hdetail metaladon 70s 80s 90s modern",
        vec(370*2,-1,0),array(1,1,1,6,2,5,3,2),array(10,0,1,5,1,15,3,3,0,0,50),vec2(0,0),array(vec(1,0,4),vec(2,0,6),vec(7,0,3),vec(8,0,1)),vec2(100,LoadChance),
        
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",25,"usamerican centerbeam_flatcar_wood freight manifest new hdetail metaladon 80s 90s modern",
        vec(360*2,0,0),array(2,1,1,2,3,3,8,11),array(5,1,1,25,5,5,1,1,0,0,25),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8),vec(6,0,3)),vec2(100,LoadChance),
        
        "models/props_metaladon/freelance/boxcar_60ft_autoparts.mdl",1.5,"usamerican autoparts_boxcar_highcube freight manifest new hdetail metaladon autoparts highcube 60s 70s 80s",
        vec(543,0,0),array(1,4,2,3,3,1,1,8,2,9,5,13),array(3,0,0,1,1,3,1,1,0,0,35),vec2(1,1),array(vec(6,0,1)),vec2(100,LoadChance),
        "models/props_metaladon/freelance/boxcar_60ft_autoparts.mdl",3.5,"usamerican autoparts_boxcar_highcube freight manifest new hdetail metaladon autoparts highcube 60s 70s 80s",
        vec(543,0,0),array(1,4,2,3,3,1,1,8,2,9,5,13),array(3,0,0,1,1,3,1,1,0,0,35),vec2(0,0),array(vec(6,0,1)),vec2(100,LoadChance),
        
        "models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",6,"usamerican general_flatcar freight manifest mow new hdetail metaladon 30s 40s 50s 60s",
        vec(166*2,4,0),array(3,2,1,3,2,5),array(0,0,0,0,0,0,0,1,0,0,3),vec2(0,0),array(vec(3,0,2),vec(3,0,2)),vec2(70,LoadChance),
        
        "models/props_metaladon/freelance/flatcar_45ft_logs.mdl",4,"usamerican log_flatcar freight manifest new hdetail metaladon 60s 70s 80s 90s",
        vec(386,2,0),array(2,6,3,2,1,4),array(0,0,0,0,0,0,0,0,0,0,1),vec2(0,0),array(vec(3,0,6)),vec2(70,LoadChance),
        
        "models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",8,"usamerican ore_hopper aggregate_hopper freight unitfreight manifest new hdetail metaladon 60s 70s 80s 90s modern",
        vec(376,0,0),array(1,1,3,3,2,6,2,2,8,9),array(3,1,30,2,1,1,30,15,10,0,5),vec2(0,0),array(vec(3,0,9),vec(2,0,1)),vec2(100,LoadChance),
        
        "models/props_metaladon/freelance/tanker_18k_chemical.mdl",17,"usamerican chemical_tanker freight manifest new hdetail metaladon general 80s 90s modern",
        vec(308,0,0),array(3,2,2,4,1,5,1,9,8,10),array(0,0,1,0,0,1,15),vec2(1,1),array(),vec2(100,LoadChance),
        "models/props_metaladon/freelance/tanker_18k_chemical.mdl",8,"usamerican chemical_tanker freight manifest new hdetail metaladon general 80s 90s modern",
        vec(308,0,0),array(3,2,2,4,1,5,1,9,8,10),array(0,0,1,0,0,1,15),vec2(0,0),array(),vec2(100,LoadChance), 
        
        "models/props_metaladon/freelance/tanker_25k_trinity.mdl",46,"usamerican general_tanker oil_tanker ethanol_tanker freight manifest new hdetail metaladon 80s 90s modern",
        vec(262*2,0,0),array(2,1,1,2,3,3,1,7,8,9),array(0,0,5,0,0,1,75),vec2(1,1),array(vec(3,0,1)),vec2(100,LoadChance),
        "models/props_metaladon/freelance/tanker_25k_trinity.mdl",4,"usamerican general_tanker oil_tanker ethanol_tanker freight manifest new hdetail metaladon 80s 90s modern",
        vec(262*2,0,0),array(2,1,1,2,3,3,1,7,8,9),array(0,0,5,0,0,1,75),vec2(0,0),array(vec(3,0,1)),vec2(100,LoadChance),
            
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican woodchips_gondola freight manifest old hdetail metaladon 70s 80s 90s modern",
        vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,0,0,0,15,5,0,0,5),vec2(0,0),array(vec(2,2,4),vec(3,0,6),vec(4,0,3),vec(7,1,1)),vec2(100,LoadChance),
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican scrap_gondola freight manifest old hdtail metaladon 70s 80s 90s modern",
        vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,0,0,0,15,5,0,0,5),vec2(0,0),array(vec(2,6,6),vec(3,0,6),vec(4,0,3),vec(7,1,1)),vec2(100,LoadChance),
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican woodchips_gondola freight manifest old hdetail metaladon 60s 70s 80s",
        vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,0,0,0,15,5,0,0,5),vec2(0,0),array(vec(2,0,1),vec(3,0,6),vec(4,0,3),vec(7,1,1)),vec2(100,LoadChance),
        
        "models/props_metaladon/hopper_2bay_airslide.mdl",12,"usamerican airslide_hopper_flour airslide_hopper_sugar freight manifest buffer new hdetail metaladon 50s 60s 70s 80s 90s",
        vec(244*2,0,0),array(2,2,1,3,3,4,8,9),array(1,1,20,1,2,2,1,1,0,0,5),vec2(0,0),array(vec(2,0,1)),vec2(100,LoadChance),
        
        "models/props_metaladon/hopper_2bay_trinity.mdl",12,"usamerican cement_hopper freight manifest hdetail new metaladon 80s 90s modern",
        vec(180*2,0,0),array(3,8,1,3,2,1,3,2,8,9),array(0,0,80,0,0,1,1,5,0,0,5),vec2(0,0),array(vec(5,0,5),vec(2,0,3)),vec2(100,LoadChance),
        
        "models/props_metaladon/hopper_3bay_ari.mdl",50,"usamerican grain_hopper freight manifest old hdetail metaladon 90s modern",
        vec(284*2,0,0),array(1,1,2,2,3,3,8,6),array(0,0,50,0,0,1,1,1),vec2(0,0),array(vec(3,0,1)),vec2(120,LoadChance),
        
        "models/props_metaladon/jenny_24ft_u27.mdl",1,"usamerican ore_hopper freight unitfreight old hdetail metaladon 50s 60s 70s",
        vec(106*2,6,0),array(2,1,1,2,3,3,8,9),array(0,0,0,0,0,0,0,0,0,0,1),vec2(0,0),array(),vec2(100,LoadChance),
        
        "models/props_metaladon/tanker_8k_beercan.mdl",3,"usamerican chemical_tanker freight manifest mow new hdetail metaladon 70s 80s 90s",
        vec(96*2,0,0),array(3,2,2,4,1,5),array(0,0,5,0,0,1,25),vec2(0,0),array(vec(3,0,1)),vec2(70,LoadChance),
        
        "models/props_metaladon/tanker_34k_lpg.mdl",15,"usamerican lpg_tanker freight manifest old hdetail metaladon lpg 70s 80s 90s modern",
        vec(324*2,0,0),array(1,1,3,3,2,5,1,6,8,7),array(0,0,5,0,0,1,50),vec2(1,1),array(),vec2(100,LoadChance),
        "models/props_metaladon/tanker_34k_lpg.mdl",5,"usamerican lpg_tanker freight manifest old hdetail metaladon lpg 70s 80s 90s modern",
        vec(324*2,0,0),array(1,1,3,3,2,5,1,6,8,7),array(0,0,5,0,0,1,50),vec2(0,0),array(),vec2(100,LoadChance),
        
        
        
        
        "models/rus 12 132 gondola.mdl",4,"russian general_gondola freight manifest old hdetail goomz 80s 90s modern",
        vec(376,35,90),array(1,2,2,1,3,3,2,4,2,5),array(1,1,1,2,10,15,50,75,15,0,15),vec2(0,0),array(),vec2(60,LoadChance),
        
        "models/rus 1612-10 box wagon.mdl",1,"russian general_boxcar_nonhigh freight manifest old hdetail goomz 80s 90s modern",
        vec(376,-8,90),array(1,1,2,2,3,3,2,4,2,6),array(0,0,1,0,5,5,0,1,0,0,1),vec2(0,0),array(),vec2(60,LoadChance),
        
        "models/rus 1612-12 box wagon.mdl",10,"russian general_boxcar_nonhigh freight manifest old hdetail goomz 80s 90s modern",
        vec(376,-8,90),array(1,1,2,2,3,3,2,4,2,6),array(0,0,1,0,5,5,0,1,0,0,1),vec2(0,0),array(),vec2(60,LoadChance),
        
        
        
        
        "models/unionstrains/bethgon1.mdl",4,"usamerican u_coal_hopper_empty freight unitfreight old mdetail union janky 70s 80s 90s modern",
        vec(285*2,4,0),array(3,2,1,1,2,4,7,8,3,7),array(3,0,1,1,5,1,50,5,20,0,25),vec2(0,0),array(vec(5,0,0),vec(2,3,3),vec(3,3,3)),vec2(100,LoadChance),
        "models/unionstrains/bethgon1.mdl",4,"usamerican l_coal_hopper_loaded freight unitfreight old mdetail union janky 70s 80s 90s modern",
        vec(285*2,4,0),array(3,2,1,1,2,4,7,8,3,7),array(3,0,1,1,5,1,50,5,20,0,25),vec2(0,0),array(vec(5,3,3),vec(2,3,3),vec(3,3,3)),vec2(100,LoadChance),
        
        "models/unionstrains/boxcar1.mdl",4,"usamerican general_boxcar_nonhigh freight manifest janky old mdetail union 30s 40s 50s 60s",
        vec(227*2,70,0),array(1,4,2,6,3,1,3,3,4,5),array(1,0,0,0,0,0,0,0,0,0,10),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/unionstrains/caboose1.mdl",1,"usamerican caboose old mdetail union janky 10s 20s 30s 40s 50s 60s",
        vec(320,77,0),array(2,1,1,2,3,3,2,4,2,6),array(30,1,1,1,3,1,1,1,0,3,15),vec2(0,0),array(),vec2(30,1),
        
        "models/unionstrains/flatcar1.mdl",12,"usamerican general_flatcar freight manifest old mdetail union 20s 30s 40s 50s 60s",
        vec(257*2,-14,0),array(3,1,1,3,2,4),array(1,1,0,15,3,1,3,3,0,0,8),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/unionstrains/gondola_g21.mdl",7,"usamerican general_gondola freight manifest mow old mdetail union janky 40s 50s 60s 70s",
        vec(356*2,-19,90),array(3,1,1,3,2,5),array(7,1,1,1,3,1,60,0,0,40),vec2(0,0),array(),vec2(70,LoadChance),
        
        "models/unionstrains/hopper1.mdl",2,"usamerican l_coal_hopper_loaded freight manifest unitfreight old hdetail union janky 30s 40s 50s 60s",
        vec(376,40,0),array(3,1,2,3,1,4,3,5,7,9,3,7),array(3,0,1,1,5,1,50,5,3,0,25),vec2(0,0),array(vec(1,3,3)),vec2(70,1),
        "models/unionstrains/hopper1.mdl",2,"usamerican u_coal_hopper_empty freight manifest unitfreight old hdetail union janky 30s 40s 50s 60s",
        vec(376,40,0),array(3,1,2,3,1,4,3,5,7,9,3,7),array(3,0,1,1,5,1,50,5,3,0,25),vec2(0,0),array(),vec2(70,0)]#
        
    )
    
    #Functions
    
    function number railhead(Ent:string){
        
        if(Ent == "models/magtrains/trucks/barber_s2_phx.mdl"){
        
            return 26
            
        }else{
        
            print("No offset defined for this bogie!")
            
        }
        
    }
    
    function number progress(N,Y){
        
        if(N){
            
            return ((0.6 - (Y/120)*0.4)*Y)+Y
            
        }else{
        
            return (0.6 - (Y/120)*0.4)*Y
            
        }
        
    }
        
    function vector randtoRGB(Base:vector,Shade:vector){
        
        local Hue = mod(random(Base:x(),Shade:x()),360)
        local Sat = clamp(Base:y()+random(Shade:y(),-Shade:y()),0,1)
        local Light = clamp(Base:z()+random(Shade:z(),-Shade:z()),0,1)
        
        local Chr = (1 - abs(2 * Light - 1)) * Sat
        local H = Hue/60
        local MID =(1 - abs(H % 2 - 1)) * Chr
        
        if(H < 1){
            R = Chr
            G = MID
            B = 0
        }elseif(H < 2){
            R = MID
            G = Chr
            B = 0
        }elseif(H < 3){
            R = 0
            G = Chr
            B = MID
        }elseif(H < 4){
            R = 0
            G = MID
            B = Chr
        }elseif(H < 5){
            R = MID
            G = 0
            B = Chr
        }elseif(H < 6){
            R = Chr
            G = 0
            B = MID
        }else{
            R = 255
            G = 255
            B = 255
        }
        
        local M = Light - Chr/2
        return vec(R+M,G+M,B+M)*255
    
    }
    
    function vector toRGB(HSL:vector){
        
        local Hue = HSL:x()
        local Sat = HSL:y()
        local Light = HSL:z()
        
        local Chr = (1 - abs(2 * Light - 1)) * Sat
        local H = Hue/60
        local MID =(1 - abs(H % 2 - 1)) * Chr
        
        if(H < 1){
            R = Chr
            G = MID
            B = 0
        }elseif(H < 2){
            R = MID
            G = Chr
            B = 0
        }elseif(H < 3){
            R = 0
            G = Chr
            B = MID
        }elseif(H < 4){
            R = 0
            G = MID
            B = Chr
        }elseif(H < 5){
            R = MID
            G = 0
            B = Chr
        }elseif(H < 6){
            R = Chr
            G = 0
            B = MID
        }else{
            R = 100
            G = 255
            B = 255
        }
        
        local M = Light - Chr/2
        return vec(R+M,G+M,B+M)*255
    
    }
    
    function number auto_mult(N,S:string){
        
        for(X = 1,Multipliers:count()/2){
            
            if(S:find(Multipliers[X*2-1,string])){
                
                N = N*Multipliers[X*2,number]
                
            }
            
        }
            
        return N
        
    }
    
    function array parse(P:array){
        
        local O = array(P[1,number])
            
        for(X = 1, P:count()-1){
            
            for(Y = 1, P[X+1,number]){
                
                O = O:add(array(X))
                
            }
            
        }
        
        return O
        
    }
    
    function number metacount(T:table){
        
        local O = 0
        
        for(X = 1, 10){
            
            O = O + T[toString(X),array]:count()
            
        }
        
        return O
        
    }
    
    function string list(T:table){
        
        local O = ""
        
        for(X = 1, 10){
            
            for(Y = 1, T[toString(X),array]:count()){
            
                O = O + T[toString(X),array][Y,string] + " "
                
            }
            
        }
        
        return O:trim()
        
    }
    
    function chew(N){
        
        MDL[N,table][1,array][2,string] = MDL[N,table][1,array][2,string]  + " nodef mdltag loaded empty anytime anyone anykind anysuspension anydetail anytype anywhere"
        
        if(!MDL[N,table][1,array][2,string]:find("janky")){
            
           MDL[N,table][1,array][2,string] = MDL[N,table][1,array][2,string] + " functional" 
            
        }
        
        MDL[N,table][1,array][1,number] = auto_mult(MDL[N,table][1,array][1,number],MDL[N,table][1,array][2,string])
        
        TagAttributes[TagAttributes:count(),array] = TagAttributes[TagAttributes:count(),array]:add(array(MDL[N,table][1,array][2,string]:explode(" ")[MDL[N,table][1,array][2,string]:explode(" "):count(),string]))
        
        for(D = 2, MDL[N,table]:count()){
            
            for(T = 1, (MDL[N,table][D,table]:count()-3)/2){
                
                if(MDL[N,table][D,table][T*2+2,string] == "color"){
                    
                    MDL[N,table][D,table][T*2+3,array] = parse(MDL[N,table][D,table][T*2+3,array])
                    
                }
                
            }
            
        }
        
    }
        
        
    
    #Misc Variable Priming
        
    E = entity()
    Quota = 500
    
    X = Y = Z = N = 1
    
    NewPos = 1
    INCR = 90/4
    
    HideChat = 1
    
    HOLID = 2
    
    Pool = array(0)
    PoolTrack = ""

    E:propFreeze(0)
    E:setPos(E:pos()+vec(0,0,6))
    
    #Holograms and Coloration
    
    holoCreate(0,E:toWorld(vec(0,70,-7)),vec(1,1,1.5)*2.5,E:toWorld(ang(0,0,-90)),vec(0,0,0),"cone")
    holoParent(0,E)
    holoMaterial(0,"debug/debugdrawflat")
    E:setColor(vec(80,60,50))
    holoColor(0,toRGB(vec(HUEEE,0.5,0.5)))
    HUEEE = (HUEEE + 10)%360
    
    
    E:setSubMaterial(1,"models/props_gulch/tinycars/tc_colorable")
    E:setSubMaterial(2,"models/props_gulch/tinycars/tc_colorable")
    E:setSubMaterial(9,"models/proppertextures/wheel")
    E:setSubMaterial(7,"models/proppertextures/wheel")
    E:propPhysicalMaterial("friction_00")
    
    E:setMaterial("")
    E:setAlpha(255) 
    
    
    #Preset stuff in MDL
    
    while(N <= MDL:count() & minquota() > Quota){
        
        chew(N)
        N++
        
    }
    
}

interval(100)

if(clk() & minquota() > Quota){

    if(Print:count() & playerCanPrint()){
        
        if(Print[1,string] != ""){
            
            print(Print[1,string])
            
        }elseif(Print[1,number]:toString() != ""){
        
            print(Print[1,number]:toString())
            
        }else{
        
            print("Incompatible!")
            
        }
        
        Print:remove(1)
        
    }
    
    Eye = E:pos()
    Angle = round((E:angles():yaw()-90)/INCR)*INCR
    
    Time = Time + 1
    
    if(Time % 1 == 0){

        E:setColor(vec(80,60,50))
        holoColor(0,toRGB(vec(HUEEE,0.5,0.5)))
        HUEEE = (HUEEE + 10)%360
        
    }
    
    while(N <= MDL:count() & minquota() > Quota){
        
        chew(N)
        N++
        
    }
    
}

if(chatClk(owner())){
    
    LSC = owner():lastSaid():trim():lower()

    if((LSC:explode(" ")[1,string] == "!sp" | LSC:explode(" ")[1,string] == ".sp")){
        
        hideChat(HideChat)
        
        if(LSC:explode(" ")[2,string]:toNumber() != 0){
            
            Print = Print:add(array("Command recieved! Queuing " + LSC:explode(" ")[2,string]:toNumber() + " cars."))
            LS = LS:add(array(owner():lastSaid():trim():lower()))
            
        }elseif(LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber() != 0 & LSC:explode(" ")[2,string]:sub(LSC:explode(" ")[2,string]:length()-1,LSC:explode(" ")[2,string]:length()) == "ft"){
        
            Print = Print:add(array("Command recieved! Queuing " + LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber() + " feet of cars."))
            LS = LS:add(array(owner():lastSaid():trim():lower()))
            
        }elseif(LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber() != 0 & LSC:explode(" ")[2,string]:sub(LSC:explode(" ")[2,string]:length(),LSC:explode(" ")[2,string]:length()) == "t"){
        
            Print = Print:add(array("Command recieved! Queuing " + LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber() + " tons worth of cars."))
            LS = LS:add(array(owner():lastSaid():trim():lower()))
            
        }else{
        
            Print = Print:add(array("Incorrect syntax! Do .sp [number of cars] [tag] [tag] etc..."))
            
        }
        
    }elseif(LSC:explode(" ")[1,string] == ".rem" | LSC:explode(" ")[1,string] == "!rem"){
        
        hideChat(HideChat)
        
        if(LSC:explode(" ")[2,string]:toNumber() != 0){
            
            Print = Print:add(array("Command recieved! Queuing " + LSC:explode(" ")[2,string]:toNumber() + " car removals."))
            LS = LS:add(array(owner():lastSaid():trim():lower()))
            
        }elseif(LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber() != 0 & LSC:explode(" ")[2,string]:sub(LSC:explode(" ")[2,string]:length()-1,LSC:explode(" ")[2,string]:length()) == "ft"){
        
            Print = Print:add(array("Command recieved! Queuing " + LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-2):toNumber() + " feet of removals."))
            LS = LS:add(array(owner():lastSaid():trim():lower()))
            
        }elseif(LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber() != 0 & LSC:explode(" ")[2,string]:sub(LSC:explode(" ")[2,string]:length(),LSC:explode(" ")[2,string]:length()) == "t"){
        
            Print = Print:add(array("Command recieved! Queuing " + LSC:explode(" ")[2,string]:sub(0,LSC:explode(" ")[2,string]:length()-1):toNumber() + " tons of removals."))
            LS = LS:add(array(owner():lastSaid():trim():lower()))
        
        }else{
        
            Print = Print:add(array("Incorrect syntax! Do .rem [number of cars]"))
            
        }
    
    }elseif(LSC:explode(" ")[1,string] == ".help" | LSC:explode(" ")[1,string] == "!help"){
        
        Print = Print:add(array("Here's how to use the spawner."))
        Print = Print:add(array("Type .sp, then the number of cars you want, then some tags like \"boxcar\" or \"50s\""))
        Print = Print:add(array("Example: \".sp 2 cem 90s\" spawns 2 cement hoppers from the 90s!."))
        Print = Print:add(array("Do .tags for a full list of tags and how they work."))
        Print = Print:add(array("To remove a car, type .rem number of cars. Example: \".rem 3\" would remove 3 cars."))
        Print = Print:add(array("For a full list of commands, do .commandlist. Highly reccomended!"))
        Print = Print:add(array("If it spawns errors, do .addons for a list of requirements!"))
        hideChat(HideChat)
        
          
    }elseif(LSC:explode(" ")[1,string] == ".addons" | LSC:explode(" ")[1,string] == "!addons"){
        
        Print = Print:add(array("Here's a link to the FC&N Server Collection"))
        Print = Print:add(array("It should contain the textures and models required."))
        Print = Print:add(array("http://steamcommunity.com/sharedfiles/filedetails/?id=390798140"))
        Print = Print:add(array("Hit the Subscribe All button, and close Garry's Mod."))
        Print = Print:add(array("Re-launch the game, let the addons download, then rejoin!"))
        hideChat(HideChat)
        
    }elseif(LSC:explode(" ")[1,string] == ".tags" | LSC:explode(" ")[1,string] == "!tags"){
        
        Print = Print:add(array("Tags are separated into groups based on exclusivity:"))
        Print = Print:add(array("The 1st group is Car Type, like boxcar or tanker."))
        Print = Print:add(array("The 2nd group is Era, like modern, 30s, or preera (civil war)."))
        Print = Print:add(array("The 3rd group is Modeler, like gsgrove or metaladon."))
        Print = Print:add(array("The 4th group is Suspension/bolsters, just old or new."))
        Print = Print:add(array("The 5th group is Car Role, such as manifest, buffer, and mow."))
        Print = Print:add(array("The 6th group is Stability. Some unstable cars are marked janky."))
        Print = Print:add(array("The 7th group is Detail; ldetail, mdetail, and hdetail."))
        Print = Print:add(array("The 8th group is Country, like usamerican and russian."))
        Print = Print:add(array("The 9th group is Special, tags like nodef and mdltag."))
        Print = Print:add(array("The 10th group is Modelpath, use with mdltag tag."))
        Print = Print:add(array("Do .taglist for a massive list of ALL possible tags."))
        hideChat(HideChat)
        
    }elseif(LSC:explode(" ")[1,string] == ".taglist" | LSC:explode(" ")[1,string] == "!taglist"){
        
        Print = Print:add(array("Here goes!"))
        
        for(X = 1, TagAttributes:count()-1){
            
            Print = Print:add(TagAttributes[X,array])
            
        }
        
        Print = Print:add(array("Told you there's be a lot of them...."))
        hideChat(HideChat)
        LS:remove(1)
        
    }elseif(LSC:explode(" ")[1,string] == ".default" | LSC:explode(" ")[1,string] == "!default"){
        
        Print = Print:add(array("Here's the default tags."))
        
        for(X = 1, TagDefaults:count()){
            
            Print = Print:add(TagDefaults[X,array])
            
        }
        hideChat(HideChat)
          
    }elseif(LSC:explode(" ")[1,string] == ".refresh" | LSC:explode(" ")[1,string] == "!refresh" | LSC:explode(" ")[1,string] == ".reset" | LSC:explode(" ")[1,string] == "!reset" | LSC:explode(" ")[1,string] == ".restart" | LSC:explode(" ")[1,string] == "!restart"){
        
        X = Y = Z = ID = 1
        CTS = WTS = LTS = WTR = LTR = CTR = TotalTrainLength = TotalTrainWeight = Phase = Spacer = 0
        Pool = array(0)
        PoolTrack = ""
        Tags = table()
        Print = Print:add(array("Reset everything. Feel free to move the spawner!"))
        SPWND = table()
        LS = array()
        hideChat(HideChat)
        
    }elseif(LSC:explode(" ")[1,string] == ".delete" | LSC:explode(" ")[1,string] == "!delete"){
        
        print("Deleting the carspawner E2... Good luck on your travels!")
        hideChat(HideChat)
        selfDestruct()
        
    }elseif(LSC:explode(" ")[1,string] == ".nuke" | LSC:explode(" ")[1,string] == "!nuke"){
        
        print("Nuking the consist and carspawner E2 from orbit. Just to be sure!")
        hideChat(HideChat)
        noCollide(E,SPWND[toString(ID-2),entity])
        selfDestructAll()
        
    }elseif(LSC:explode(" ")[1,string] == ".stats" | LSC:explode(" ")[1,string] == "!stats"){
        
        Print = Print:add(array("Here's the stats for the currently spawned cars:"))
        Print = Print:add(array((ID-1)/3 + " cars, " + round(TotalTrainLength/12) + " feet + " + Spacer + " feet of spacer, " + round(TotalTrainWeight/907) + " tons"))
        
        hideChat(HideChat)
        
    }elseif(LSC:explode(" ")[1,string] == ".commandlist" | LSC:explode(" ")[1,string] == "!commandlist"){
        
        Print = Print:add(array("A full list of commands:"))
        Print = Print:add(array(".sp [number of cars/tons/feet] [tag] [tag] etc (Spawns cars. Add a t at the end of the first number for tons, and ft for feet. Add a , to specify multiple sets of tags that would normally conflict)"))
        Print = Print:add(array(".rem [number of cars/tons/feet] (Removes cars. Add a t at the end of the number for tons, and ft for feet.)"))
        Print = Print:add(array(".space [number of feet] (Adds phantom space on the end of the train for use as a gap for mid-train helpers. 0 resets the spacer.)"))
        Print = Print:add(array(".addons (Links to FC&N Workshop collection.)"))
        Print = Print:add(array(".updates (Links to my Google Drive for updates.)"))
        Print = Print:add(array(".refresh/reset/restart (Resets the E2 for re-use.)"))
        Print = Print:add(array(".tags (Prints the types of tags.)"))
        Print = Print:add(array(".default (Prints the default tags.)"))
        Print = Print:add(array(".taglist (Prints literally all of the tags.)"))
        Print = Print:add(array(".stats (Gives the number of cars, length, and weight.)"))
        Print = Print:add(array(".delete (Deletes the E2.)"))
        Print = Print:add(array(".nuke (Deletes the E2 and the train.)"))
        Print = Print:add(array(".kill (Stops the spawning/deleting procedure.)"))
        Print = Print:add(array(".commandlist (You know what it does.)"))
        hideChat(HideChat)
        
    }elseif(LSC:explode(" ")[1,string] == ".updates" | LSC:explode(" ")[1,string] == "!updates"){
        
        Print = Print:add(array("Chances are, if there's a new version it's here!"))
        Print = Print:add(array("https://drive.google.com/open?id=0B_tTJn-GZ5I9STR2WXdOUEdsdkE"))
        hideChat(HideChat)
        
    }elseif(LSC:explode(" ")[1,string] == ".space" | LSC:explode(" ")[1,string] == "!space"){
        
        if(LSC:explode(" ")[2,string]:toNumber() != 0){
            
            Print = Print:add(array("Added " + LSC:explode(" ")[2,string]:toNumber() + " feet of mid-helper spacer to the end of the train."))
            Spacer = clamp(Spacer + LSC:explode(" ")[2,string]:toNumber(),0,9^9^9)
            
        }else{
            
            Print = Print:add(array("Reset the spacer from " + Spacer + " feet to 0."))
            Spacer = 0
            
        } 
        
        hideChat(HideChat)
        
    }elseif(LSC:explode(" ")[1,string] == ".kill" | LSC:explode(" ")[1,string] == "!kill"){
        
        Print = Print:add(array("Killed the process!"))
        X = Y = Z = 1
        CTS = WTS = LTS = WTR = LTR = CTR = Phase = 0
        Pool = array(0)
        PoolTrack = ""
        Tags = table()
        LS:remove(1)
        hideChat(HideChat)
        
    }elseif(LSC:explode(" ")[1,string] == ".reloadholos" | LSC:explode(" ")[1,string] == "!reloadholos"){
        
        Print = Print:add(array("Reloading " + (HOLID-2) + " Holograms!"))
        RLDSRG = array()
        
        for(X = 2, HOLID-1){
             
            RLDSRG = RLDSRG:add(array(holoEntity(X):pos(),holoScale(X),holoEntity(X):angles(),holoEntity(X):getColor(),holoEntity(X):model()))
            holoDelete(X)
            
        }
        
        for(X = 2, HOLID-1){
            
            holoCreate(X,RLDSRG[((X-1)*5)-4,vector],RLDSRG[((X-1)*5)-3,vector],RLDSRG[((X-1)*5)-2,angle],RLDSRG[((X-1)*5)-1,vector],RLDSRG[((X-1)*5),string])
            print(RLDSRG[((X-1)*5)-4,vector],RLDSRG[((X-1)*5)-3,vector],RLDSRG[((X-1)*5)-2,angle],RLDSRG[((X-1)*5)-1,vector],RLDSRG[((X-1)*5),string])
            
        }
        
        hideChat(HideChat)
        
    }
    
}
    
if((LS[1,string]:explode(" ")[1,string] == "!sp" | LS[1,string]:explode(" ")[1,string] == ".sp" | XO) & minquota() > Quota){
    
    if(!XO){
        
        if(LS[1,string]:explode(" ")[2,string]:toNumber() != 0){
            
            CTS = LS[1,string]:explode(" ")[2,string]:toNumber()
            
        }elseif(LS[1,string]:explode(" ")[2,string]:sub(LS[1,string]:explode(" ")[2,string]:length()-1,LS[1,string]:explode(" ")[2,string]:length()) == "ft"){
        
            LTS = LS[1,string]:explode(" ")[2,string]:sub(0,LS[1,string]:explode(" ")[2,string]:length()-2):toNumber()
            
        }elseif(LS[1,string]:explode(" ")[2,string]:sub(LS[1,string]:explode(" ")[2,string]:length(),LS[1,string]:explode(" ")[2,string]:length()) == "t"){
        
            WTS = LS[1,string]:explode(" ")[2,string]:sub(0,LS[1,string]:explode(" ")[2,string]:length()-1):toNumber()
        
        }
        
        DEBU = clamp(DEBU,0,DD)
        E:propFreeze(1)
        Pool = array(0)
        PoolTrack = ""
        Tags = table()
        XO = X = Y = Z = 1
        LST = ""
        Phase = 0
        
        for(X = 1, LS[1,string]:explode(" "):count()-2){
            
           LST = LST +  " " + LS[1,string]:explode(" ")[X+2,string]
        
        }
        
        LS[1,string] = LST:trim()
        
    }
        
    
    while(XO <= LS[1,string]:explode(","):count() & minquota() > Quota){
        
        if(!Phase){
            
            Phase = X = Y = Z = 1
            NoDef = 0
            MdlTag = 1
            Loadveride = 0
            
            if(LS[1,string]:explode(",")[XO,string]:find("nodef")){
                
                NoDef = 1
                
            }elseif(LS[1,string]:explode(",")[XO,string]:find("mdltag")){
                
                MdlTag = 0
                NoDef = 1
                
            }
            
            if(LS[1,string]:explode(",")[XO,string]:find("loaded")){
                
                Loadveride = 1
                
            }elseif(LS[1,string]:explode(",")[XO,string]:find("empty")){
                
                Loadveride = -1
                
            }
            
        }
        
        if(Phase == 1){
            
            while(X <= LS[1,string]:explode(",")[XO,string]:explode(" "):count() & minquota() > Quota){
                
                if(LS[1,string]:explode(",")[XO,string]:explode(" ")[X,string] == ""){
                    
                    X++
                    Y = 1
                    TB = TC
                    continue
                    
                }
                
                while(Y <= TagAttributes:count()-MdlTag & minquota() > Quota){
                    
                    while(Z <= TagAttributes[Y,array]:count() & minquota() > Quota){
                        
                        if(TagAttributes[Y,array][Z,string]:find(LS[1,string]:explode(",")[XO,string]:explode(" ")[X,string])){
                            
                            Tags[toString(Y),array] = Tags[toString(Y),array]:add(array(TagAttributes[Y,array][Z,string]))
                            TC++
                            
                        }
                        
                        Z++
                         
                    }
                    
                    if(Z > TagAttributes[Y,array]:count()){
                        
                        Y++
                        Z = 1
                        
                        
                    }
                    
                }
                
                if(Y > TagAttributes:count()-MdlTag){
                    
                    if(TC == TB){
                        
                        Print = Print:add(array("Couldn't find a tag matching \"" + LS[1,string]:explode(",")[XO,string]:explode(" ")[X,string] + "\""))
                        
                    }
                    
                    X++
                    Y = 1
                    TB = TC
                    
                }
                
            }
            
            if(Tags:count() == 0 & X > LS[1,string]:explode(",")[XO,string]:explode(" "):count()){
                
                Print = Print:add(array("No tags selected!"))
                Phase = 0
                LS:remove(1)
                X = Y = Z = 1
                TB = TC = XO = 0
                CTS = WTS = LTS = 0
                break
                
            }elseif(X > LS[1,string]:explode(",")[XO,string]:explode(" "):count()){
            
                Phase = 2
                X = Y = Z = 1
                TB = TC = 0
                
                if(!NoDef){
                    
                    for(Y = 1, TagAttributes:count()-MdlTag){
                        
                        if(!Tags[toString(Y),array]:count()){
                            
                            Tags[toString(Y),array] = TagDefaults[Y,array]
                            
                        }
                        
                    }
                    
                }
                
                if(FUNC & !NoDef){
                
                    Tags[toString(6),array] = Tags[toString(6),array]:add(array("functional"))
                    
                }
                
                Print = Print:add(array("Applied " + metacount(Tags) + " tags: " + list(Tags)))
                
                
            }
            
        }
        
        if(Phase == 2){
            
            while(X <= MDL:count() & minquota() > Quota){
    
                while(Y <= TagAttributes:count()-MdlTag & minquota() > Quota){
    
                    while(Z <= Tags[toString(Y),array]:count() & minquota() > Quota){
                        
                        if(MDL[X,table][1,array][2,string]:find(Tags[toString(Y),array][Z,string])){
                        
                            break
                            
                        }else{
                        
                            Z++
                            
                        }
                        
                    }
                    
                    if(Z > Tags[toString(Y),array]:count() & Tags[toString(Y),array]:count()){
                        
                        break
                        
                    }elseif(MDL[X,table][1,array][2,string]:find(Tags[toString(Y),array][Z,string])){
                        
                        Z = 1
                        Y++
                        
                    }
    
                }
    
                if(Y > TagAttributes:count()-MdlTag){
                    
                    if(!PoolTrack:find(" " + X + " ")){
                                              
                        Pool = Pool:add(array(Pool[1,number],X))
                        Pool[1,number] = Pool[1,number] + (MDL[X,table][1,array][1,number]^(DELT))
                        PoolTrack = PoolTrack + " " + X + " "
                        
                    }
                        
                    X++
                    Y = 1
                    
                }elseif(Z > Tags[toString(Y),array]:count() & Tags[toString(Y),array]:count()){
                
                    X++
                    Y = 1
                    Z = 1
                    
                }
                
            }
        
            if(X > MDL:count()){
                
            
                X = Y = Z = 1
                XO++
                Phase = 0
                
            }
            
        }
        
    }
    
    if(XO > LS[1,string]:explode(","):count()){
        
        LS:remove(1)
        Pool = Pool:add(array(Pool[1,number]))
        
        if(Pool:count() > 2){
            
            Print = Print:add(array("Found " + (Pool:count()-2)/2 + " matching cars."))
            
        }else{
            
            Print = Print:add(array("No cars exist with those tags!","PS: Check the default tags with .default for possible problems (like incorrect era or type), and add \"nodef\" to the list of spawning tags to disable defaults"))
            CTS = WTS = LTS = 0
            
        }
        
        if(DEBU){
            
            CTS = clamp(CTS + round(WTS/60)+round(LTS/50),0,(Pool:count()-2)/2)
            LTS = 0
            WTS = 0
            
            Car = Pool[DEBU*2+1,number]
            DEBU++
            
        }else{
        
            Car = random(0,Pool[1,number])
               
            while(X <= (Pool:count()-2)/2){
                
                if(Pool[(X*2)+2,number] > Car){
                    
                    Car = Pool[X*2+1,number]
                    X = 1
                    break
                    
                }else{
                    
                    X++
                    
                }
                
            }
            
        }
        
        XO = 0
        
    }
    
}

if((CTS | LTS > 0 | WTS > 0) & Pool:count() > 2 & minquota() > Quota){
    
    if(NewPos){
        
        #E:setAlpha(5)
        #E:setMaterial("debug/debugdrawflat")
        BaseAngle = round((E:angles():yaw())/INCR)*INCR
        BasePos = E:pos() - vec(0,0,railhead(E:model()))
        NewPos = 0
        
    }
        
    if(!CarEnt){
        
        CarEnt = 2
        AjstAngle = BaseAngle + (randint(0,1)*180)
        Weathering = Weathering + WX#randint(1,WeatheringPresets:count()/WX)*WX
        Orgin = BasePos + vec(0,TotalTrainLength + Spacer*12 + (MDL[Car,table][1,array][3,number]/2),0):rotateAroundAxis(vec(0,0,1),BaseAngle)
        Loaded = (random(0,1) <= MDL[Car,table][1,array][5,vector2]:y())
        CarCount++
        WeightBefore = TotalTrainWeight
        Orgin = Orgin + vec(0,0,railhead("models/magtrains/trucks/barber_s2_phx.mdl") + MDL[Car,table][1,array][4,number])
        SPWND[toString(CarCount),array] = SPWND[toString(CarCount),array]:add(array(0))
        
    }
    
    while(CarEnt <= MDL[Car,table]:count() & propCanCreate() & minquota() > Quota){
        
        if(MDL[Car,table][CarEnt,table][2,string] == "frame"){
            
            SPWND[toString(CarCount),array] = SPWND[toString(CarCount),array]:add(array(propSpawn(MDL[Car,table][CarEnt,table][3,string],Orgin,ang(0,AjstAngle,0),1)))
            noCollideAll(SPWND[toString(CarCount),array][SPWND[toString(CarCount),array]:count(),entity],1)
            
            SPWND[toString(CarCount),array][SPWND[toString(CarCount),array]:count(),entity]:setMass(progress(Loaded,MDL[Car,table][1,array][5,vector2]:x())*((3/5)*(TQ*907)))
            TotalTrainWeight = TotalTrainWeight + (progress(Loaded,MDL[Car,table][1,array][5,vector2]:x())*((3/5)*(TQ*907)))/TQ
            
        }elseif(MDL[Car,table][CarEnt,table][2,string] == "holo"){
            
            SPWND[toString(CarCount),array] = SPWND[toString(CarCount),array]:add(array(holoCreate(HOLID,Orgin,vec(1),ang(0,0,0),vec(255),MDL[Car,table][CarEnt,table][3,string])))
            holoParent(HOLID,SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity])
            HOLID++
            
        }elseif(MDL[Car,table][CarEnt,table][2,string] == "bogie" | MDL[Car,table][CarEnt,table][2,string] == "bogey"){
            
            SPWND[toString(CarCount),array] = SPWND[toString(CarCount),array]:add(array(propSpawn(MDL[Car,table][CarEnt,table][3,string],Orgin,ang(0,AjstAngle,0),1)))
            SPWND[toString(CarCount),array][SPWND[toString(CarCount),array]:count(),entity]:propPhysicalMaterial("friction_00")
            
            SPWND[toString(CarCount),array][SPWND[toString(CarCount),array]:count(),entity]:setMass(progress(Loaded,MDL[Car,table][1,array][5,vector2]:x())*((1/5)*(TQ*907)))
            TotalTrainWeight = TotalTrainWeight + (progress(Loaded,MDL[Car,table][1,array][5,vector2]:x())*((1/5)*(TQ*907)))/TQ
            
            #[
            if(SPWND[toString(CarCount),array][1,number] == 0 | 
            
            SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toLocal(
            SPWND[toString(CarCount),array][SPWND[toString(CarCount),array]:count(),entity]:pos()):x() >
            
            SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toLocal(
            SPWND[toString(CarCount),array][SPWND[toString(CarCount),array][1,number],entity]:pos()):x()){
                
                
            }
            
            print(SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:id())
            print(SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toLocal(
            SPWND[toString(CarCount),array][SPWND[toString(CarCount),array]:count(),entity]:pos()))
            
            print()
            print()
            
            #SPWND[toString(CarCount),array][1,entity] = 
            
            
            #So here's the plan. Check if your length in a certain direction exceeds the last bogie, if so override, else ignore. Got it?
            #Operation Prime Canidate
            #convert number to entity in the end
            #Not possible! Position hasn't been set!]#
            
        }
        
        for(Atrbt = 1,(MDL[Car,table][CarEnt,table]:count()-3)/2){
            
            if(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "axcom"){
                
                axis(SPWND[toString(CarCount),array][CarEnt,entity],SPWND[toString(CarCount),array][CarEnt,entity]:massCenterL(),SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,number],entity],vec(0),0,MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector])
                
                Print = Print:add(array("axcom," + SPWND[toString(CarCount),array][CarEnt,entity]:model()+","+SPWND[toString(CarCount),array][CarEnt,entity]:model()+","+SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,number],entity]:model()+","+MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]))
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "ang"){
            
                if(MDL[Car,table][CarEnt,table][1,number] > 0){
                    
                    if(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]) != 0){
                    
                        holoAng(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]),SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toWorld(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,angle]))
                    
                    }else{
                    
                        SPWND[toString(CarCount),array][CarEnt,entity]:setAng(SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toWorld(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,angle]))
                        
                    }
                    
                }else{
                    
                    if(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]) != 0){
                
                        holoAng(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,angle]:rotateAroundAxis(vec(0,0,1),AjstAngle))
                        
                    }else{
                        
                        SPWND[toString(CarCount),array][CarEnt,entity]:setAng(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,angle]:rotateAroundAxis(vec(0,0,1),AjstAngle))
                        
                    }
                    
                }
                
                Print = Print:add(array(MDL[Car,table][CarEnt,table][1,number]+","+holoIndex(SPWND[toString(CarCount),array][CarEnt,entity])))
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "pos"){
                
                if(MDL[Car,table][CarEnt,table][1,number] > 0){
                    
                    if(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]) != 0){
                        
                        holoPos(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]),SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toWorld(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector]))
                        
                    }else{
                        
                        SPWND[toString(CarCount),array][CarEnt,entity]:setPos(SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toWorld(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector]))
                        
                    }
                    
                }else{
                
                    if(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]) != 0){
                
                        holoPos(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]),Orgin + MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector]:rotateAroundAxis(vec(0,0,1),AjstAngle))
                        
                    }else{
                        
                        SPWND[toString(CarCount),array][CarEnt,entity]:setPos(Orgin + MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector]:rotateAroundAxis(vec(0,0,1),AjstAngle))
                        
                    }
                    
                }
                
                print(Car + " " + CarEnt + " " + Atrbt + " " + MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector] + " " + MDL[Car,table][CarEnt,table][1,number] + " " + 
                SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:model() + " " + SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:id() + " " +
                holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]))
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "posrand"){
                
                if(MDL[Car,table][CarEnt,table][1,number] > 0){
                    
                    if(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]) != 0){
                        
                        holoPos(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]),SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toWorld(vec(
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:x(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:x()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:y()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:z(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:z()))))
                        
                    }else{
                        
                        SPWND[toString(CarCount),array][CarEnt,entity]:setPos(SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toWorld(vec(
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:x(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:x()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:y()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:z(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:z()))))
                        
                    }
                    
                }else{
                
                    if(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]) != 0){
                
                        holoPos(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]),Orgin + vec(
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:x(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:x()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:y()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:z(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:z())):rotateAroundAxis(vec(0,0,1),AjstAngle))
                        
                    }else{
                        
                        SPWND[toString(CarCount),array][CarEnt,entity]:setPos(Orgin + vec(
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:x(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:x()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:y()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:z(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:z())):rotateAroundAxis(vec(0,0,1),AjstAngle))
                        
                    }
                    
                }
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "poslave"){
                
                if(MDL[Car,table][CarEnt,table][1,number] > 0){
                    
                    if(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]) != 0){
                        
                        holoPos(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]),SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toWorld(
                        SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toLocal(
                        SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,number],entity]:pos() + MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]):rotateAroundAxis(
                        vec(0,0,1),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][4,number])))
                        
                    }#[else{
                        
                        SPWND[toString(CarCount),array][CarEnt,entity]:setPos(SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][1,number],entity]:toWorld(vec(
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:x(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:x()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:y()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:z(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:z()))))
                        
                    }
                    
                }else{
                
                    if(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]) != 0){
                
                        holoPos(holoIndex(SPWND[toString(CarCount),array][CarEnt,entity]),Orgin + vec(random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:x(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:x()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:y()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:z(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:z())):rotateAroundAxis(vec(0,0,1),AjstAngle))
                        
                    }else{
                        
                        SPWND[toString(CarCount),array][CarEnt,entity]:setPos(Orgin + vec(random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:x(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:x()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:y()),
                        random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:z(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:z())):rotateAroundAxis(vec(0,0,1),AjstAngle))
                        
                    }]#
                    
                }
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "bodygroup"){
            
                if(!MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,number]){
            
                    for(X = 2, MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array]:count()){
                        
                        R = clamp(randint(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][X,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][X,vector]:z()),0,
                        SPWND[toString(CarCount),array][CarEnt,entity]:getBodygroups(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][X,vector]:x())-1)
                         
                        SPWND[toString(CarCount),array][CarEnt,entity]:setBodygroup(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][X,vector]:x(),R)
                        
                        if(SPWND[toString(CarCount),array][CarEnt,entity]:getBodygroups(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][X,vector]:x()) == 1){
                            
                            Print = Print:add(array("Hidden/bad bodygroup detected! Report this to Metaladon, if you will: " + Car + " " + CarEnt + " " + MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][X,vector]:x() + " " + R))
                            
                        }
        
                    }
                    
                }else{
                
                    for(X = 1,20){
                        
                        #comment out the below line if not on a server that has getBodygroup()                
                        SPWND[toString(CarCount),array][CarEnt,entity]:setBodygroup(X,SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,number],entity]:getBodygroup(X))
                        X++
                                        
                    }
                    
                    X = 1
                    
                }
                
                

            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "skin"){
            
                if(!MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector]:x()){
                
                    SPWND[toString(CarCount),array][CarEnt,entity]:setSkin(randint(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector]:z()))
                    
                }else{
                    
                    SPWND[toString(CarCount),array][CarEnt,entity]:setSkin(SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector]:x(),entity]:getSkin())
                    
                }
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "color"){
                
                if(!MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,number]){
                    
                    if(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array]:count() > 1){
        
                        R = randint(2,MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array]:count())
            
                        SPWND[toString(CarCount),array][CarEnt,entity]:setColor(randtoRGB(Colors[MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][R,number]*2-1,vector],Colors[MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][R,number]*2,vector]))
                        
                    }
                    
                }else{
                    
                    SPWND[toString(CarCount),array][CarEnt,entity]:setColor(SPWND[toString(CarCount),array][MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,number],entity]:getColor())
                    
                }
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "weather"){
                
                while(X <= MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array]:count()/2){
                     
                    SPWND[toString(CarCount),array][CarEnt,entity]:setSubMaterial(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][X*2,number],WeatheringPresets[Weathering-(WX-MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][X*2-1,number]),string])
                    X++
                    
                }
                
                X = 1
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "submat"){
                
                SPWND[toString(CarCount),array][CarEnt,entity]:setSubMaterial(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,number],MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,string])
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "setcolor"){
                
                SPWND[toString(CarCount),array][CarEnt,entity]:setColor(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,vector])
                
            }elseif(MDL[Car,table][CarEnt,table][(Atrbt*2)+3-1,string] == "colorand"){
                
                V = MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]-MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]
                
                SPWND[toString(CarCount),array][CarEnt,entity]:setColor(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector] + (V*random(0,1)))
                #[
                SPWND[toString(CarCount),array][CarEnt,entity]:setColor(vec(random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:x(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:x()),
                random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:y(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:y()),
                random(MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][1,vector]:z(),MDL[Car,table][CarEnt,table][(Atrbt*2)+3,array][2,vector]:z())))]#
                
            }
                
                
            
        }
        
        print(CarEnt + " carEnt completed")
        
      CarEnt++  
        
    }
    
    if(CarEnt > MDL[Car,table]:count()){
        
        TotalTrainLength += MDL[Car,table][1,array][3,number]
        CarEnt = 0
        
        CTS = clamp(CTS-1,0,CTS)
        LTS = clamp(LTS - (MDL[Car,table][1,array][3,number])/12,0,LTS)
        WTS = clamp(WTS - (TotalTrainWeight-WeightBefore),0,WTS)
        
        
        
        print("end")
        
        if(DEBU){
            
            Car = Pool[DEBU*2+1,number]
            DEBU++
            
        }else{
        
            Car = random(0,Pool[1,number])
               
            while(X <= (Pool:count()-2)/2){
                
                if(Pool[(X*2)+2,number] > Car){
                    
                    Car = Pool[X*2+1,number]
                    X = 1
                    break
                    
                }else{
                    
                    X++
                    
                }
                
            }
            
        }
        
    }
    
}
            
            
        
        
        
    
    
        #[axis(SPWND[toString(Failsafe+2),entity],SPWND[toString(Failsafe+2),entity]:massCenterL(),SPWND[toString(CarCount),array][CarEnt,entityfail],SPWND[toString(CarCount),array][CarEnt,entityfail]:toLocal(SPWND[toString(Failsafe+2),entity]:massCenter()),0,vec(0,0,1))
        
        if(SPWND[toString(Failsafe+2),entity]:massCenter():distance(SPWND[toString(Failsafe-2),entity]:massCenter()) < 400){
    
            RopeID++
            rope(RopeID,SPWND[toString(Failsafe+2),entity],SPWND[toString(Failsafe+2),entity]:massCenterL(),SPWND[toString(Failsafe-2),entity],SPWND[toString(Failsafe-2),entity]:massCenterL(),0,0,"xx",1)
              
        }
        
        #at the end of prop spawning scan the last spawned car for physics-active objects within a certain range and rope to the nearest one? (maybe check for slickness)
        
    
        
        
        
        

        
    }
    
}#[elseif(minquota() > Quota & (LS[1,string]:explode(" ")[1,string] == ".rem" | LS[1,string]:explode(" ")[1,string] == "!rem")){

    if(!CTR & !WTR & !LTR){
        
        if(LS[1,string]:explode(" ")[2,string]:toNumber() > 0 & LS[1,string]:explode(" ")[2,string]:toNumber() != 0){
        
            CTR = LS[1,string]:explode(" ")[2,string]:toNumber()
            
        }elseif(LS[1,string]:explode(" ")[2,string]:sub(0,LS[1,string]:explode(" ")[2,string]:length()-2):toNumber() > 0 & LS[1,string]:explode(" ")[2,string]:sub(LS[1,string]:explode(" ")[2,string]:length()-1,LS[1,string]:explode(" ")[2,string]:length()) == "ft"){
        
            LTR = LS[1,string]:explode(" ")[2,string]:sub(0,LS[1,string]:explode(" ")[2,string]:length()-2):toNumber()
            
        }elseif(LS[1,string]:explode(" ")[2,string]:sub(0,LS[1,string]:explode(" ")[2,string]:length()-1):toNumber() > 0 & LS[1,string]:explode(" ")[2,string]:sub(LS[1,string]:explode(" ")[2,string]:length(),LS[1,string]:explode(" ")[2,string]:length()) == "t"){
        
            WTR = LS[1,string]:explode(" ")[2,string]:sub(0,LS[1,string]:explode(" ")[2,string]:length()-1):toNumber()
        
        }
        
    }
    
    if(!CTR & !WTR & !LTR){
        
        LS:remove(1)
        
    }else{
            
        TotalTrainLength -= carLength(SPWND[toString(ID-3),entity])
        TotalTrainWeight -= (SPWND[toString(ID-1),entity]:mass() + SPWND[toString(ID-2),entity]:mass() + SPWND[toString(ID-3),entity]:mass())/TQ
        
        if(TotalTrainLength > 1){
            
            Spacer = 0
            
        }
        
        CTR = clamp(CTR-1,0,CTR)
        LTR = clamp(LTR - carLength(SPWND[toString(ID-3),entity])/12,0,LTR)
        WTR = clamp(WTR - ((SPWND[toString(ID-3),entity]:mass() + SPWND[toString(ID-2),entity]:mass() + SPWND[toString(ID-1),entity]:mass())/TQ)/907,0,WTR)
        
        SPWND[toString(ID-1),entity]:propDelete()
        SPWND[toString(ID-2),entity]:propDelete()
        SPWND[toString(ID-3),entity]:propDelete()
        SPWND:remove(toString(ID-1))
        SPWND:remove(toString(ID-2))
        SPWND:remove(toString(ID-3))
        
        if((!CTR & !LTR & !WTR) | ID == 1){
            
            LS:remove(1)
            ID = clamp(ID - 3,1,ID) 
            CTR = WTR = LTR = 0
            
        }else{
            
            ID = clamp(ID - 3,1,ID)  
            
        }
        
    } 
    
}]#
