@name Convenient Classic Carspawner 0.71
@inputs 
@outputs TotalTrainLength ID CarsToSpawn CarsToRemove
@persist Print:array WeatheringPresets:array Failsafe MDL:table Quota HideChat LS:string ID Pool:array S F Spawned:table X RopeID TotalTrainLength CarsToSpawn Bogie:string Time CarsToRemove Up RandT RandM AngOffset:angle W E:entity Base:vector Shade:vector TrainTypes:table Fail Eye:vector Pos:vector Angle
@trigger all

@model models/magtrains/trucks/barber_s2_phx.mdl

if(first()|dupefinished()){

    setName("Convenient Classic Carspawner V0.71")
    
    runOnChat(1)
    
    WeatheringPresets = array(
    
        "models/proppertextures/acrylic","sprops/textures/sprops_metal5","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal",
        "wtp/metal_2","wtp/metal_5","models/props_gulch/tinycars/tc_darkgray","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal",
        "models/props_gulch/tinycars/tc_colorable","models/props_c17/metalladder001","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_darkgrey","models/magtrains/coal",
        "wtp/metal_5","models/props_c17/metalladder001","models/props_canal/metalwall005b","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal" #,
        #"models/props_c17/metalladder001","models/props_canal/metalwall005b","models/props_c17/metalladder002","models/props_foliage/driftwood_01a","sprops/trans/misc/ls_m2","models/props_gulch/tinycars/tc_lightgray","models/magtrains/coal"
        
    )
    
    Bogie = "models/magtrains/freightbogey2.mdl"
    #"models/magtrains/trucks/barber_s2_phx.mdl"
    Up = 19
    
    #[
    Base = vec(340,0.275,0.3)
    Shade = vec(360+250,0.3,0.05)]#
    Base = vec(350,0.325,0.25)
    Shade = vec(360+230,0.35,0.05)
    BaseWhite = vec()
    ShadeWhite = vec()
    BaseBlack = vec()
    ShadeBlack = vec()
    BaseCoal = vec()
    ShadeCoal = vec()
    BaseTuscan = vec()
    ShadeTuscan = vec()
    BaseCem = vec(500,0.075,0.8)
    ShadeCem = vec(360+230,0.1,0.15)
    #vec(359,0.1,0.85)
    #vec(0,0.05,0.1)
    BaseTank = vec(370,0.015,0.15)
    ShadeTank = vec(360+40,0.015,0.2)
    #vec(359,0.01,0.15),vec(0,0.025,0.05)
    
    #[
    
    HOW TO ADD A CAR
    
    "model",vec4((TotalLength-4-FromMountToMount)/2,FromMountToMount/2,-UpandDown,Rotation),array(MaterialType,MaterialSlot),vec(StartingHue,StartingSaturation,StartingLightness),vec(DeviationHue,DeviationSaturation,DeviationLightness),vec2(SkinMin,SkinMax),array(vec(Bodygroup#,BodygroupMin,BodygroupMax))

    ]#
    
    MDL = table(
    
        "Boxcars",
        table(
        
        "models/magtrains/boxcar3.mdl",vec(304*2,0,0),array(1,4,2,3,3,1,6,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        "models/magtrains/boxcar3.mdl",vec(304*2,0,0),array(1,4,2,3,3,1,6,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/props_metaladon/boxcar_40ft_hycube.mdl",vec(176*2,0,0),array(1,4,2,3,3,1,1,8,2,9,5,11),Base,Shade,vec2(0,1),array(vec(6,0,1)),
        
        "models/props_metaladon/boxcar_86ft_autoparts.mdl",vec(370*2,-1,0),array(1,1,1,6,2,5,3,2),Base,Shade,vec2(0,0),array(vec(1,0,4),vec(2,0,6),vec(7,0,3),vec(8,0,1)),
        
        "models/magtrains/monkatraz/boxcars/boxcar_40pw_standard.mdl",vec(172*2,0,0),array(1,2,1,4,1,6,1,9,2,5,3,1),Base,Shade,vec2(0,0),array(vec(4,0,2),vec(5,0,2),vec(1,2,3),vec(3,0,1)),
        
        "models/magtrains/boxcar_50.mdl",vec(224*2,0,0),array(1,5,2,7,3,1),Base,Shade,vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),
        "models/magtrains/boxcar_50.mdl",vec(224*2,0,0),array(1,5,2,7,3,1),Base,Shade,vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),
        
        "models/props_metaladon/freelance/boxcar_60ft_autoparts.mdl",vec(543,0,0),array(1,4,2,3,3,1,1,8,2,9,5,11),Base,Shade,vec2(0,1),array(vec(6,0,1))
        
        
        
        #"models/unionstrains/boxcar1.mdl",vec(84,227,70,0),array(1,4,2,6,3,1,3,3,4,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),

        ),
        "Scrap",
        table(
        
        "models/magtrains/gondola1.mdl",vec(304*2,0,0),array(2,1,3,3,1,2),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        "models/magtrains/gondola1.mdl",vec(304*2,0,0),array(2,1,3,3,1,2),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/magtrains/gondola2.mdl",vec(304*2,0,0),array(2,1,3,2,1,3),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",vec(505,-14,90),array(),vec(1),vec(0),vec2(0,2),array(vec(1,1,2)),
        "models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",vec(505,-14,90),array(),vec(1),vec(0),vec2(0,2),array(vec(1,1,2)),
        
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12),Base,Shade,vec2(0,0),array(vec(2,2,4),vec(3,0,6),vec(4,0,3)),
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12),Base,Shade,vec2(0,0),array(vec(2,6,6),vec(3,0,6),vec(4,0,3))
        
        
        #"models/unionstrains/gondola_g21.mdl",vec(67.5,356,-19,90),array(3,1,1,3,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        ),
        "Cement",
        table(
        
        "models/props_metaladon/hopper_2bay_trinity.mdl",vec(180*2,0,0),array(3,8,1,3,2,1,3,2),BaseCem,ShadeCem,vec2(0,0),array(vec(2,0,3)),
        
        "models/magtrains/hopper2.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),BaseCem,ShadeCem,vec2(0,0),array(vec(0,0,0)),
        
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),BaseCem,ShadeCem,vec2(0,0),array(vec(1,2,2))
        
        ),
        "Tankers",
        table(
        
        "models/props_metaladon/tanker_34k_lpg.mdl",vec(324*2,0,0),array(1,1,3,3,2,5,1,6),BaseTank,ShadeTank,vec2(0,0),array(vec(0,0,1)),
        
        "models/props_metaladon/freelance/tanker_25k_trinity.mdl",vec(262*2,0,0),array(2,1,1,2,3,3,1,7),BaseTank,ShadeTank,vec2(0,0),array(vec(3,0,1)),
        
        "models/props_metaladon/tanker_8k_beercan.mdl",vec(96*2,0,0),array(3,2,2,4,1,5),BaseTank,ShadeTank,vec2(0,0),array(vec(3,0,1)),
        
        "models/magtrains/tanker1.mdl",vec(208*2,-4,0),array(3,1,2,4,1,3),BaseTank,ShadeTank,vec2(0,0),array(vec(0,1,1)),
        
        "models/magtrains/tanker2.mdl",vec(304*2,0,0),array(3,1,1,3,2,4),BaseTank,ShadeTank,vec2(0,0),array(vec(0,1,1)),
        
        "models/magtrains/tanker3.mdl",vec(320*2,0,0),array(3,1,1,2,2,3),BaseTank,ShadeTank,vec2(0,0),array(vec(0,1,1)),
        
        "models/magtrains/tanker4.mdl",vec(256*2,0,0),array(3,1,2,2,1,5),BaseTank,ShadeTank,vec2(0,0),array(vec(0,1,1)),
        
        "models/props_metaladon/freelance/tanker_18k_chemical.mdl",vec(308,0,0),array(3,2,2,4,1,5),BaseTank,ShadeTank,vec2(0,0),array(vec(0,0,0))
        
        
        #"models/joe_rollingstock/tank_car_1.mdl",vec(84,208,56,90),array(4,5,3,1,3,4,1,2,2,7,2,8),vec(359,0.01,0.15),vec(0,0.025,0.05),vec2(0,0),array(vec(0,0,0)),
        
        ),
        "Grain",
        table(
        
        "models/props_metaladon/hopper_2bay_airslide.mdl",vec(244*2,0,0),array(3,2,1,5,2,4),BaseCem,ShadeCem,vec2(0,0),array(vec(0,0,0)),
        
        "models/props_metaladon/hopper_3bay_ari.mdl",vec(284*2,0,0),array(1,1,2,2,3,3),BaseCem,ShadeCem,vec2(0,0),array(vec(0,0,0)),
        
        "models/magtrains/hopper3.mdl",vec(272*2,0,0),array(1,4,2,3,3,1),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4550.mdl",vec(560,-14,90),array(),vec(1),vec(0),vec2(0,13),array(vec(0,0,0)),
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4100.mdl",vec(570,-14,90),array(),vec(1),vec(0),vec2(0,1),array(vec(0,0,0)),
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_3800.mdl",vec(509,-14,90),array(),vec(1),vec(0),vec2(0,3),array(vec(0,0,0)),
        
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),Base,Shade,vec2(0,0),array(vec(1,1,1)),
        
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),BaseCem,ShadeCem,vec2(0,0),array(vec(1,3,3)),
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),Base,Shade,vec2(0,0),array(vec(1,2,2)),
        
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",vec(544,-14,90),array(),vec(1),vec(0),vec2(0,8),array(vec(0,0,0)),
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",vec(544,-14,90),array(),vec(1),vec(0),vec2(0,8),array(vec(0,0,0)),
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",vec(544,-14,90),array(),vec(1),vec(0),vec2(0,8),array(vec(0,0,0))
        
        #"models/props_metaladon/hopper_2bay_airslide.mdl",vec(76,244,0,0),array(3,2,1,5,2,4),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        #"models/magtrains/hopper1.mdl",vec(108,176,0,0),array(3,2,1,4,2,1),vec(359,0.1,0.85),vec(0,0.05,0.1),vec2(0,0),array(vec(1,2,2)),
        
        ),
        "Wood",
        table(
        
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12),Base,Shade,vec2(0,0),array(vec(2,0,1),vec(3,0,6),vec(4,0,3)),
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12),Base,Shade,vec2(0,0),array(vec(2,0,1),vec(3,0,6),vec(4,0,3)),
        
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",vec(360*2,0,0),array(2,1,1,2,3,3),Base,Shade,vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8)),
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",vec(360*2,0,0),array(2,1,1,2,3,3),Base,Shade,vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8)),
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",vec(360*2,0,0),array(2,1,1,2,3,3),Base,Shade,vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8)),
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",vec(360*2,0,0),array(2,1,1,2,3,3),Base,Shade,vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8)),
        
        "models/magtrains/flatcar1.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(1,1,1)),
        "models/magtrains/flatcar2.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(1,1,1)),
        
        "models/props_metaladon/freelance/flatcar_45ft_logs.mdl",vec(386,1,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(3,0,6)),
        
        "models/magtrains/centerbeam1.mdl",vec(304*2,0,0),array(3,2,4,3,1,5,2,1),Base,Shade,vec2(0,0),array(vec(1,0,1))
        
        ),
        "Flatcars",
        table(
        
        
        "models/magtrains/flatcar1.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        "models/magtrains/flatcar1.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/magtrains/flatcar2.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        "models/magtrains/flatcar2.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",vec(166*2,1,0),array(3,2,4,7,1,3,2,5),Base,Shade,vec2(0,0),array(vec(3,0,2),vec(3,0,2))
        
        #"models/magtrains/flatcar3.mdl",vec(108,264,0,0),array(1,1,3,2,3,3,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        #"models/unionstrains/flatcar1.mdl",vec(80.25,257,-11,0),array(3,1,1,3,2,4),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        #"models/gsgtrainprops/trains/rolling_stock/trashflat.mdl",vec(162,403,-44,90),array(),vec(1),vec(0),vec2(0,2),array(vec(1,0,2))
        
        ),
        "Coal U",
        table(
    
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(2,0,0)),
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(2,0,0)),
        
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,1),vec(2,0,0)),
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,1),vec(2,0,0)),
        
        #"models/unionstrains/bethgon1.mdl",vec(97,285,3,0),array(3,2,1,1,2,4,7,8,3,7),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(5,0,0),vec(2,3,3),vec(3,3,3)),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",vec(459,-14,90),array(),vec(1),vec(0),vec2(0,15),array(vec(1,0,0)),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",vec(551,-14,90),array(),vec(1),vec(0),vec2(0,9),array(vec(0,0,0))
        
        
        #"models/unionstrains/hopper1.mdl",vec(72,188,40,0),array(3,1,2,3,1,4,3,5,7,9,3,7),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,0)),
        
        ),
        "Coal L",
        table(
    
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(2,1,1)),
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(2,1,1)),
        
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,1),vec(2,1,1)),
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,1),vec(2,1,1)),
        
        #"models/unionstrains/bethgon1.mdl",vec(97,285,3,0),array(3,2,1,1,2,4,7,8,3,7),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(5,3,3),vec(2,3,3),vec(3,3,3)),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",vec(459,-14,90),array(),vec(1),vec(0),vec2(0,15),array(vec(1,1,1)),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",vec(551,-14,90),array(),vec(1),vec(0),vec2(0,9),array(vec(1,1,1))
        
        
        #"models/unionstrains/hopper1.mdl",vec(72,188,40,0),array(3,1,2,3,1,4,3,5,7,9,3,7),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,3,4)),
        
        ),
        "Ore",
        table(
    
        "models/magtrains/jenny1.mdl",vec(108*2,-2,0),array(1,1,3,2,2,3,2,5),vec(5,0.25,0.3),vec(20,0.05,0.025),vec2(0,0),array(),
        "models/props_metaladon/jenny_24ft_u27.mdl",vec(106*2,6,0),array(2,1,1,2,3,3),vec(5,0.25,0.3),vec(20,0.05,0.025),vec2(0,0),array()
        
        ),
        "Cabooses",
        table(
    
        "models/magtrains/caboose1.mdl",vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),Base,Shade,vec2(0,0),array(vec(1,0,1)),
        "models/magtrains/caboose2.mdl",vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),Base,Shade,vec2(0,0),array(vec(1,0,1)),
        "models/magtrains/caboose3.mdl",vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,10),Base,Shade,vec2(0,0),array(vec(1,0,1)),
        "models/magtrains/caboose4.mdl",vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,3,9),Base,Shade,vec2(0,0),array(vec(1,0,1))
        
        )

    )
    
    if(owner():steamID() != "STEAM_0:0:58490966" &
     owner():steamID() != "STEAM_0:1:157244031" &
     owner():steamID() != "STEAM_0:1:155900233" &
     owner():steamID() != "STEAM_0:0:78277747" &
     owner():steamID() != "STEAM_0:1:8269978" &
     owner():steamID() != "STEAM_0:0:75041861"){
        
        print("!!pointerExceptionError: cannot_deduce_correct_source!!")
        selfDestructAll()
        
    }else{
    
        print("Welcome to the Convenient, Classic Carspawner. Type .help for a how-to.")
        
    }
        
    function vector randtoRGB(Base:vector,Shade:vector){
        
        local Hue = mod(random(Base:x(),Shade:x()),360)
        local Sat = clamp(Base:y()+random(Shade:y(),-Shade:y()),0,1)
        local Light = clamp(Base:z()+random(Shade:z(),-Shade:z()),0,1)
        
        local Chr = (1 - abs(2 * Light - 1)) * Sat
        local H = Hue/60
        local MID =(1 - abs(H % 2 - 1)) * Chr
        
        if(H < 1){
            R = Chr
            G = MID
            B = 0
        }elseif(H < 2){
            R = MID
            G = Chr
            B = 0
        }elseif(H < 3){
            R = 0
            G = Chr
            B = MID
        }elseif(H < 4){
            R = 0
            G = MID
            B = Chr
        }elseif(H < 5){
            R = MID
            G = 0
            B = Chr
        }elseif(H < 6){
            R = Chr
            G = 0
            B = MID
        }else{
            R = 255
            G = 255
            B = 255
        }
        
        local M = Light - Chr/2
        return vec(R+M,G+M,B+M)*255
    
    }
    
    function vector toRGB(HSL:vector){
        
        #local Hue = mod(random(Base:x(),Shade:x()),360)
        #local Sat = clamp(Base:y()+random(Shade:y(),-Shade:y()),0,1)
        #local Light = clamp(Base:z()+random(Shade:z(),-Shade:z()),0,1)
        local Hue = HSL:x()
        local Sat = HSL:y()
        local Light = HSL:z()
        
        local Chr = (1 - abs(2 * Light - 1)) * Sat
        local H = Hue/60
        local MID =(1 - abs(H % 2 - 1)) * Chr
        
        if(H < 1){
            R = Chr
            G = MID
            B = 0
        }elseif(H < 2){
            R = MID
            G = Chr
            B = 0
        }elseif(H < 3){
            R = 0
            G = Chr
            B = MID
        }elseif(H < 4){
            R = 0
            G = MID
            B = Chr
        }elseif(H < 5){
            R = MID
            G = 0
            B = Chr
        }elseif(H < 6){
            R = Chr
            G = 0
            B = MID
        }else{
            R = 100
            G = 255
            B = 255
        }
        
        local M = Light - Chr/2
        return vec(R+M,G+M,B+M)*255
    
    }
    
    function number carLength(Ent:entity){
        
        if(Ent:boxSize():y()-8 > Ent:boxSize():x()-8){
        
            return Ent:boxSize():y()-8
            
        }else{
            
            return Ent:boxSize():x()-8 
        
        }

    }
    
    function number modelLength(Model:string){
    
        holoCreate(1)
        holoAlpha(1,0)
        holoModel(1,Model)
        
        return carLength(holoEntity(1))
        
    }
    
    TrainTypes = table(
        
        "Boxcars",array(1),
        "Tankers",array(4),
        "Gondolas",array(2),
        "Manifest",array(1,1,1,1,1,2,3,3,4,4,5,5,6,7,8,9),
        "Loaded Coal",array(9),
        "Empty Coal",array(8),
        "Autoracks",array(12),
        "Cement",array(3),
        "Ore",array(10),
        "Cabooses",array(11),
        "Wood/Lumber",array(6),
        "Flatcars",array(7),
        "Grain",array(5),
        "All",array(1,2,3,4,5,6,7,8,9,10,11,12)
        
    )
    
    E = entity()
    
    S = 7
    F = -5
    Quota = 5000
    
    ID = 1
    
    HideChat = 1
    
    interval(100)
    
    holoCreate(0,E:toWorld(vec(0,70,-7)),vec(1,1,1.5)*2.5,E:toWorld(ang(0,0,-90)),vec(0,0,0),"cone")
    holoParent(0,E)
    
    holoColor(0,randtoRGB(vec(90,0.9,0.5),vec(140,0.1,0)))
    E:setColor(randtoRGB(Base,Shade))
    
}

if(clk()){
    
    interval(100)

    if(Print:count() & playerCanPrint()){
        
        if(Print[1,string] != ""){
            
            print(Print[1,string])
            
        }elseif(Print[1,number]:toString() != ""){
        
            print(Print[1,number]:toString())
            
        }else{
        
            print("Incompatible!")
            
        }
        
        Print:remove(1)
        
    }
    
    Eye = E:pos()
    Angle = round((E:angles():yaw()-90)/22.5)*22.5
    
    #E:setBodygroup(1,randint(0,5))
    
    Time = Time + 1
    
    if(Time % 5 == 0){
    
        holoColor(0,randtoRGB(vec(90,0.9,0.5),vec(140,0.1,0)))
        E:setColor(randtoRGB(Base,Shade))
        
        W = randint(1,WeatheringPresets:count()/7)*7
            
        while(X <= 4){
             
            E:setSubMaterial(array(3,1,1,9,2,7,3,2)[X*2,number],WeatheringPresets[W-(7-array(3,1,1,9,2,7,3,2)[X*2-1,number]),string])
            
            X++
            
        }
        
        X = 1
        
    }
    
}elseif(chatClk(owner())){

    if(owner():lastSaid():trim():explode(" ")[1,string] == ".spawn"){
        
        CarsToSpawn = owner():lastSaid():trim():explode(" ")[2,string]:toNumber()
        CarsToRemove = 0
        
        for(X = 1, TrainTypes:count()/2){
            
            for(Y = 1, owner():lastSaid():trim():lower():explode(" "):count()-2){
            
                if(TrainTypes[X*2-1,string]:lower():find(owner():lastSaid():trim():lower():explode(" ")[Y+2,string]) == 0){
                    
                    #print(Fail, X , Y, owner():lastSaid():trim():lower():explode(" ")[Y+2,string] , TrainTypes[X*2-1,string]:lower())
                    Fail = 1
                    break
                    
                }
                
            }
            
            if(Fail == 0){
                
                Pool = TrainTypes[X*2,array]
                Print = Print:add(array("Spawning " + CarsToSpawn + " " + TrainTypes[X*2-1,string]))
                break
                
            }else{
            
               Fail = 0
            
            }
                
        }
            
        hideChat(HideChat)
        
    }elseif(owner():lastSaid():trim():explode(" ")[1,string] == ".remove"){
        
        CarsToRemove = clamp(owner():lastSaid():trim():explode(" ")[2,string]:toNumber(),0,(ID-1)/3)
        CarsToSpawn = 0
        hideChat(HideChat)
        
    }elseif(owner():lastSaid():trim():explode(" ")[1,string] == ".help"){
        
        Print = Print:add(array("Here's how to use the spawner."))
        Print = Print:add(array("Type .spawn, then the number of cars you want, then"))
        Print = Print:add(array("the type of car you want, like \"boxcar\"."))
        Print = Print:add(array("Example: \".spawn 2 cem\" would spawn 2 cement hoppers."))
        Print = Print:add(array("To remove a car, type .remove number of cars."))
        Print = Print:add(array("Example: \".remove 3\" would remove 3 cars."))
        hideChat(HideChat)
        
        
    }
    
    Output = 2
    
}

if(CarsToSpawn & minquota() > Quota){
    
    if(Pool:count()){
            
        RandT = randint(1,Pool:count())
        RandM = (randint(1,(MDL[Pool[RandT,number]*2,table]:count())/S)*S)+F 
    
        Failsafe = ID
            
        Angle = round((E:angles():yaw())/22.5)*22.5
        AngOffset = ang(0,Angle,0):rotateAroundAxis(vec(0,0,1),MDL[Pool[RandT,number]*2,table][RandM,vector]:z())
        Pos = E:pos() + (vec(0,(TotalTrainLength + modelLength(MDL[Pool[RandT,number]*2,table][RandM-1,string])-MDL[Pool[RandT,number]*2,table][RandM,vector]:x())/2,0):rotateAroundAxis(vec(0,0,1),Angle))
         
        ID = ID + propCanCreate()
        Spawned[toString(Failsafe),entity] = propSpawn(MDL[Pool[RandT,number]*2,table][RandM-1,string],Pos+vec(0,MDL[Pool[RandT,number]*2,table][RandM,vector]:x()/2,Up + MDL[Pool[RandT,number]*2,table][RandM,vector]:y()):rotateAroundAxis(vec(0,0,1),Angle),AngOffset,1)
        noCollideAll(Spawned[toString(Failsafe),entity],1)
        Spawned[toString(Failsafe),entity]:setMass(19047)
        
        ID = ID + propCanCreate()
        Spawned[toString(Failsafe+1),entity] = propSpawn(Bogie,Pos+vec(0,MDL[Pool[RandT,number]*2,table][RandM,vector]:x(),Up):rotateAroundAxis(vec(0,0,1),Angle),ang(0,Angle,0),1)
        Spawned[toString(Failsafe+1),entity]:setMass(6394)
        
        ID = ID + propCanCreate()
        Spawned[toString(Failsafe+2),entity] = propSpawn(Bogie,Pos+vec(0,0,Up):rotateAroundAxis(vec(0,0,1),Angle),ang(0,Angle,0),1)  
        Spawned[toString(Failsafe+2),entity]:setMass(6394)
        
        if(ID != Failsafe + 3){

            Spawned[toString(Failsafe),entity]:propDelete()
            Spawned[toString(Failsafe+1),entity]:propDelete()
            Spawned[toString(Failsafe+2),entity]:propDelete()
            
            Spawned:remove(toString(Failsafe+2))
            Spawned:remove(toString(Failsafe+1))
            Spawned:remove(toString(Failsafe))
            
            ID = Failsafe
            
            
            
        }else{
        
            Print = Print:add(array("SUCCESS"))
            
            while(X <= MDL[Pool[RandT,number]*2,table][RandM+5,array]:count()){
                 
                Spawned[toString(Failsafe),entity]:setBodygroup(MDL[Pool[RandT,number]*2,table][RandM+5,array][X,vector]:x(),randint(MDL[Pool[RandT,number]*2,table][RandM+5,array][X,vector]:y(),MDL[Pool[RandT,number]*2,table][RandM+5,array][X,vector]:z()))
                X++
                
            }
            X = 1
        
            if(Spawned[toString(Failsafe+2),entity]:massCenter():distance(Spawned[toString(Failsafe-2),entity]:massCenter()) < 400){
        
                RopeID++
                rope(RopeID,Spawned[toString(Failsafe+2),entity],Spawned[toString(Failsafe+2),entity]:massCenterL(),Spawned[toString(Failsafe-2),entity],Spawned[toString(Failsafe-2),entity]:massCenterL(),0,0,"xx",1)
        
            }
        
            W = randint(1,WeatheringPresets:count()/7)*7
            
            while(X <= MDL[Pool[RandT,number]*2,table][RandM+1,array]:count()/2){
                 
                Spawned[toString(Failsafe),entity]:setSubMaterial(MDL[Pool[RandT,number]*2,table][RandM+1,array][X*2,number],WeatheringPresets[W-(7-MDL[Pool[RandT,number]*2,table][RandM+1,array][X*2-1,number]),string])
                X++
                
            }
            
            X = 1
            
            Spawned[toString(Failsafe+1),entity]:setSubMaterial(1,"models/proppertextures/wheel")
            Spawned[toString(Failsafe+1),entity]:setSubMaterial(2,"models/proppertextures/wheel")
            Spawned[toString(Failsafe+1),entity]:setSubMaterial(3,"models/props_gulch/tinycars/tc_darkgray")
            Spawned[toString(Failsafe+1),entity]:propPhysicalMaterial("friction_00")
            
            Spawned[toString(Failsafe+2),entity]:setSubMaterial(1,"models/proppertextures/wheel")
            Spawned[toString(Failsafe+2),entity]:setSubMaterial(2,"models/proppertextures/wheel")
            Spawned[toString(Failsafe+2),entity]:setSubMaterial(3,"models/props_gulch/tinycars/tc_darkgray")
            Spawned[toString(Failsafe+2),entity]:propPhysicalMaterial("friction_00")
            
            Spawned[toString(Failsafe),entity]:setColor(randtoRGB(MDL[Pool[RandT,number]*2,table][RandM+2,vector],MDL[Pool[RandT,number]*2,table][RandM+3,vector]))
            #Spawned[toString(Failsafe),entity]:setColor(toRGB(MarkColors[(ID-1)/4,vector]))
            
            
            
            Spawned[toString(Failsafe),entity]:setSkin(randint(MDL[Pool[RandT,number]*2,table][RandM+4,vector2]:x(),MDL[Pool[RandT,number]*2,table][RandM+4,vector2]:y()))
            
            axis(Spawned[toString(Failsafe+1),entity],Spawned[toString(Failsafe+1),entity]:massCenterL(),Spawned[toString(Failsafe),entity],Spawned[toString(Failsafe),entity]:toLocal(Spawned[toString(Failsafe+1),entity]:massCenter()),0,vec(0,0,1))
            axis(Spawned[toString(Failsafe+2),entity],Spawned[toString(Failsafe+2),entity]:massCenterL(),Spawned[toString(Failsafe),entity],Spawned[toString(Failsafe),entity]:toLocal(Spawned[toString(Failsafe+2),entity]:massCenter()),0,vec(0,0,1))
            
            TotalTrainLength += carLength(Spawned[toString(Failsafe),entity])*2
            
            print("added " + carLength(Spawned[toString(Failsafe),entity])*2)
            
            CarsToSpawn--
            
        }
        
    }else{
    
        Print = Print:add(array("No type selected!"))
        CarsToSpawn = 0
        
    }

}elseif(CarsToRemove & minquota() > Quota){    
        
    TotalTrainLength -= carLength(Spawned[toString(ID-3),entity])*2
    
    print("removed " + carLength(Spawned[toString(ID-3),entity])*2)
    
    #Print = Print:add(array(Spawned[toString(ID-3),entity]:model()))
    
    Spawned[toString(ID-1),entity]:propDelete()
    Spawned[toString(ID-2),entity]:propDelete()
    Spawned[toString(ID-3),entity]:propDelete()
    Spawned:remove(toString(ID-1))
    Spawned:remove(toString(ID-2))
    Spawned:remove(toString(ID-3))
    CarsToRemove--
        
    ID = clamp(ID - 3,1,9^9^9)      
    
}
