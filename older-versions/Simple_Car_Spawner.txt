@name Operations: Ressurection
@outputs ToTrack:array Match LocMarkers:array
@outputs X Y Z XX XY XZ Case Case2 Case3 TempVariable ID Failsafe RandL RandM RandT YP R1 R2 LS:string Temp Shotgun_L Shotgun_R
@outputs [C Pistol_R L Pool]:array [Spawned From]:table

@persist E:entity AngOffset:angle [Mssg String LS]:string
@persist [HC Eye Pos]:vector
@persist [MDL Spawned Loc Areas From Sortype]:table
@persist [Print Cars MarkColors WeatheringPresets C Pistol_R L Pool LocMarkers L1 L2 ToTrack LC]:array
@persist ID Failsafe F RID Time HL Up X Y Z XX XY Quota Temp Case2 Alpha S RandL RandM RandT YP TempVariable Case Case3 R1 R2 RandL1 RandL2 XZ Shotgun_L Shotgun_R HideChat MarkerType Match CouplerOffset

@trigger all

if(first()|dupefinished()){
    
    setName("Simple Car Spawner V1.3")
    
    runOnKeys(owner(),1)
    runOnChat(1)

    MarkColors = array(
        vec(0,0.75,0.5),
        vec(120,0.75,0.5),
        vec(240,0.75,0.5),
        vec(35,0.75,0.5),
        vec(300,0.75,0.5),
        vec(50,0.75,0.5),
        vec(200,0.75,0.5),
        vec(270,0.75,0.5),
        
        vec(350,0.75,0.2),
        vec(150,0.75,0.2),
        vec(55,0.4,0.4),
        #vec(240,0.75,0.15),
        vec(75,0.75,0.5),
        
        vec(1,0.01,0.15),
        vec(1,0.01,0.4),
        vec(1,0.01,0.75)
    )   
    
    
    Up = 54
    CouplerOffset = 5
    
    WeatheringPresets = array(
    
        "models/proppertextures/acrylic","sprops/textures/sprops_metal5","models/proppertextures/enamel_black","phoenix_storms/wood_dome","models/proppertextures/acrylic_black","models/proppertextures/aluminum","models/magtrains/coal",
        "wtp/metal_2","wtp/metal_5","models/props_gulch/tinycars/tc_darkgray","models/props_gulch/woodshelf008a","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_grey","models/magtrains/coal",
        "models/props_gulch/tinycars/tc_colorable","models/props_c17/metalladder001","models/props_gulch/tinycars/tc_darkgray","models/props_forest/sawmill_wood","models/props_gulch/tinycars/tc_darkgray","icegt/loco/ice_trainmetal_darkgrey","models/magtrains/coal",
        "wtp/metal_5","models/props_c17/metalladder001","models/props_canal/metalwall005b","models/props_forest/sawmill_wood","sprops/trans/misc/ls_m1","icegt/loco/ice_trainmetal_grey","models/magtrains/coal"#,
        #"models/props_c17/metalladder001","models/props_canal/metalwall005b","models/props_c17/metalladder002","models/props_foliage/driftwood_01a","sprops/trans/misc/ls_m2","models/props_gulch/tinycars/tc_lightgray","models/magtrains/coal"
        
    )
    #[
    Base = vec(340,0.275,0.3)
    Shade = vec(360+250,0.3,0.05)]#
    Base = vec(350,0.325,0.25)
    Shade = vec(360+230,0.35,0.05)
    BaseWhite = vec()
    ShadeWhite = vec()
    BaseBlack = vec()
    ShadeBlack = vec()
    BaseCoal = vec()
    ShadeCoal = vec()
    BaseTuscan = vec()
    ShadeTuscan = vec()
    BaseCem = vec(500,0.075,0.8)
    ShadeCem = vec(360+230,0.1,0.15)
    #vec(359,0.1,0.85)
    #vec(0,0.05,0.1)
    BaseTank = vec(370,0.015,0.15)
    ShadeTank = vec(360+40,0.015,0.2)
    #vec(359,0.01,0.15),vec(0,0.025,0.05)
    
    #[
    
    HOW TO ADD A CAR
    
    "model",vec(FromMountToMount,-UpandDown,Rotation),array(MaterialType,MaterialSlot),vec(StartingHue,StartingSaturation,StartingLightness),vec(DeviationHue,DeviationSaturation,DeviationLightness),vec2(SkinMin,SkinMax),array(vec(Bodygroup#,BodygroupMin,BodygroupMax))

    ]#
    
    MDL = table(
    
        "Boxcars",
        table(
        
        "models/magtrains/boxcar3.mdl",vec(304*2,0,0),array(1,4,2,3,3,1,6,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        "models/magtrains/boxcar3.mdl",vec(304*2,0,0),array(1,4,2,3,3,1,6,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/props_metaladon/boxcar_40ft_hycube.mdl",vec(176*2,0,0),array(1,4,2,3,3,1,1,8,2,9,5,11),Base,Shade,vec2(0,1),array(vec(6,0,1)),
        
        "models/props_metaladon/boxcar_86ft_autoparts.mdl",vec(370*2,-1,0),array(1,1,1,6,2,5,3,2),Base,Shade,vec2(0,0),array(vec(1,0,4),vec(2,0,6),vec(7,0,3),vec(8,0,1)),
        
        "models/magtrains/monkatraz/boxcars/boxcar_40pw_standard.mdl",vec(172*2,0,0),array(1,2,1,4,1,6,1,9,2,5,3,1),Base,Shade,vec2(0,0),array(vec(4,0,2),vec(5,0,2),vec(1,2,3),vec(3,0,1)),
        
        "models/magtrains/boxcar_50.mdl",vec(224*2,0,0),array(1,5,2,7,3,1),Base,Shade,vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),
        "models/magtrains/boxcar_50.mdl",vec(224*2,0,0),array(1,5,2,7,3,1),Base,Shade,vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),
        
        "models/props_metaladon/freelance/boxcar_60ft_autoparts.mdl",vec(543,0,0),array(1,4,2,3,3,1,1,8,2,9,5,11),Base,Shade,vec2(0,1),array(vec(6,0,1))
        
        
        
        #"models/unionstrains/boxcar1.mdl",vec(84,227,70,0),array(1,4,2,6,3,1,3,3,4,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),

        ),
        "Scrap",
        table(
        
        "models/magtrains/gondola1.mdl",vec(304*2,0,0),array(2,1,3,3,1,2),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        "models/magtrains/gondola1.mdl",vec(304*2,0,0),array(2,1,3,3,1,2),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/magtrains/gondola2.mdl",vec(304*2,0,0),array(2,1,3,2,1,3),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",vec(505,-14,90),array(),vec(1),vec(0),vec2(0,2),array(vec(1,1,2)),
        "models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",vec(505,-14,90),array(),vec(1),vec(0),vec2(0,2),array(vec(1,1,2)),
        
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12),Base,Shade,vec2(0,0),array(vec(2,2,4),vec(3,0,6),vec(4,0,3)),
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12),Base,Shade,vec2(0,0),array(vec(2,6,6),vec(3,0,6),vec(4,0,3))
        
        
        #"models/unionstrains/gondola_g21.mdl",vec(67.5,356,-19,90),array(3,1,1,3,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        ),
        "Cement",
        table(
        
        "models/props_metaladon/hopper_2bay_trinity.mdl",vec(180*2,0,0),array(3,8,1,3,2,1,3,2),BaseCem,ShadeCem,vec2(0,0),array(vec(2,0,3)),
        
        "models/magtrains/hopper2.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),BaseCem,ShadeCem,vec2(0,0),array(vec(0,0,0)),
        
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),BaseCem,ShadeCem,vec2(0,0),array(vec(1,2,2))
        
        ),
        "Tankers",
        table(
        
        "models/props_metaladon/tanker_34k_lpg.mdl",vec(324*2,0,0),array(1,1,3,3,2,5,1,6),BaseTank,ShadeTank,vec2(0,0),array(vec(0,0,1)),
        
        "models/props_metaladon/freelance/tanker_25k_trinity.mdl",vec(262*2,0,0),array(2,1,1,2,3,3,1,7),BaseTank,ShadeTank,vec2(0,0),array(vec(3,0,1)),
        
        "models/props_metaladon/tanker_8k_beercan.mdl",vec(96*2,0,0),array(3,2,2,4,1,5),BaseTank,ShadeTank,vec2(0,0),array(vec(3,0,1)),
        
        "models/magtrains/tanker1.mdl",vec(208*2,-4,0),array(3,1,2,4,1,3),BaseTank,ShadeTank,vec2(0,0),array(vec(0,1,1)),
        
        "models/magtrains/tanker2.mdl",vec(304*2,0,0),array(3,1,1,3,2,4),BaseTank,ShadeTank,vec2(0,0),array(vec(0,1,1)),
        
        "models/magtrains/tanker3.mdl",vec(320*2,0,0),array(3,1,1,2,2,3),BaseTank,ShadeTank,vec2(0,0),array(vec(0,1,1)),
        
        "models/magtrains/tanker4.mdl",vec(256*2,0,0),array(3,1,2,2,1,5),BaseTank,ShadeTank,vec2(0,0),array(vec(0,1,1)),
        
        "models/props_metaladon/freelance/tanker_18k_chemical.mdl",vec(308,0,0),array(3,2,2,4,1,5),BaseTank,ShadeTank,vec2(0,0),array(vec(0,0,0))
        
        
        #"models/joe_rollingstock/tank_car_1.mdl",vec(84,208,56,90),array(4,5,3,1,3,4,1,2,2,7,2,8),vec(359,0.01,0.15),vec(0,0.025,0.05),vec2(0,0),array(vec(0,0,0)),
        
        ),
        "Grain",
        table(
        
        "models/props_metaladon/hopper_2bay_airslide.mdl",vec(244*2,0,0),array(3,2,1,5,2,4),BaseCem,ShadeCem,vec2(0,0),array(vec(0,0,0)),
        
        "models/props_metaladon/hopper_3bay_ari.mdl",vec(284*2,0,0),array(1,1,2,2,3,3),BaseCem,ShadeCem,vec2(0,0),array(vec(0,0,0)),
        
        "models/magtrains/hopper3.mdl",vec(272*2,0,0),array(1,4,2,3,3,1),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4550.mdl",vec(560,-14,90),array(),vec(1),vec(0),vec2(0,13),array(vec(0,0,0)),
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4100.mdl",vec(570,-14,90),array(),vec(1),vec(0),vec2(0,1),array(vec(0,0,0)),
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_3800.mdl",vec(509,-14,90),array(),vec(1),vec(0),vec2(0,3),array(vec(0,0,0)),
        
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),Base,Shade,vec2(0,0),array(vec(1,1,1)),
        
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),BaseCem,ShadeCem,vec2(0,0),array(vec(1,3,3)),
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),Base,Shade,vec2(0,0),array(vec(1,2,2)),
        
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",vec(544,-14,90),array(),vec(1),vec(0),vec2(0,8),array(vec(0,0,0)),
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",vec(544,-14,90),array(),vec(1),vec(0),vec2(0,8),array(vec(0,0,0)),
        "models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",vec(544,-14,90),array(),vec(1),vec(0),vec2(0,8),array(vec(0,0,0))
        
        #"models/props_metaladon/hopper_2bay_airslide.mdl",vec(76,244,0,0),array(3,2,1,5,2,4),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        #"models/magtrains/hopper1.mdl",vec(108,176,0,0),array(3,2,1,4,2,1),vec(359,0.1,0.85),vec(0,0.05,0.1),vec2(0,0),array(vec(1,2,2)),
        
        ),
        "Wood",
        table(
        
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12),Base,Shade,vec2(0,0),array(vec(2,0,1),vec(3,0,6),vec(4,0,3)),
        "models/props_metaladon/gondola_woodchips_gunderson.mdl",vec(322*2,0,0),array(3,2,1,5,2,4,5,9,1,12),Base,Shade,vec2(0,0),array(vec(2,0,1),vec(3,0,6),vec(4,0,3)),
        
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",vec(360*2,0,0),array(2,1,1,2,3,3),Base,Shade,vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8)),
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",vec(360*2,0,0),array(2,1,1,2,3,3),Base,Shade,vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8)),
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",vec(360*2,0,0),array(2,1,1,2,3,3),Base,Shade,vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8)),
        "models/props_metaladon/flatcar_73ft_centerbeam.mdl",vec(360*2,0,0),array(2,1,1,2,3,3),Base,Shade,vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,0,8)),
        
        "models/magtrains/flatcar1.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(1,1,1)),
        "models/magtrains/flatcar2.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(1,1,1)),
        
        "models/props_metaladon/freelance/flatcar_45ft_logs.mdl",vec(386,1,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(3,0,6)),
        
        "models/magtrains/centerbeam1.mdl",vec(304*2,0,0),array(3,2,4,3,1,5,2,1),Base,Shade,vec2(0,0),array(vec(1,0,1))
        
        ),
        "Flatcars",
        table(
        
        
        "models/magtrains/flatcar1.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        "models/magtrains/flatcar1.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/magtrains/flatcar2.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        "models/magtrains/flatcar2.mdl",vec(304*2,0,0),array(3,1,4,2,1,4,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        
        "models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",vec(166*2,1,0),array(3,2,4,7,1,3,2,5),Base,Shade,vec2(0,0),array(vec(3,0,2),vec(3,0,2))
        
        #"models/magtrains/flatcar3.mdl",vec(108,264,0,0),array(1,1,3,2,3,3,2,5),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        #"models/unionstrains/flatcar1.mdl",vec(80.25,257,-11,0),array(3,1,1,3,2,4),Base,Shade,vec2(0,0),array(vec(0,0,0)),
        #"models/gsgtrainprops/trains/rolling_stock/trashflat.mdl",vec(162,403,-44,90),array(),vec(1),vec(0),vec2(0,2),array(vec(1,0,2))
        
        ),
        "Coal U",
        table(
    
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(2,0,0)),
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(2,0,0)),
        
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,1),vec(2,0,0)),
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,1),vec(2,0,0)),
        
        #"models/unionstrains/bethgon1.mdl",vec(97,285,3,0),array(3,2,1,1,2,4,7,8,3,7),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(5,0,0),vec(2,3,3),vec(3,3,3)),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",vec(459,-14,90),array(),vec(1),vec(0),vec2(0,15),array(vec(1,0,0)),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",vec(551,-14,90),array(),vec(1),vec(0),vec2(0,9),array(vec(0,0,0))
        
        
        #"models/unionstrains/hopper1.mdl",vec(72,188,40,0),array(3,1,2,3,1,4,3,5,7,9,3,7),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,0)),
        
        ),
        "Coal L",
        table(
    
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(2,1,1)),
        "models/magtrains/hopper1.mdl",vec(176*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(2,1,1)),
        
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,1),vec(2,1,1)),
        "models/magtrains/hopper4.mdl",vec(256*2,0,0),array(3,2,1,4,2,1),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,0,1),vec(2,1,1)),
        
        #"models/unionstrains/bethgon1.mdl",vec(97,285,3,0),array(3,2,1,1,2,4,7,8,3,7),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(5,3,3),vec(2,3,3),vec(3,3,3)),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",vec(459,-14,90),array(),vec(1),vec(0),vec2(0,15),array(vec(1,1,1)),
        
        "models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",vec(551,-14,90),array(),vec(1),vec(0),vec2(0,9),array(vec(1,1,1))
        
        
        #"models/unionstrains/hopper1.mdl",vec(72,188,40,0),array(3,1,2,3,1,4,3,5,7,9,3,7),vec(360,0.15,0.2),vec(360+10,0.2,0.25),vec2(0,0),array(vec(1,3,4)),
        
        ),
        "Ore",
        table(
    
        "models/magtrains/jenny1.mdl",vec(108*2,0,0),array(1,1,3,2,2,3,2,5),vec(5,0.25,0.3),vec(20,0.05,0.025),vec2(0,0),array(),
        "models/props_metaladon/jenny_24ft_u27.mdl",vec(106*2,0,0),array(2,1,1,2,3,3),vec(5,0.25,0.3),vec(20,0.05,0.025),vec2(0,0),array()
        
        ),
        "Cabooses",
        table(
    
        "models/magtrains/caboose1.mdl",vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),Base,Shade,vec2(0,0),array(vec(1,0,1)),
        "models/magtrains/caboose2.mdl",vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),Base,Shade,vec2(0,0),array(vec(1,0,1)),
        "models/magtrains/caboose3.mdl",vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,10),Base,Shade,vec2(0,0),array(vec(1,0,1)),
        "models/magtrains/caboose4.mdl",vec(176*2,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,3,9),Base,Shade,vec2(0,0),array(vec(1,0,1))
        
        ),
        "Aggregate",
        table(
    
        "models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",vec(376,0,0),array(1,1,3,3,2,6,2,2),Base,Shade,vec2(0,0),array(vec(3,0,9))
        
        )

    )
    
    Loc = table(
    
 #[1 ]# "Sunset_Gulch Wolfram Yard 1",vec(-11521,9013,2108),180,19300,0,array(),0,1,array(),array(),
 #[2 ]# "Sunset_Gulch Wolfram Yard 2",vec(-11776,8250,2108),180,17800,0,array(),0,2,array(),array(),
 #[3 ]# "Sunset_Gulch Wolfram Yard 3",vec(-12031,7480,2108),180,16200,0,array(),0,3,array(),array(),
 #[4 ]# "Sunset_Gulch Wolfram Yard 4",vec(-12287,6717,2108),180,14700,0,array(),0,4,array(),array(),
 #[5 ]# "Sunset_Gulch Wolfram Yard 5",vec(-12543,5944,2108),180,13300,0,array(),0,5,array(),array(),
 #[6 ]# "Sunset_Gulch Wolfram Yard 6",vec(-12798,5570,2108),180,12400,0,array(),0,6,array(),array(),
        
 #[7 ]# "Sunset_Gulch Dragon's Rock",vec(13822,6561,2108),180,3200,0,array(),0,1,array(1,5,6),array(1,5,6),
        
 #[8 ]# "Sunset_Gulch Sandstone Setouts",vec(-10369,-5551,1212),0,6000,0,array(),0,2,array(9,9,9,9),array(),
 #[9 ]# "Sunset_Gulch Sandstone Pickups 1",vec(-9986,-6331+4200,1212),180,4200,0,array(),0,0,array(),array(8,8),
 #[10]# "Sunset_Gulch Sandstone Pickups 2",vec(-9729,-5948+4100,1212),180,4100,0,array(),0,0,array(),array(8,8),
        
 #[11]# "Sunset_Gulch Redwall Tunnel Lumber 1",vec(14337,-5432+5000,60),180,5000,0,array(),0,4,array(1,6,6),array(1,6,6),
 #[12]# "Sunset_Gulch Redwall Tunnel Lumber 2",vec(13823,-4179+6200,60),180,6200,0,array(),0,4,array(1,6,6),array(1,6,6),
 #[13]# "Sunset_Gulch Redwall Refinery 1",vec(6913,-1469+4300,60),180,4300,0,array(),0,5,array(4,4,4),array(4,4,4),
 #[14]# "Sunset_Gulch Redwall Refinery 2",vec(6657,-1213+4000,60),180,4000,0,array(),0,5,array(4,4,4),array(4,4,4),
 #[15]# "Sunset_Gulch Redwall Gulch Manufacturing",vec(-2241,10981,60),180,5800,0,array(),0,6,array(1,2,7),array(1,2,7),
        
 #[16]# "Sunset_Gulch Kahuna Scrapyard",vec(-13568,9853,-2116),180,3700,0,array(),0,1,array(2,2,2),array(2,2,2),
 #[17]# "Sunset_Gulch Kahuna Team Track Truckstop",vec(4606,5119,-2116),90,6100,0,array(),0,3,array(1,7),array(1,7),
 #[18]# "Sunset_Gulch Kahuna Atlantic Shipping 1",vec(3576,-2562,-2116),90,4600,0,array(),0,4,array(1,1,4),array(1,1,4),
 #[19]# "Sunset_Gulch Kahuna Atlantic Shipping 2",vec(3580,-3073,-2116),90,3500,0,array(),0,4,array(1,1,4),array(1,1,4),
 #[20]# "Sunset_Gulch Kahuna Crystal Lake Trucking Warehouse",vec(2724,2306,-2116),90,2800,0,array(),0,5,array(1,1),array(1,1),
 #[21]# "Sunset_Gulch Kahuna Oil 1",vec(3704,10239,-2116),90,4000,0,array(),0,6,array(4,4,4,4,4),array(4,4,4,4,4),
 #[22]# "Sunset_Gulch Kahuna Oil 2",vec(1445,10494,-2116),90,1500,0,array(),0,6,array(4),array(4),
        
 #[23]# "Sunset_Gulch Derrickson Yard 4",vec(4166,898,-3780),90,8300,0,array(),0,4,array(),array(),
 #[24]# "Sunset_Gulch Derrickson Yard 3",vec(4541,1152,-3780),90,8200,0,array(),0,3,array(),array(),
 #[25]# "Sunset_Gulch Derrickson Yard 2",vec(5309,1407,-3780),90,8200,0,array(),0,2,array(),array(),
 #[26]# "Sunset_Gulch Derrickson Yard 1",vec(5952,1663,-3780),90,8300,0,array(),0,1,array(),array(),
        
 #[27]# "Sunset_Gulch Derrickson SCM Coal Storage",vec(-8190,-1151,-3780),-90,8200,0,array(),0,0,array(),array(),
 #[28]# "Sunset_Gulch Derrickson SCM Coal Tipple",vec(1215-9400,-641,-3780),-90,9400,0,array(),0,15,array(8,8,8,8,8,8),array(9,9,9,9,9,9),
        
 #[29]# "Sunset_Gulch Derrickson Godfather Cement Plant Loading",vec(-2435-6100,-6144,-3780),-90,6100,0,array(),0,1,array(3,3,3,3,3),array(3,3,3,3,3),
 #[30]# "Sunset_Gulch Derrickson Godfather Cement Plant Chemicals",vec(-5282,-9447,-3780),-90+45,4000,0,array(),0,3,array(4,4,4),array(4,4,4),
 #[31]# "Sunset_Gulch Derrickson Godfather Cement Plant Team",vec(-255+2000,-6143,-3780),90,2000,0,array(),0,4,array(1,7),array(1,7),
        
 #[32]# "Sunset_Gulch Derrickson West Grain",vec(10177+2500,-14593,-3780),90,2500,0,array(),0,5,array(5,5,5,5),array(5,5,5,5),
 #[33]# "Sunset_Gulch Derrickson West Manufacturing",vec(-3556,-10238,-3780),-90,16100,0,array(),0,6,array(1,1,4),array(1,1,4),
        
 #[34]# "Sunset_Gulch Rockfort Yard 1",vec(-11905,-8766+11600,-8580),180,11600,0,array(),0,1,array(),array(),
 #[35]# "Sunset_Gulch Rockfort Yard 2",vec(-11648,-7993+11600,-8580),180,11600,0,array(),0,2,array(),array(),
 #[36]# "Sunset_Gulch Rockfort Yard 3",vec(-11392,-7230+11600,-8580),180,11600,0,array(),0,3,array(),array(),
 #[37]# "Sunset_Gulch Rockfort Yard 4",vec(-11136,-6849+11900,-8580),180,11900,0,array(),0,4,array(),array(),



        "AOH Ashland Yard 1",vec(-6706+9300,11462,-4380),90,9300,0,array(),0,1,array(),array(),
        "AOH Ashland Yard 2",vec(-6063+8100,11718,-4380),90,8100,0,array(),0,2,array(),array(),
        "AOH Ashland Yard 3",vec(-5300+6500,11975,-4380),90,6500,0,array(),0,3,array(),array(),
        "AOH Ashland Yard 4",vec(-4533+5000,12232,-4380),90,5000,0,array(),0,4,array(),array(),

        "AOH Ashland Oil Tanks 1",vec(-2627,13821,-4380),-90,2000,0,array(),0,5,array(4,4),array(4,4),
        "AOH Ashland Oil Tanks 2",vec(-2874,13567,-4379),-90,2000,0,array(),0,5,array(4,4),array(4,4),
        "AOH Ashland Scrapyard",vec(7608,13821,-4380),90,5000,0,array(),0,6,array(2,2),array(2,2),
        "AOH Ashland Coal Tipple 1",vec(5124,12742,-4380),90,2500,0,array(),0,15,array(8,8),array(9,9),
        "AOH Ashland Coal Tipple 2",vec(5124,12489,-4380),90,2000,0,array(),0,15,array(8,8),array(9,9),
        
        "AOH Winchester Stockyard",vec(-1393,3786,-3228),180,2000,0,array(),0,1,array(1),array(1),
        "AOH Winchester Grain Silo 1",vec(1159,3785,-3228),180,2500,0,array(),0,2,array(5,5),array(5,5),
        "AOH Winchester Grain Silo 2",vec(1414,3785,-3228),180,2000,0,array(),0,2,array(5,5),array(5,5),
        "AOH Winchester Team Track & Fuel Dealer",vec(-631,-3259,-3228),180,2100,0,array(),0,3,array(4,7),array(4,7),
        
        "AOH Olive Hill 1",vec(1978,12488,620),90,8000,0,array(),0,1,array(),array(),
        "AOH Olive Hill 2",vec(1340,12744,620),90,6600,0,array(),0,2,array(),array(),
        "AOH Olive Hill 3",vec(574,13002,620),90,5100,0,array(),0,3,array(),array(),
        "AOH Olive Hill 4",vec(-191,13255,620),90,3600,0,array(),0,4,array(),array(),
        "AOH Olive Hill 5",vec(-571,13511,620),90,2400,0,array(),0,5,array(),array(),
        
        "AOH Olive Hill Coal Tipple 1",vec(1285,13766,620),90,3500,0,array(),0,15,array(8,8),array(9,9),
        "AOH Olive Hill Coal Tipple 2",vec(1286,14023,620),90,3100,0,array(),0,15,array(8,8),array(9,9),
        
        "AOH Piker's Peak Yard 1",vec(-11440,-9758,2532),0,3200,0,array(),0,1,array(),array(),
        "AOH Piker's Peak Yard 2",vec(-11695,-10138,2532),0,2900,0,array(),0,2,array(),array(),
        "AOH Piker's Peak Yard 3",vec(-11949,-10775,2532),0,3200,0,array(),0,3,array(),array(),
        
        "AOH Piker's Peak Lumber 1",vec(-10955,-13364,2532),0,2000,0,array(),0,4,array(6),array(6),
        "AOH Piker's Peak Lumber 2",vec(-11214,-13624,2532),0,2000,0,array(),0,4,array(6),array(6),
        "AOH Piker's Peak Grain Farm",vec(-10700,-1855,2532),180,3000,0,array(),0,5,array(5,5),array(5,5),
        "AOH Piker's Peak Power Coal Storage 1",vec(-12368,-1668,2532),0,4000,0,array(),0,6,array(9,9),array(8,8),
        "AOH Piker's Peak Power Coal Storage 2",vec(-12114,-1795,2532),0,3500,0,array(),0,6,array(9,9),array(8,8),
        "AOH Piker's Peak Power Coal Dump Track",vec(-11601,-1480,2532),0,2000,0,array(),0,7,array(),array(),
        
        "AOH Cincinatti Yard 1",vec(6814,12998,7645),90,14800,0,array(),0,1,array(),array(),
        "AOH Cincinatti Yard 2",vec(6049,12742,7645),90,13300,0,array(),0,2,array(),array(),
        "AOH Cincinatti Yard 3",vec(5277,12489,7645),90,11700,0,array(),0,3,array(),array(),
        "AOH Cincinatti Yard 4",vec(4511,12233,7645),90,10200,0,array(),0,4,array(),array(),
        "AOH Cincinatti Yard 5",vec(3744,11976,7645),90,8700,0,array(),0,5,array(),array(),
        "AOH Cincinatti Yard 6",vec(2972,11721,7645),90,7100,0,array(),0,6,array(),array(),
        
        "AOH Cincinatti Manufacturing",vec(7591,11409,7645),180,4000,0,array(),0,7,array(1,1,7,4),array(1,1,7,4),
        
        "AOH Cincinatti Downtown Manufacturing",vec(-339,2901,7645),180,6200,0,array(),0,8,array(1,1,7,4),array(1,1,7,4),
        
        "AOH Cincinatti Interchange Yard 1",vec(-1620,6224,7645),180,7200,0,array(),0,1,array(),array(),
        "AOH Cincinatti Interchange Yard 2",vec(-1361,5586,7645),180,6900,0,array(),0,2,array(),array(),
        "AOH Cincinatti Interchange Yard 3",vec(-1106,4817,7645),180,6900,0,array(),0,3,array(),array(),
        "AOH Cincinatti Interchange Yard 4",vec(-850,4045,7645),180,6900,0,array(),0,4,array(),array(),
        "AOH Cincinatti Interchange Yard 5",vec(-595,3280,7645),180,6800,0,array(),0,5,array(),array(),
        
        
        
        "Sunset_Gulch Old Rockfort Yard 1",vec(-12671,8157,-8580),180,10400,0,array(),0,1,array(),array(),
        "Sunset_Gulch Old Rockfort Yard 2",vec(-12289,9021,-8580),180,12100,0,array(),0,1,array(),array(),
        "Sunset_Gulch Old Rockfort Yard 3",vec(-11777,8888,-8583),180,11900,0,array(),0,1,array(),array(),
        "Sunset_Gulch Old Rockfort Yard 4",vec(-11266,7783,-8578),180,9700,0,array(),0,1,array(),array(),
        
        "Sunset_Gulch Old Rockfort Delivery Track",vec(-13186,6984,-8580),180,8100,0,array(),0,2,array(1,1,1,7,7),array(1,1,1,7,7),
        "Sunset_Gulch Old Rockfort Team Track & Warehouse 1",vec(-11518,12227,-8580),180,1900,0,array(),0,3,array(1,7),array(1,7),
        "Sunset_Gulch Old Rockfort Team Track & Warehouse 2",vec(-11265,12228,-8580),180,2300,0,array(),0,3,array(1,7),array(1,7),
        "Sunset_Gulch Old Rockfort Fuel Dropoff",vec(-13696,-12739,-8580),0,1800,0,array(),0,4,array(4,4),array(4,4),
        "Sunset_Gulch Old Rockfort Supply Track 1",vec(-9598,-14150,-8580),0,1800,0,array(),0,5,array(1,7,4),array(1,7,4),
        "Sunset_Gulch Old Rockfort Supply Track 2",vec(-9855,-14150,-8580),0,1800,0,array(),0,5,array(1,7,4),array(1,7,4),
        
        "Sunset_Gulch Old Derrickson Coal 1",vec(9862,-2562,-3779),90,7900,0,array(),0,2,array(8,8,8),array(9,9,9),
        "Sunset_Gulch Old Derrickson Coal 2",vec(9861,-2047,-3780),90,9000,0,array(),0,2,array(8,8,8),array(9,9,9),
        "Sunset_Gulch Old Derrickson Coal 3",vec(9861,-1534,-3779),90,9700,0,array(),0,2,array(8,8,8),array(9,9,9),
        "Sunset_Gulch Old Derrickson Coal 4",vec(9862,-1026,-3780),90,10700,0,array(),0,2,array(8,8,8),array(9,9,9),
        
        "Sunset_Gulch Old Derrickson Delivery 1",vec(8645,1216,-3780),90,5400,0,array(),0,3,array(1,1,2,7),array(1,1,2,7),
        "Sunset_Gulch Old Derrickson Delivery 2",vec(8646,1470,-3780),90,5700,0,array(),0,3,array(1,1,2,7),array(1,1,2,7),
        "Sunset_Gulch Old Derrickson Manufacturing",vec(-10309,-1602,-3780),-90,8800,0,array(),0,4,array(1,2,4,7),array(1,2,4,7),
        "Sunset_Gulch Old Derrickson Military Base 1",vec(-5061,-5504,-3908),-90,3100,0,array(),0,5,array(1,7,7),array(1,7,7),
        "Sunset_Gulch Old Derrickson Military Base 2",vec(-5060,-6016,-3908),-90,2000,0,array(),0,5,array(1,7,7),array(1,7,7),
        
        "Sunset_Gulch Old Kahuna Scrapyard",vec(-13312,9798,-2116),180,3800,0,array(),0,1,array(2,2,2,7),array(2,2,2,7),
        "Sunset_Gulch Old Kahuna Workshop 1",vec(4550,4481,-2116),90,3200,0,array(),0,2,array(1,1),array(1,1),
        "Sunset_Gulch Old Kahuna Workshop 2",vec(4549,4223,-2116),90,2800,0,array(),0,2,array(1,1),array(1,1),
        "Sunset_Gulch Old Kahuna Atlantic Shipping 1",vec(3589,-2559,-2116),90,4900,0,array(),0,4,array(1,1,4),array(1,1,4),
        "Sunset_Gulch Old Kahuna Atlantic Shipping 2",vec(3718,-3073,-2116),90,4000,0,array(),0,4,array(1,1,4),array(1,1,4),
        "Sunset_Gulch Old Kahuna Oil 1",vec(4550,9984,-2116),90,5500,0,array(),0,5,array(4,4,4),array(4,4,4),
        "Sunset_Gulch Old Kahuna Oil 2",vec(4548,10240,-2116),90,5100,0,array(),0,5,array(4,4,4),array(4,4,4),
        
        "Sunset_Gulch Old Redwall Refinery 1",vec(6656,582,60),180,2400,0,array(),0,1,array(4,4),array(4,4),
        "Sunset_Gulch Old Redwall Refinery 2",vec(6911,581,60),180,1700,0,array(),0,1,array(4,4),array(4,4),
        "Sunset_Gulch Old Redwall Refinery 3",vec(7170,582,60),180,1300,0,array(),0,1,array(4,4),array(4,4),
        "Sunset_Gulch Old Redwall Transload 1",vec(5246,10950,60),180,3800,0,array(),0,2,array(1,7,4),array(1,7,4),
        "Sunset_Gulch Old Redwall Transload 2",vec(4866,10949,60),180,3100,0,array(),0,2,array(1,7,4),array(1,7,4),
        "Sunset_Gulch Old Redwall Transload 3",vec(4478,10949,60),180,3100,0,array(),0,2,array(1,7,4),array(1,7,4),
        "Sunset_Gulch Old Redwall Gulch Manufacturing 1",vec(-2430,10182,61),180,4600,0,array(),0,4,array(1,1,2),array(1,1,2),
        "Sunset_Gulch Old Redwall Gulch Manufacturing 2",vec(-2686,10182,61),180,4200,0,array(),0,4,array(1,1,2),array(1,1,2),
        
        "Sunset_Gulch Old Wolfram Yard 1",vec(-11521,-8284,2108),0,16500,0,array(),0,3,array(),array(),
        "Sunset_Gulch Old Wolfram Yard 2",vec(-11902,-7355,2108),0,14700,0,array(),0,3,array(),array(),
        "Sunset_Gulch Old Wolfram Yard 3",vec(-12288,-6427,2108),0,12800,0,array(),0,3,array(),array(),
        "Sunset_Gulch Old Wolfram Yard 4",vec(-12670,-5505,2108),0,11000,0,array(),0,3,array(),array(),
        "Sunset_Gulch Old Wolfram Yard 5",vec(-13184,-3402,2108),0,7800,0,array(),0,3,array(),array(),
        
        "Sunset_Gulch Old Wolfram Depot 1",vec(-13568,-11845,2108),0,4800,0,array(),0,7,array(9,9,7,1),array(8,8,7,1),
        "Sunset_Gulch Old Wolfram Depot 2",vec(-13823,-11717,2108),0,4300,0,array(),0,7,array(9,9,7,1),array(8,8,7,1),
        
        "Sunset_Gulch Custom Gulch Grain Loading",vec(-4216,12801,1109),-90,6200,0,array(),0,7,array(5,5),array(5,5),
        "Sunset_Gulch Custom Gulch Grain Storage",vec(-7484,12797,1116),-90,2200,0,array(),0,0,array(),array(5),
        
        "Sunset_Gulch Custom Godfather Powerstation",vec(-8830,-6400,-3772),-90,2400,0,array(),0,7,array(9,9),array(8,8),
        
        "Sunset_Gulch Custom Redwall Redistribution",vec(4968,-8508,92),180,2400,0,array(),0,8,array(1,7),array(1,7),
        
        "Sunset_Gulch Rockfort Downtown Industrial",vec(-2689,-1570,-8580),0,6100,0,array(),0,2,array(1,1,1,7,7),array(1,1,1,7,7),
        
        "Sunset_Gulch Everywhere",vec(0,0,0),0,0,0,array(),0,0,array(),array(),
        
        "Sunset_Gulch Rockfort Lava Port 1",vec(-9599,1973,-8580),180,10200,0,array(),0,3,array(1,1,7,4,9,9,5,3),array(1,1,7,4,8,8,5,3),
        "Sunset_Gulch Rockfort Lava Port 2",vec(-9857,2369,-8580),180,11100,0,array(),0,3,array(1,1,7,4,9,9,5,3),array(1,1,7,4,8,8,5,3),
        "Sunset_Gulch Rockfort Shed Siding",vec(5118,-3503,-8580),0,9200,0,array(),0,4,array(1,1,1,1),array(1,1,1,1),
        
        "Sunset_Gulch Derrickson West Farm Siding",vec(10559,-13377,-3771),120,1900,0,array(),0,8,array(1,7),array(1,7),
        
        "Henrysburg_V2 Henrysburg Yard 1",vec(-10831,9400,-3780),180,16700,0,array(),0,1,array(),array(),
        "Henrysburg_V2 Henrysburg Yard 2",vec(-11089,8634,-3780),180,15100,0,array(),0,1,array(),array(),
        "Henrysburg_V2 Henrysburg Yard 3",vec(-11343,7867,-3780),180,13600,0,array(),0,2,array(),array(),
        "Henrysburg_V2 Henrysburg Yard 4",vec(-11598,7101,-3780),180,12100,0,array(),0,3,array(),array(),
        "Henrysburg_V2 Henrysburg Yard 5",vec(-11855,6333,-3780),180,10500,0,array(),0,4,array(),array(),
        "Henrysburg_V2 Henrysburg Yard 6",vec(-12113,5560,-3780),180,9000,0,array(),0,5,array(),array(),
        "Henrysburg_V2 Henrysburg Yard 7",vec(-12369,5183,-3780),180,8200,10,array(),0,6,array(),array(),
        
        "Henrysburg_V2 Henrysburg Downtown Books 1",vec(-1105,-4138,-3780),90,4000,0,array(),0,10,array(1,1),array(1,1),
        "Henrysburg_V2 Henrysburg Downtown Books 2",vec(-594,-3882,-3780),90,5000,0,array(),0,10,array(1,1),array(1,1),
        "Henrysburg_V2 Henrysburg Engine Service Track",vec(-3216,-1833,-3780),90,3900,0,array(),0,8,array(8,8,8),array(9,9,9),
        "Henrysburg_V2 Henrysburg Engine Service Runaround",vec(-3726,-2092,-3780),90,2900,0,array(),0,9,array(1,7),array(1,7),
        
        "Henrysburg_V2 Mainline Grain Siding",vec(-5742,13728,-1788),-90,13000,0,array(),0,10,array(5,5,5,5,5,5),array(5,5,5,5,5,5),
        
        "Henrysburg_V2 Doodleburg Team Track ",vec(10496,-2508,-836),0,4000,0,array(),0,1,array(1,7),array(1,7),
        "Henrysburg_V2 Doodleburg Cement Loading Track",vec(8636,-7619,-836),90,4000,0,array(),0,3,array(3,3,3),array(3,3,3),
        "Henrysburg_V2 Doodleburg Cement Storage 1",vec(9341,-6912,-836),90,4000,0,array(),0,4,array(3,3),array(3,3),
        "Henrysburg_V2 Doodleburg Cement Storage 2",vec(9085,-6655,-836),90,4000,0,array(),0,5,array(4,4),array(4,4),
        
        "Henrysburg_V2 Chad Yard 1",vec(5566,8622,124),90,7800,0,array(),0,1,array(),array(),
        "Henrysburg_V2 Chad Yard 2",vec(5307,8882,124),90,8600,0,array(),0,2,array(),array(),
        "Henrysburg_V2 Chad Yard 3",vec(5068,9138,124),90,10400,0,array(),0,3,array(),array(),
        "Henrysburg_V2 Chad Yard 4",vec(7361,9905,124),90,10900,0,array(),0,4,array(),array(),
        "Henrysburg_V2 Chad Yard 5",vec(6595,10160,124),90,9300,0,array(),0,5,array(),array(),
        "Henrysburg_V2 Chad Yard 6",vec(5822,10418,124),90,8200,0,array(),0,6,array(),array(),
        
        "Henrysburg_V2 Chad Scrapyard",vec(72,2264,121),0,3000,0,array(),0,1,array(2,2,2,2),array(2,2,2,2),
        "Henrysburg_V2 Chad Oddsiding",vec(5996,2435,124),-90,4000,0,array(),0,3,array(1,4),array(1,4),
        "Henrysburg_V2 Chad Grant Bell 1",vec(9059,2178,124),-90,2500,0,array(),0,4,array(1,1),array(1,1),
        "Henrysburg_V2 Chad Grant Bell 2",vec(9578,2435,124),-90,2000,0,array(),0,4,array(1,1),array(1,1),
        "Henrysburg_V2 Chad Team Track",vec(5996,2435,124)-vec(182,4170,0),-90,4000,0,array(),0,5,array(1,7),array(1,7),
        "Henrysburg_V2 Chad Cheerbeer 1",vec(9059,2178,124)-vec(950, 4170, 0),-90,2500,0,array(),0,6,array(1,1),array(1,1),
        "Henrysburg_V2 Chad Cheerbeer 2",vec(9578,2435,124)-vec(950, 4170, 0),-90,2000,0,array(),0,6,array(1,1),array(1,1),
        "Henrysburg_V2 Chad Downtown Books",vec(-5006,8624,124),90,4000,0,array(),0,7,array(1,1,1),array(1,1,1)
  
    )
    Areas = table(
        
        "Area Wolfram Yard",3,array(1,2,3,4,5,6),
        
        "Area Redwall Local",4,array(7,8,9,10,11,12,13,14,15,122,121,124),
        "Area Redwall Industries",-1,array(7,8,9,10,11,12,13,14,15,122,121,124),
        
        "Area Kahuna Local",5,array(16,17,18,19,20,21,22),
        "Area Kahuna Industries",-1,array(16,17,18,19,20,21,22),
        
        "Area Derrickson Yard",2,array(23,24,25,26),
        "Area SCM Industries",-1,array(27,28),
        
        "Area Derrickson Local",6,array(29,30,31,32,33,123,130),
        "Area Derrickson Industries",-1,array(29,30,31,32,33,123,130),
        
        "Area Rockfort Yard",1,array(34,35,36,37),
        "Area Rockfort Local",7,array(125,127,128,129),
        "Area Rockfort Industries",-1,array(125,127,128,129),
        
        "Area Sunset",-1,array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,122,121,124,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,123,130,34,35,36,37,125,127,128,129),
        "Area Sunset Industries",-1,array(7,8,9,10,11,12,13,14,15,122,121,124,16,17,18,19,20,21,22,27,28,29,30,31,32,33,123,130,125,127,128,129),
        
        "Area Sunset Off-map South",9,array(7,8,9,10,11,12,13,14,15,122,121,124,16,17,18,19,20,21,22,27,28,29,30,31,32,33,123,130,125,127,128,129),
        "Area Sunset Off-map North",8,array(7,8,9,10,11,12,13,14,15,122,121,124,16,17,18,19,20,21,22,27,28,29,30,31,32,33,123,130,125,127,128,129),
        
        
        "Area Ashland Yard",3,array(38,39,40,41),
        "Area Ashland Industries",-1,array(42,43,44,45,46),
        
        "Area Winchester Local",4,array(47,48,49,50),
        "Area Winchester Industries",-1,array(47,48,49,50),
        
        "Area Olive Hill Yard",2,array(51,52,53,54,55),
        "Area Olive Hill Industries",-1,array(56,57),
        
        "Area Piker's Peak",5,array(61,62,63,64,65,66),
        "Area Piker's Peak Yard",5,array(58,59,60),
        "Area Piker's Peak Industries",-1,array(61,62,63,64,65,66),
        
        "Area Cincinatti Yard",1,array(67,68,69,70,71,72),
        "Area Cincinatti Industries",-1,array(73,74),
        "Area Cincinatti Interchange Yard",9,array(75,76,77,78,79),
        
        "Area AOH",-1,array(38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,6061,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79),
        "Area AOH Industries",-1,array(42,43,44,45,46,47,48,49,50,56,57,61,62,63,64,65,66),
        
        
        "Area Old Wolfram",3,array(115,116,117,118,114),
        "Area Old Wolfram Tipple",-1,array(119,120),
        
        "Area Old Redwall",4,array(107,108,109,110,111,112,113,106),
        "Area Old Redwall Industries",-1,array(107,108,109,110,111,112,113,106),
        
        "Area Old Kahuna",5,array(100,101,102,103,104,105,99),
        "Area Old Kahuna Industries",-1,array(100,101,102,103,104,105,99),
        
        "Area Old Derrickson",2,array(91,92,93,94,95,96,97,98,90),
        "Area Old Derrickson Industries",-1,array(91,92,93,94,95,96,97,98,90),
        
        "Area Old Rockfort Yard",1,array(80,81,82,83),
        "Area Old Rockfort Local",6,array(84,85,86,87,88,89),
        "Area Old Rockfort Local Industries",-1,array(84,85,86,87,88,89),
        
        "Area Old Sunset",-1,array(80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120),
        "Area Old Sunset Industries",-1,array(119,120,107,108,109,110,111,112,113,106,100,101,102,103,104,105,99,91,92,93,94,95,96,97,98,90,84,85,86,87,88,89),
        #"Area Test",0,array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
        
        "Area Henrysburg Yard",1,array(131,132,133,134,135,136,137),
        "Area Henrysburg Local",3,array(138,139,140,141),
        "Area Henrysburg Industrial",-1,array(138,139,140,141),
        
        "Area Doodleburg",4,array(143,144,145,146),
        "Area Doodleburg Industries",-1,array(143,144,145,146),
        
        "Area Chad Yard",-1,array(147,148,149,150,151,152),
        "Area Chad Local",-1,array(153,154,155,156,157,158,159,160),
        "Area Chad Industries",-1,array(153,154,155,156,157,158,159,160),
        
        "Area Henrysburg_V2 All Industries",-1,array(138,139,140,141,142,153,154,155,156,157,158,159,160),
        "Area Henrysburg Off-Map North",5,array(138,139,140,141,142,153,154,155,156,157,158,159,160),
        "Area Henrysburg Off-Map South",6,array(138,139,140,141,142,153,154,155,156,157,158,159,160)

    )
    
    Compile = table(
        
        array(1,2,3,4,5,6),array(7,8,9,10,11,12,13,14,15,122,121,124),
        array(23,24,25,26),array(16,17,18,19,20,21,22,27,28,29,30,31,32,33,123,130),
        array(34,35,36,37),array(125,127,128,129),
        
        array(126),array(7,8,9,10,11,12,13,14,15,122,121,124,16,17,18,19,20,21,22,27,28,29,30,31,32,33,123,130,125,127,128,129),
        
        array(38,39,40,41),array(42,43,44,45,46,47,48,49,50),
        array(51,52,53,54,55),array(56,57,61,62,63,64,65,66),
        array(58,59,60),array(61,62,63,64,65,66),
        array(67,68,69,70,71,72),array(42,43,44,45,46,47,48,49,50,56,57,61,62,63,64,65,66,73,74),
        array(75,76,77,78,79),array(42,43,44,45,46,47,48,49,50,56,57,61,62,63,64,65,66,73,74),
        
        array(115,116,117,118,114),array(119,120,107,108,109,110,111,112,113,106,100,101,102,103,104,105,99),
        array(80,81,82,83),array(84,85,86,87,88,89,91,92,93,94,95,96,97,98,90),
        
        array(131,132,133,134,135,136,137),array(138,139,140,141,142),
        array(147,148,149,150,151,152),array(143,144,145,146,153,154,155,156,157,158,159,160)
        
    )
    
    for(X = 1, Compile:count()/2){
        
        local In = array()
        local Out = array()
        
        for(Y = 1, Compile[X*2,array]:count()){
            
            In = In:add(Loc[Compile[X*2,array][Y,number]*10-1,array])
            Out = Out:add(Loc[Compile[X*2,array][Y,number]*10,array])
            
        }
        
        for(Y = 1, Compile[X*2-1,array]:count()){
            
            Loc[Compile[X*2-1,array][Y,number]*10-1,array] = In
            Loc[Compile[X*2-1,array][Y,number]*10,array] = Out
            
        }
        
    }
    
    function vector randtoRGB(Base:vector,Shade:vector){
        
        local Hue = mod(random(Base:x(),Shade:x()),360)
        local Sat = clamp(Base:y()+random(Shade:y(),-Shade:y()),0,1)
        local Light = clamp(Base:z()+random(Shade:z(),-Shade:z()),0,1)
        
        local Chr = (1 - abs(2 * Light - 1)) * Sat
        local H = Hue/60
        local MID =(1 - abs(H % 2 - 1)) * Chr
        
        if(H < 1){
            R = Chr
            G = MID
            B = 0
        }elseif(H < 2){
            R = MID
            G = Chr
            B = 0
        }elseif(H < 3){
            R = 0
            G = Chr
            B = MID
        }elseif(H < 4){
            R = 0
            G = MID
            B = Chr
        }elseif(H < 5){
            R = MID
            G = 0
            B = Chr
        }elseif(H < 6){
            R = Chr
            G = 0
            B = MID
        }else{
            R = 255
            G = 255
            B = 255
        }
        
        local M = Light - Chr/2
        return vec(R+M,G+M,B+M)*255
    
    }
    
    function vector toRGB(HSL:vector){
        
        #local Hue = mod(random(Base:x(),Shade:x()),360)
        #local Sat = clamp(Base:y()+random(Shade:y(),-Shade:y()),0,1)
        #local Light = clamp(Base:z()+random(Shade:z(),-Shade:z()),0,1)
        local Hue = HSL:x()
        local Sat = HSL:y()
        local Light = HSL:z()
        
        local Chr = (1 - abs(2 * Light - 1)) * Sat
        local H = Hue/60
        local MID =(1 - abs(H % 2 - 1)) * Chr
        
        if(H < 1){
            R = Chr
            G = MID
            B = 0
        }elseif(H < 2){
            R = MID
            G = Chr
            B = 0
        }elseif(H < 3){
            R = 0
            G = Chr
            B = MID
        }elseif(H < 4){
            R = 0
            G = MID
            B = Chr
        }elseif(H < 5){
            R = MID
            G = 0
            B = Chr
        }elseif(H < 6){
            R = Chr
            G = 0
            B = MID
        }else{
            R = 100
            G = 255
            B = 255
        }
        
        local M = Light - Chr/2
        return vec(R+M,G+M,B+M)*255
    
    }
    
    function sortypeToC(OA:entity){
        
        while(X <= 8){
        
            while(Y <= MDL[X*2,table]:count()/7){
                
                if(MDL[X*2,table][Y*7-6,string] == OA:model()){
                    
                    if(OA:model():find("magtrains/hopper4")){
                        
                        if(OA:getBodygroup(1) != 1 & OA:getBodygroup(1) != 0){
                            
                            C = Sortype[5,array]
                            
                        }elseif(OA:getBodygroup(2)){
                            
                            C = Sortype[9,array]
                            
                        }else{
                            
                            C = Sortype[8,array]
                            
                        }
                        
                    }elseif(OA:model():find("magtrains/hopper1")){
                        
                        if(OA:getBodygroup(1) == 1){
                            
                            C = Sortype[5,array]
                            
                        }elseif(OA:getBodygroup(1) == 2){
                            
                            C = Sortype[3,array]
                            
                        }elseif(OA:getBodygroup(2)){
                            
                            C = Sortype[9,array]
                            
                        }else{
                            
                            C = Sortype[8,array]
                        
                        }
                        
                    }elseif(OA:model():find("magtrains/flatcar1") | OA:model():find("magtrains/flatcar2")){
                        
                        if(OA:getBodygroup(1) == 1){
                            
                            C = Sortype[6,array]
                            
                        }else{
                            
                            C = Sortype[7,array]
                            
                        }
                        
                    }elseif(OA:model():find("gunderson")){
                        
                        if(OA:getBodygroup(2) == 0 | OA:getBodygroup(2) == 1){
                            
                            C = Sortype[6,array]
                            
                        }else{
                            
                            C = Sortype[2,array]
                            
                        }
                        
                    }elseif(X == 8){
                        
                        if((OA:model():find("bethgon") & OA:getBodygroup(5)) |
                         (OA:model():find("gsg") & OA:getBodygroup(1)) |
                         (OA:model():find("magtrains") & OA:getBodygroup(2))){
                            
                            C = Sortype[9,array]
                            
                        }else{
                            
                            C = Sortype[8,array]
                            
                        }
                        
                    }else{
                    
                        C = Sortype[X,array]
                        
                    }
                    
                    Z = 2
                    break
                    
                }
                
                Y++
                
            }
            
            if(Z == 2){
                
                Z = 1
                Y = 1
                break
                
            }
            
            Y = 1
            X++
            
        }
        
        X = 1
        
    }
    
    function createMarker(OA:entity,Vec:vector,Ang:angle,HSLColor:vector,Type){
        
        HL++
        
        #holoCreate(HL,OA:pos() + vec(0,0,225),vec(6),ang(0,0,180),toRGB(MarkColors[HL,vector]),"cone")
        holoCreate(HL,Vec,select(Type,vec(6),vec(6),vec(5),vec(5),vec(7),vec(5)),Ang,HSLColor,select(Type,"cone","models/sprops/misc/alphanum/alphanum_arrow_a.mdl","cube","sphere","hq_torus_thick","octagon"))
        holoParent(HL,OA)
        holoMaterial(HL,"debug/debugdrawflat")
        
    }
    
    function number carLength(Ent:entity){
        
        if(Ent:boxSize():y()-CouplerOffset*2 > Ent:boxSize():x()-CouplerOffset*2){
        
            return Ent:boxSize():y()-CouplerOffset*2
            
        }else{
            
            return Ent:boxSize():x()-CouplerOffset*2 
        
        }

    }
    
    function posUpdate(){
        
        Angle = Loc[L[L:count(),number]-2,number]
        Eye = Loc[L[L:count(),number]-3,vector]+(vec(0,Loc[L[L:count(),number],number],-Up+1):rotateAroundAxis(vec(0,0,1),Angle))+vec(0,100,Up):rotateAroundAxis(vec(0,0,1),Angle)
        holoPos(0,Eye)
        holoAng(0,ang(0,Angle,0))
        
    }
    
    function number modelLength(Model:string){
    
        holoCreate(1)
        holoAlpha(1,0)
        holoModel(1,Model)
        
        return carLength(holoEntity(1))
        
    }
    
    E = entity()
    
    S = 7
    F = -5
    Quota = 5000
    
    ID = X = Y = Z = XY = Case2 = Case = Case3 = T = XZ = XX = MarkerType = 1
    
    HideChat = 1
    
    interval(100)
    
}

if(clk()){
    
    interval(100)
    Time++

    if(Print:count() & playerCanPrint()){
        
        if(Print[1,string] != ""){
            
            print(Print[1,string])
            
        }elseif(Print[1,number]:toString() != ""){
        
            print(Print[1,number]:toString())
            
        }else{
        
            print("Incompatible!")
            
        }
        
        Print:remove(1)
        
    }
    
    if(!L:count()){
    
        Eye = owner():aimPos()
        Angle = round((owner():eyeAngles():yaw()-90)/45)*45
        
        holoPos(0,Eye+vec(0,0,Up):rotateAroundAxis(vec(0,0,1),Angle))
        holoAng(0,ang(0,Angle,0))
    
    }
    
    if(holoEntity(0):isValid() & owner():weapon():type()!="weapon_shotgun"){
    
        holoDelete(0)
            
    }
    
    if(Time%16 == 0){
    
        for(X = 1,ToTrack:count()){
            
            if(!ToTrack[1+ToTrack:count()-X,entity]:isValidPhysics()){
                
                ToTrack:remove(1+ToTrack:count()-X)
                
            }
            
        }
        
    }
    
}elseif(chatClk(owner())){

    if(owner():lastSaid():trim():explode(" ")[1,string] == ".t" | (owner():lastSaid():trim():explode(" ")[1,string] == ".l"  |owner():lastSaid():trim():explode(" ")[1,string] == ".m" | owner():lastSaid():trim():explode(" ")[1,string] == ".r" | owner():lastSaid():trim():explode(" ")[1,string] == ".p")|owner():lastSaid():trim():explode(" ")[1,string] == ".h"){
        
        hideChat(HideChat)
        
        if(LS:length()){
                    
            Print = Print:add(array("A chat command is already processing, please wait."))
            
        }
        
        #if(!LS:length()){
        
            LS = owner():lastSaid()
            
        #[}else{
        
            Print = Print:add(array("A chat command is already processing, please wait."))
            
        }]#
        
    }elseif(owner():lastSaid():trim():lower() == ".softreset"){
        
        X = Y = Z = XX = XY = XZ = Case2 = Case = Case3 = MarkerType = 1
        AngOffset = ang(0,0,0)
        Mssg = LS = ""
        Eye = Pos = vec(0)
        From = Sortype = table()
        C = Pistol_R = L = Pool = L1 = L2 = LC = array()
        Temp = Alpha = RandL = RandM = RandT = YP = TempVariable = R1 = R2 = RandL1 = RandL2 = Shotgun_R = Shotgun_L = 0
        
        if(owner():weapon():type()=="weapon_shotgun"){
            
            HC = vec(255,0,0)
            holoColor(0,HC)
            
        }else{
        
            holoDelete(0)
            
        }
        
        hideChat(HideChat)
        
        print("You should really fix whatever caused you to reset...")
        
    }elseif(owner():lastSaid():trim():explode(" ")[1,string] == ".spawn"){
        
        Shotgun_L = owner():lastSaid():trim():explode(" ")[2,string]:toNumber()
        Shotgun_R = 0
        hideChat(HideChat)
        
    }elseif(owner():lastSaid():trim():explode(" ")[1,string] == ".remove"){
        
        Shotgun_R = clamp(owner():lastSaid():trim():explode(" ")[2,string]:toNumber(),0,(ID-1)/4)
        Shotgun_L = 0
        hideChat(HideChat)
        
    }elseif(owner():lastSaid():lower():find(".hide") & owner():aimEntity():isValidPhysics() & !Temp){
    
        Pistol_R = array(owner():aimEntity()):add(owner():aimEntity():getConstraints())
        Temp = Pistol_R:count()
        
    }
    
    Output = 2
    
}elseif(chatClk()){

    if(lastSaid():lower():find(".hide") & lastSpoke():aimEntity():isValidPhysics() & !Temp){
    
        Pistol_R = array(lastSpoke():aimEntity()):add(lastSpoke():aimEntity():getConstraints())
        Temp = Pistol_R:count()
        hideChat(HideChat)
        
    }
    
    Output = 3
    
}elseif(!owner():inVehicle() & keyClk(owner()) == 1){

    Output = 4

    if(owner():weapon():type()=="weapon_shotgun"){
        
        if(!holoEntity(0):isValid()){
            
            if(Pool:count() == 0){
                
                HC = vec(255,0,0)
                
            }
            
            posUpdate()
            
            holoCreate(0,Eye,vec(1),ang(0,Angle,0),vec(255),"models/magtrains/freightbogey2.mdl")
            holoAlpha(0,150)
            holoColor(0,HC)
            
        }
        
        if(owner():keyAttack1() & keyClkPressed()=="mouse_left"){
            
            Shotgun_L++
            Shotgun_R = 0
            
        }
        
        if(owner():keyAttack2() & keyClkPressed()=="mouse_right" & ID > 1){
            
            Shotgun_R++
            Shotgun_R = clamp(Shotgun_R,0,(ID-1)/4)
            Shotgun_L = 0
            
        }
        
    }elseif(owner():weapon():type()=="weapon_pistol" & owner():aimEntity():isValidPhysics()){

        if(owner():keyAttack2() & keyClkPressed()=="mouse_right" & !Temp){
            
            Pistol_R = array(owner():aimEntity()):add(owner():aimEntity():getConstraints())
            Temp = Pistol_R:count()
        
        }elseif((owner():keyAttack1() & keyClkPressed()=="mouse_left") | (owner():keyUse() & keyClkPressed()=="e")){
        
            for(X = 1,Cars:count()/2){
                
                if(Cars[X*2-1,number] == owner():aimEntity():id()){
                    
                    Match = X
                    
                }  
                  
                #X++ 
            }
            
            if(Sortype:count() & owner():keyAttack1() & keyClkPressed()=="mouse_left"){
                
                sortypeToC(owner():aimEntity())
                
            }
        
            if(Match == 0 & (owner():keyAttack1() & (keyClkPressed()=="mouse_left")) & C:count()){
                
                createMarker(owner():aimEntity(),owner():aimEntity():pos() + vec(0,0,225),ang(0,0,180),toRGB(MarkColors[C[randint(C:count(),1),number],vector]),abs(MarkerType))  
                Cars = Cars:add(array(owner():aimEntity():id(),HL))
                
            }elseif(Match){
            
                if(owner():keyAttack1() & keyClkPressed()=="mouse_left"){
                    
                    if(!C:count()){
                    
                        holoDelete(Cars[Match*2,number])
                        Cars:remove(Match*2)
                        Cars:remove(Match*2-1)
                        
                    }elseif(MarkerType < 0){
                        
                        holoModel(Cars[Match*2,number],select(abs(MarkerType),"cone","models/sprops/misc/alphanum/alphanum_arrow_a.mdl","cube","sphere","hq_torus_thick","octagon"))
                        holoScale(Cars[Match*2,number],select(abs(MarkerType),vec(6),vec(6),vec(5),vec(5),vec(7),vec(5)))
                        
                    }else{
            
                        holoColor(Cars[Match*2,number],toRGB(MarkColors[C[randint(C:count(),1),number],vector]))
                        holoModel(Cars[Match*2,number],select(abs(MarkerType),"cone","models/sprops/misc/alphanum/alphanum_arrow_a.mdl","cube","sphere","hq_torus_thick","octagon"))
                        holoScale(Cars[Match*2,number],select(abs(MarkerType),vec(6),vec(6),vec(5),vec(5),vec(7),vec(5)))
                        
                    }
                    
                }elseif(owner():keyUse() & (keyClkPressed()=="e")){
            
                    holoDelete(Cars[Match*2,number])
                    Cars:remove(Match*2)
                    Cars:remove(Match*2-1)
                
                #[elseif(owner():keyReload() & (keyClkPressed()=="r")){
                    
                    Alpha = holoEntity(Cars[Match*2,number]):getAlpha()
                    Color = holoEntity(Cars[Match*2,number]):getColor()
                    
                    holoDelete(Cars[Match*2,number])
                    
                    holoCreate(Cars[Match*2,number],owner():aimEntity():pos() + vec(0,0,225),vec(6),ang(0,0,180),Color,"cone")
                    holoParent(Cars[Match*2,number],owner():aimEntity())
                    holoMaterial(Cars[Match*2,number],"debug/debugdrawflat")
                    holoAlpha(Cars[Match*2,number],Alpha)]#
                    
                }
                 
            }
            
            Match = 0
        
        }
        
    }
        
}
    


if(LS:trim():explode(" ")[1,string] == ".t" & minquota() > Quota){
    
    if(LS:trim():explode(" ")[2,string] == "" & LS:trim():explode(" ")[3,string] == "" & LS:trim():explode(" ")[4,string] == ""){
        
        Mssg = "Car Type is currently "
        
        while(X <= Pool:count()){
    
            Mssg = Mssg + MDL[Pool[X,number]*2-1,string] + "," + " "
            X++
            
        }
        
        X = 1
        Mssg = Mssg:sub(1,Mssg:length()-2)
        Print = Print:add(array(Mssg))
        Mssg = ""
        print(Pool)
        LS = ""
        
        
    }elseif(LS:trim():explode(" ")[2,string]:toNumber() == 0){
        
        Pool = array(1,1,1,1,1,2,3,3,4,4,5,5,6,7,8,9)
        TempVariable = 0
        holoColor(0,vec(0,255,0))
        HC = vec(0,255,0)
        LS = ""
        
        Print = Print:add(array("Car Type set to Random"))
        
        
    }elseif(LS:trim():explode(" ")[2,string]:toNumber() == -1){
        
        Pool = array(-1)
        
        Print = Print:add(array("Car Type set by Track"))
        holoColor(0,vec(0,255,0))
        HC = vec(0,255,0)
        TempVariable = 1
        LS = ""
        
        
    }else{
        
        Mssg = "Car Type set to "
        
        Pool = array()
        
        TempVariable = 0
        
        while(X+1 <= LS:trim():explode(" "):count()){
    
            Pool = Pool:add(array(LS:trim():explode(" ")[X+1,string]:toNumber()))
            Mssg = Mssg + MDL[Pool[X,number]*2-1,string] + "," + " "
            X++
            
        }
        
        X = 1
        holoColor(0,vec(0,255,0))
        HC = vec(0,255,0)
        Mssg = Mssg:sub(1,Mssg:length()-2)
        Print = Print:add(array(Mssg))
        Mssg = ""
    
        
        LS = ""
        
    }
    
}elseif((LS:trim():explode(" ")[1,string] == ".l"  |LS:trim():explode(" ")[1,string] == ".m" | LS:trim():explode(" ")[1,string] == ".r" | LS:trim():explode(" ")[1,string] == ".p") & minquota() > Quota){

    switch(Case){
        
        case(1),
             
            L = array()
            LC = array()
            if(LS:trim():explode(" ")[1,string] == ".m"){
                
                YP = 1
                
            }else{
            
                YP = 0
                
            }
            
            Case++
            
            L1 = array(0)
            L2 = array(0)
            
        
        break  
        case(2),
        
            switch(Case3){
                
                case(1),
            
                    while(Z <= LS:sub(4):explode(","):count() & minquota() > Quota){
                        
                        switch(Case2){
                            
                            case(1),
                    
                                while(X <= Loc:count()/10 & minquota() > Quota){
                                    
                                    while(Y + YP <= LS:sub(4):explode(",")[Z,string]:explode(" "):count() & minquota() > Quota){
                                        
                                        if(!Loc[X*10-9,string]:lower():find(LS:sub(4):explode(",")[Z,string]:explode(" ")[Y + YP,string]:lower())){
                                            
                                            XY = 0
                                            break
                                            
                                        }
                                        
                                        Y++
                                        
                                    }
                                    
                                    if(Y + YP > LS:sub(4):explode(",")[Z,string]:explode(" "):count() | XY == 0){
                                        
                                        Y = 1
                                    
                                        if(XY){
                                            
                                            L = L:add(array(X*10-5))
                                            L1 = L1:add(array(L1[1,number]))
                                            L2 = L2:add(array(L2[1,number]))
                                            L1[1,number] = L1[1,number] + Loc[X*10-1,array]:count()
                                            L2[1,number] = L2[1,number] + Loc[X*10,array]:count()
                                            LC = LC:add(array(Loc[X*10-2,number]))
                                            XZ = 0
                                            
                                            X = 1
                                            break
                                            
                                        }else{
                                            
                                            X++  
                                            XY = 1
                                            
                                        }
                                         
                                    }
                                    
                                }
                                
                                if(XZ == 0){
                                        
                                    XZ = 1
                                    Z++
                                    
                                }
                                
                                if(X > Loc:count()/10){
                                    
                                    Case2++
                                    XZ = 1
                                    X = 1
                                    XY = 1
                                    
                                    continue
                                                
                                }
                                
                            break,
                            case(2),
                                
                                while(X <= Areas:count()/3 & minquota() > Quota){
                                    
                                    while(Y + YP <= LS:sub(4):explode(",")[Z,string]:explode(" "):count() & minquota() > Quota){
                                        
                                        if(!Areas[X*3-2,string]:lower():find(LS:sub(4):explode(",")[Z,string]:explode(" ")[Y + YP,string]:lower())){
                                            
                                            XY = 0
                                            break
                                            
                                        }
                                        
                                        Y++
                                        
                                    }
                                    
                                    if(Y + YP > LS:sub(4):explode(",")[Z,string]:explode(" "):count() | XY == 0){   
                                    
                                        if(XY){
                                            
                                            while(XX <= Areas[X*3,array]:count() & minquota() > Quota){
                                        
                                                L = L:add(array(Areas[X*3,array][XX,number]*10-5))
                                                L1 = L1:add(array(L1[1,number]))
                                                L2 = L2:add(array(L2[1,number]))
                                                L1[1,number] = L1[1,number] + Loc[Areas[X*3,array][XX,number]*10-1,array]:count()
                                                L2[1,number] = L2[1,number] + Loc[Areas[X*3,array][XX,number]*10,array]:count() 
                                                if(Areas[X*3-1,number] == -1){
                                                    
                                                    LC = LC:add(array(Loc[Areas[X*3,array][XX,number]*10-2,number]))
                                                    
                                                }else{
                                                    
                                                    LC = LC:add(array(Areas[X*3-1,number]))
                                                    
                                                }
                                                
                                                XX++
                                                
                                            }
                                            
                                            if(XX > Areas[X*3,array]:count()){
                                                
                                                XX = 1
                                                Y = 1
                                                Case2 = 1
                                                X = (Areas:count()/3)+1
                                                break
                                                
                                            }
                                            
                                        }else{
                                            
                                            Y = 1
                                            X++  
                                            XY = 1
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                                if(X > Areas:count()/3){
                                    
                                    X = 1
                                    Z++
                                    YP = 0
                                    Case2 = 1
                                    Y = 1
                                    XX = 1
                                    
                                }
                                
                            break
                        
                        }
                        
                    }
                    
                    if(Z > LS:sub(4):explode(","):count()){
                        
                        Z = 1
                        
                        if(L:count()){
                            
                            RandL = randint(1,L:count())
                            L1 = L1:add(array(L1[1,number])) 
                            L2 = L2:add(array(L2[1,number])) 
                            R1 = random(0,L1[1,number])
                            R2 = random(0,L2[1,number])
                            posUpdate()
                            Case3++
                            
                        }else{
                        
                            Print = Print:add(array("Nothing matches the search, location set to Cursor"))
                            LS = ""
                            Case = 1
                            Case3 = 1
                            
                            
                        }
                        
                    }
                    
                break
                case(2),
            
                    while(X+1 <= L1:count() & minquota() > Quota){
                        
                        if(R1 > L1[X+1,number] & R1 < L1[X+2,number]){
                            
                            RandL1 = X
                            
                        }
                        if(R2 > L2[X+1,number] & R2 < L2[X+2,number]){
                            
                            RandL2 = X
                            
                        }
                        
                        X++
                        
                    }
                    
                    if(X+1 > L1:count()){
                        
                        X = 1
                        Case3 = 1
                        Case++
                         
                    }
                
                break
                
            }
            
        break,
        case(3),
    
            if(LS:trim():explode(" ")[1,string] == ".l" & minquota() > Quota){
                
                while(X <= L:count() & minquota() > Quota){
                        
                    Mssg = Mssg + " " + Loc[L[X,number]-4,string]:sub(Loc[L[X,number]-4,string]:explode(" ")[1,string]:length()+2)
                    X++
                    Mssg = Mssg + ","
                    
                }
                
                if(X > L:count()){
                    
                    X = 1
                    Mssg = Mssg:sub(1,Mssg:length()-1)
                    
                    if(L:count() > 1){
            
                        Print = Print:add(array("Destinations Set to" + Mssg))
                        
                    }elseif(L:count()){
                        
                        Print = Print:add(array("Destination Set to" + Mssg))
                        
                    }
                    
                    LS = ""
                    Case = 1
                    Mssg = ""
                    
                }
                
            }elseif(LS:trim():explode(" ")[1,string] == ".r" & minquota() > Quota){
                
                while(X <= L:count() & minquota() > Quota){
                        
                    Mssg = Mssg + " " + Loc[L[X,number]-4,string]:sub(Loc[L[X,number]-4,string]:explode(" ")[1,string]:length()+2)
                        
                    Loc[L[X,number],number] = 0
                    Loc[L[X,number]+1,array] = array()
                    
                    posUpdate()
                    
                    X++
                    Mssg = Mssg + ","
                    
                }
                
                if(X > L:count()){
                
                    X = 1

                    Mssg = Mssg:sub(1,Mssg:length()-1)
                    
                    Print = Print:add(array("Destination" + Mssg + " reset!"))
                    
                    LS = ""
                    Case = 1
                    Mssg = ""
                    
                }
            
            }elseif(LS:trim():explode(" ")[1,string] == ".m" & minquota() > Quota){
            
                while(X <= L:count() & minquota() > Quota){
                    
                    switch(Case3){
                    
                        case(1),
                
                            while(Z <= LocMarkers:count()/2 & minquota() > Quota){
                            
                                if(LocMarkers[Z*2-1,number] == L[X,number]){
                                    
                                    Match = Z
                                    break
                                    
                                }  
                                  
                                Z++ 
                                
                            }
                            
                            if(Z > LocMarkers:count()/2 | Match){
                                
                                Z = 1
                                Case3++
                                continue
                                
                            }
                            
                        break,
                        case(2),
                            
                            if(abs(LS:trim():explode(" ")[2,string]:toNumber()) & !Match){
                                
                                if(LS:trim():explode(" ")[2,string]:toNumber() == -1 & Loc[L[X,number]+3,number] != 0){
                                    
                                    Print = Print:add(array(Loc[L[X,number]-4,string]:sub(Loc[L[X,number]-4,string]:explode(" ")[1,string]:length()+2) + " marked."))
                                    
                                    #[
                                    HL++
                                    holoCreate(HL,vec(6,6,6),ang(0,Loc[L[X,number]-2,number],180),toRGB(MarkColors[Loc[L[X,number]+3,number],vector]),"models/sprops/misc/alphanum/alphanum_arrow_a.mdl")
                                    holoMaterial(HL,"debug/debugdrawflat")]#
                                    
                                    createMarker(noentity(),Loc[L[X,number]-3,vector] + (vec(0,Loc[L[X,number]-1,number]-100,200):rotateAroundAxis(vec(0,0,1),Loc[L[X,number]-2,number])),ang(0,Loc[L[X,number]-2,number],180),toRGB(MarkColors[Loc[L[X,number]+3,number],vector]),abs(MarkerType))                   
                                    
                                    LocMarkers = LocMarkers:add(array(L[X,number],HL))
                                    
                                }elseif(LS:trim():explode(" ")[2,string]:toNumber() == -1 & Loc[L[X,number]+3,number] == 0){
                                
                                    Print = Print:add(array(Loc[L[X,number]-4,string]:sub(Loc[L[X,number]-4,string]:explode(" ")[1,string]:length()+2) + " not marked."))
                                    
                                }else{
                                
                                    Print = Print:add(array(Loc[L[X,number]-4,string]:sub(Loc[L[X,number]-4,string]:explode(" ")[1,string]:length()+2) + " marked."))
                                    
                                    #HL++
                                    #holoCreate(HL,Loc[L[X,number]-3,vector] + (vec(0,Loc[L[X,number]-1,number]-100,200):rotateAroundAxis(vec(0,0,1),Loc[L[X,number]-2,number])) ,vec(6,6,6),ang(0,Loc[L[X,number]-2,number],180),toRGB(MarkColors[LS:trim():explode(" ")[2,string]:toNumber(),vector]),"models/sprops/misc/alphanum/alphanum_arrow_a.mdl")
                                    #holoMaterial(HL,"debug/debugdrawflat")
                                    
                                    createMarker(noentity(),Loc[L[X,number]-3,vector] + (vec(0,Loc[L[X,number]-1,number]-100,200):rotateAroundAxis(vec(0,0,1),Loc[L[X,number]-2,number])),ang(0,Loc[L[X,number]-2,number],180),toRGB(MarkColors[LS:trim():explode(" ")[2,string]:toNumber(),vector]),abs(MarkerType))
                                    
                                    LocMarkers = LocMarkers:add(array(L[X,number],HL))
                                      
                                }
                                
                                X++
                                Case3 = 1
                                Match = 0
                                continue
                                
                            }elseif(abs(LS:trim():explode(" ")[2,string]:toNumber()) & Match){
                                
                                Print = Print:add(array(Loc[L[X,number]-4,string]:sub(Loc[L[X,number]-4,string]:explode(" ")[1,string]:length()+2) + " re-marked."))
                                    
                                if(LS:trim():explode(" ")[2,string]:toNumber() == -1){
                                    
                                    holoColor(LocMarkers[Match*2,number],toRGB(MarkColors[Loc[L[X,number]+3,number],vector]))
                                    holoModel(LocMarkers[Match*2,number],select(abs(MarkerType),"cone","models/sprops/misc/alphanum/alphanum_arrow_a.mdl","cube","sphere","hq_torus_thick","octagon"))
                                    holoScale(LocMarkers[Match*2,number],select(abs(MarkerType),vec(6),vec(6),vec(5),vec(5),vec(7),vec(5)))
                                    
                                }else{
                                    
                                    holoColor(LocMarkers[Match*2,number],toRGB(MarkColors[LS:trim():explode(" ")[2,string]:toNumber(),vector]))
                                    holoModel(LocMarkers[Match*2,number],select(abs(MarkerType),"cone","models/sprops/misc/alphanum/alphanum_arrow_a.mdl","cube","sphere","hq_torus_thick","octagon"))
                                    holoScale(LocMarkers[Match*2,number],select(abs(MarkerType),vec(6),vec(6),vec(5),vec(5),vec(7),vec(5)))
                                    
                                }
                                    
                                X++
                                Case3 = 1
                                Match = 0
                                continue
                                 
                            }elseif(Match){
                                    
                                holoDelete(LocMarkers[Match*2,number])
                                LocMarkers:remove(Match*2)
                                LocMarkers:remove(Match*2-1)
                                
                                Print = Print:add(array(Loc[L[X,number]-4,string]:sub(Loc[L[X,number]-4,string]:explode(" ")[1,string]:length()+2) + " un-marked."))
                                
                                X++
                                Case3 = 1
                                Match = 0
                                continue
                                
                            }else{
                            
                                #Print = Print:add(array(Loc[L[X,number]-4,string]:sub(Loc[L[X,number]-4,string]:explode(" ")[1,string]:length()+2) + " not un-marked."))
                                
                                Case3 = 1
                                Match = 0
                                X++
                                #Print = Print:add(array(X+" "+abs(LS:trim():explode(" ")[2,string]:toNumber()) +" "+ !Match +" "+ Match))
                                
                            }
                                
                        break
                        
                    }
                            
                }
                
                if(X > L:count()){
                        
                    X = 1
                    Match = 0
                    LS = ""
                    Case = 1
                    Z = 1
                    Case3 = 1
                    
                }
            
            }elseif(LS:trim():explode(" ")[1,string] == ".p" & minquota() > Quota){
            
                switch(Case3){
                    
                    case(1),
                        
                        From:clear()
                        From[1,array] = array()
                        Case3++
                        
                    break,
                    case(2),
            
                        while(X <= Loc[L[1,number]+5,array]:count()){
                            
                            From[Loc[L[1,number]+5,array][X,number],number] = From[Loc[L[1,number]+5,array][X,number],number] + 1
                            #From[1,array] = From[1,array]:add(array(Loc[L[1,number]+5,array][X,number]))
                            X++
                            
                        }
                        
                        if(X > Loc[L[1,number]+5,array]:count()){
                            
                            X = 1
                            Case3++
                            Sortype = table()
                            
                        }
                        
                    break,
                    case(3),
                        
                        while(X <= L:count()-1 & minquota() > Quota){
                            
                            while(Y <= Loc[L[X+1,number]+4,array]:count() & minquota() > Quota){
                                
                                Sortype[Loc[L[X+1,number]+4,array][Y,number],array] = Sortype[Loc[L[X+1,number]+4,array][Y,number],array]:add(array(LC[X+1,number]))
                                
                                Y++
                                
                            }
                            
                            if(Y > Loc[L[X+1,number]+4,array]:count()){
                                
                                X++
                                Y = 1
                                
                            }
                                
                        }
                        
                        if(X > L:count()-1){
                            
                            Case3++
                            X = 1
                            Pool = array()
                            TempVariable = 0
                            
                        }
                        
                    break
                    case(4),
                            
                        while(X <= MDL:count()/2 & minquota() > Quota){
                            
                            while(Y <= clamp(From[X,number],0,Sortype[X,array]:count()) & minquota() > Quota){
                            
                                Pool = Pool:add(array(X))
                                Y++
                                
                            }
                            
                            if(Y > clamp(From[X,number],0,Sortype[X,array]:count())){
                            
                                X++
                                Y = 1
                                
                            }
                            
                        }
                        
                        if(X > MDL:count()/2){
                            
                            while(Z <= L:count()-1 & minquota() > Quota){
                        
                                Mssg = Mssg + " " + Loc[L[Z+1,number]-4,string]:sub(Loc[L[Z+1,number]-4,string]:explode(" ")[1,string]:length()+2)
                                Z++
                                Mssg = Mssg + ","
                                
                            }
                            
                            if(Z > L:count()-1){
                                
                                Mssg = Mssg:sub(1,Mssg:length()-1)
                        
                                Print = Print:add(array("Populator set to deliver from" + Loc[L[1,number]-4,string]:sub(Loc[L[1,number]-4,string]:explode(" ")[1,string]:length()+1) + " to" + Mssg))
                                Mssg = ""
                                
                                holoColor(0,vec(0,255,0))
                                HC = vec(0,255,0)
                                
                                L = array(L[1,number])
                                L1 = L1:add(array(L1[1,number]))
                                L2 = L2:add(array(L2[1,number]))
                                L1[1,number] = L1[1,number] + Loc[X*10-1,array]:count()
                                L2[1,number] = L2[1,number] + Loc[X*10,array]:count()
                                RandL = randint(1,L:count())
                                L1 = L1:add(array(L1[1,number])) 
                                L2 = L2:add(array(L2[1,number])) 
                                R1 = random(0,L1[1,number])
                                R2 = random(0,L2[1,number])
                                
                                posUpdate()
                                
                                LS = ""
                                Case3 = 1
                                Case = 1
                                X = 1
                                Z = 1
                                
                            }
                            
                        }
                        
                    break
                        
                }
                
            }
            
        break
        
    }
 
}elseif(LS:trim():explode(" ")[1,string] == ".h" & minquota() > Quota){
    
    if(LS:trim():explode(" ")[3,string] != "0" & LS:trim():explode(" ")[3,string] != ""){
        
        if(XX == 1){
        
            XX = 2
            C = array()
            Sortype = table()
            MarkerType = LS:trim():explode(" ")[X+1,string]:toNumber()
            X = 2
            
        }
    
        while(X <= LS:trim():explode(" "):count()-1 & minquota() > Quota){
            
            C = C:add(array(LS:trim():explode(" ")[X+1,string]:toNumber()))
            String = String + LS:trim():explode(" ")[X+1,string]:toNumber() + ", "
            X++
        
        }
        
        if(X > LS:trim():explode(" "):count()-1){
            
            X = 1
            Print = Print:add(array("Marker Shape set to " + MarkerType + ", colors set to " + String:sub(0,String:length()-2)))
            String = LS = ""
            XX = 1
            
        }
        
    }elseif(LS:trim():explode(" ")[2,string] != "0" & LS:trim():explode(" ")[2,string] != ""){
        
        MarkerType = LS:trim():explode(" ")[X+1,string]:toNumber()
        LS = ""
        
        Print = Print:add(array("Marker Shape set to " + MarkerType))
    
    }else{
        
        LS = ""
        C = array()
        Sortype = table()
        Print = Print:add(array("Marker Info reset"))
        
    }
    
}elseif(Shotgun_L & minquota() > Quota){
                   
    R1 = random(0,L1[1,number])
    R2 = random(0,L2[1,number])
    RandL = randint(1,L:count())

    while(X+1 <= L1:count()){
    
        if(R1 > L1[X+1,number] & R1 < L1[X+2,number]){
            
            RandL1 = X
            
        }
        if(R2 > L2[X+1,number] & R2 < L2[X+2,number]){
            
            RandL2 = X
            
        }
        
        X++
        
    }
    
    X = 1
    
    if(!L:count()){
        
        TempVariable = 0
        
    }
    
    if(!TempVariable){
        
        RandL2 = RandL
        
    }
        
    if(TempVariable & Loc[L[RandL2,number]+5,array]:count()){
        
        Pool = Loc[L[RandL2,number]+5,array]
        
    }elseif(TempVariable){
        
        Print = Print:add(array("No types to spawn at this location"))
        Pool = array()
        
    }
    
    if(Pool:count()){
            
        RandT = randint(1,Pool:count())
        RandM = (randint(1,(MDL[Pool[RandT,number]*2,table]:count())/S)*S)+F 
    
        Failsafe = ID+1
        
        if(L:count()){
            
            Angle = Loc[L[RandL2,number]-2,number]
            AngOffset = ang(0,Angle,0):rotateAroundAxis(vec(0,0,1),MDL[Pool[RandT,number]*2,table][RandM,vector]:z())
            Eye = Loc[L[RandL2,number]-3,vector]+(vec(0,Loc[L[RandL2,number],number],-Up+1):rotateAroundAxis(vec(0,0,1),Angle))
            Pos = Eye + (vec(0,(modelLength(MDL[Pool[RandT,number]*2,table][RandM-1,string])-MDL[Pool[RandT,number]*2,table][RandM,vector]:x())/2,0):rotateAroundAxis(vec(0,0,1),Angle))
            
            
        }else{
            
            Angle = round((owner():eyeAngles():yaw()-90)/45)*45
            AngOffset = ang(0,Angle,0):rotateAroundAxis(vec(0,0,1),MDL[Pool[RandT,number]*2,table][RandM,vector]:z())
            Eye = owner():aimPos()
            Pos = Eye
        
        }
         
        Spawned[toString(Failsafe-1),number] = L[RandL2,number]
        ID = ID + propCanCreate()*2
        Spawned[toString(Failsafe),entity] = propSpawn(MDL[Pool[RandT,number]*2,table][RandM-1,string],Pos+vec(0,MDL[Pool[RandT,number]*2,table][RandM,vector]:x()/2,Up + MDL[Pool[RandT,number]*2,table][RandM,vector]:y()):rotateAroundAxis(vec(0,0,1),Angle),AngOffset,1)
        noCollideAll(Spawned[toString(Failsafe),entity],1)
        Spawned[toString(Failsafe),entity]:setMass(19047)
        ID = ID + propCanCreate()
        Spawned[toString(Failsafe+1),entity] = propSpawn("models/magtrains/freightbogey2.mdl",Pos+vec(0,MDL[Pool[RandT,number]*2,table][RandM,vector]:x(),Up):rotateAroundAxis(vec(0,0,1),Angle),ang(0,Angle,0),1)
        Spawned[toString(Failsafe+1),entity]:setMass(6394)
        ID = ID + propCanCreate()
        Spawned[toString(Failsafe+2),entity] = propSpawn("models/magtrains/freightbogey2.mdl",Pos+vec(0,0,Up):rotateAroundAxis(vec(0,0,1),Angle),ang(0,Angle,0),1)  
        Spawned[toString(Failsafe+2),entity]:setMass(6394)
            
            
        
        if(ID < Failsafe+3 | carLength(Spawned[toString(Failsafe),entity]) + Loc[L[RandL2,number],number] > Loc[L[RandL2,number]-1,number] & L:count()){
            
            if(carLength(Spawned[toString(Failsafe),entity]) + Loc[L[RandL2,number],number] > Loc[L[RandL2,number]-1,number] & L:count()){
                
                Print = Print:add(array("Track has reached max capacity with " + round((Loc[L[RandL2,number]-1,number]-Loc[L[RandL2,number],number])) + " inches remaining."))
                #Shotgun_L--
                
            }

            Spawned[toString(Failsafe),entity]:propDelete()
            Spawned[toString(Failsafe+1),entity]:propDelete()
            Spawned[toString(Failsafe+2),entity]:propDelete()
            
            Spawned:remove(toString(Failsafe+2))
            Spawned:remove(toString(Failsafe+1))
            Spawned:remove(toString(Failsafe))
            Spawned:remove(toString(Failsafe-1))
            
            ID = Failsafe-1
            
        }else{
        
            ToTrack = ToTrack:add(array(Spawned[toString(Failsafe),entity]))
            
            while(X <= MDL[Pool[RandT,number]*2,table][RandM+5,array]:count()){
                 
                Spawned[toString(Failsafe),entity]:setBodygroup(MDL[Pool[RandT,number]*2,table][RandM+5,array][X,vector]:x(),randint(MDL[Pool[RandT,number]*2,table][RandM+5,array][X,vector]:y(),MDL[Pool[RandT,number]*2,table][RandM+5,array][X,vector]:z()))
                X++
                
            }
            X = 1
            
            if(Sortype:count()){
                
                sortypeToC(Spawned[toString(Failsafe),entity])  
                
            }
            
            if(C:count()){
                
                createMarker(Spawned[toString(Failsafe),entity],Spawned[toString(Failsafe),entity]:pos() + vec(0,0,225),ang(0,0,180),toRGB(MarkColors[C[randint(C:count(),1),number],vector]),MarkerType)
                Cars = Cars:add(array(Spawned[toString(Failsafe),entity]:id(),HL))
                
            }
        
            if(L:count() & Spawned[toString(Failsafe+2),entity]:massCenter():distance(Spawned[toString(Loc[L[RandL2,number]+1,array][Loc[L[RandL2,number]+1,array]:count(),number]-2),entity]:massCenter()) < 400){
        
                RID++
                rope(RID,Spawned[toString(Failsafe+2),entity],Spawned[toString(Failsafe+2),entity]:massCenterL(),Spawned[toString(Loc[L[RandL2,number]+1,array][Loc[L[RandL2,number]+1,array]:count(),number]-2),entity],Spawned[toString(Loc[L[RandL2,number]+1,array][Loc[L[RandL2,number]+1,array]:count(),number]-2),entity]:massCenterL(),0,0,"xx",1)
        
            }
        
            Loc[L[RandL2,number]+1,array] = Loc[L[RandL2,number]+1,array]:add(array(ID))
        
            W = randint(1,WeatheringPresets:count()/7)*7
            
            while(X <= MDL[Pool[RandT,number]*2,table][RandM+1,array]:count()/2){
                 
                Spawned[toString(Failsafe),entity]:setSubMaterial(MDL[Pool[RandT,number]*2,table][RandM+1,array][X*2,number],WeatheringPresets[W-(7-MDL[Pool[RandT,number]*2,table][RandM+1,array][X*2-1,number]),string])
                X++
                
            }
            
            X = 1
            
            Spawned[toString(Failsafe+1),entity]:setSubMaterial(1,"models/proppertextures/wheel")
            Spawned[toString(Failsafe+1),entity]:setSubMaterial(2,"models/proppertextures/wheel")
            Spawned[toString(Failsafe+1),entity]:setSubMaterial(3,"models/props_gulch/tinycars/tc_darkgray")
            Spawned[toString(Failsafe+1),entity]:propPhysicalMaterial("friction_00")
            
            Spawned[toString(Failsafe+2),entity]:setSubMaterial(1,"models/proppertextures/wheel")
            Spawned[toString(Failsafe+2),entity]:setSubMaterial(2,"models/proppertextures/wheel")
            Spawned[toString(Failsafe+2),entity]:setSubMaterial(3,"models/props_gulch/tinycars/tc_darkgray")
            Spawned[toString(Failsafe+2),entity]:propPhysicalMaterial("friction_00")
            
            Spawned[toString(Failsafe),entity]:setColor(randtoRGB(MDL[Pool[RandT,number]*2,table][RandM+2,vector],MDL[Pool[RandT,number]*2,table][RandM+3,vector]))
            #Spawned[toString(Failsafe),entity]:setColor(toRGB(MarkColors[(ID-1)/4,vector]))
            
            
            
            Spawned[toString(Failsafe),entity]:setSkin(randint(MDL[Pool[RandT,number]*2,table][RandM+4,vector2]:x(),MDL[Pool[RandT,number]*2,table][RandM+4,vector2]:y()))
            
            axis(Spawned[toString(Failsafe+1),entity],Spawned[toString(Failsafe+1),entity]:massCenterL(),Spawned[toString(Failsafe),entity],Spawned[toString(Failsafe),entity]:toLocal(Spawned[toString(Failsafe+1),entity]:massCenter()),0,vec(0,0,1))
            axis(Spawned[toString(Failsafe+2),entity],Spawned[toString(Failsafe+2),entity]:massCenterL(),Spawned[toString(Failsafe),entity],Spawned[toString(Failsafe),entity]:toLocal(Spawned[toString(Failsafe+2),entity]:massCenter()),0,vec(0,0,1))
            
            Loc[L[RandL2,number],number] = Loc[L[RandL2,number],number] + carLength(Spawned[toString(Failsafe),entity])
            
            posUpdate()
            
            Shotgun_L--
            
        }
        
    }elseif(Loc[L[RandL2,number]+5,array]:count()){
    
        Print = Print:add(array("No type selected!"))
        Shotgun_L = 0
        
    }

}elseif(Shotgun_R & minquota() > Quota){
    
    if(L:count() == 1){

        while(!Spawned:exists(toString(Loc[L[RandL,number]+1,array][Loc[L[RandL,number]+1,array]:count(),number]-4)) & Loc[L[RandL,number]+1,array]:count() > 0){
            
            Loc[L[RandL,number]+1,array]:remove(Loc[L[RandL,number]+1,array]:count())
            
        }
        
        A = Loc[L[RandL,number]+1,array][Loc[L[RandL,number]+1,array]:count(),number]
        
    }elseif(L:count() == 0){
    
    
        while(!Spawned:exists(toString(ID-4)) & ID > 5){
            
            ID = clamp(ID - 4,1,9^9^9)
            
        }
            
        A = ID 
        
    }else{
    
        Print = Print:add(array("Switch the Location selector to 0 or a specific siding"))
        Shotgun_R = 1
        
    }
    
    if(Spawned[toString(A-4),number] & Spawned[toString(A-3),entity]:isValid()){
        
        Loc[Spawned[toString(A-4),number],number] = Loc[Spawned[toString(A-4),number],number] - carLength(Spawned[toString(A-3),entity])
        
    }
    
    Loc[Spawned[toString(A-4),number]+1,array]:remove(Loc[Spawned[toString(A-4),number]+1,array]:count())
    
    #Print = Print:add(array(Spawned[toString(A-3),entity]:model()))
    
    Spawned[toString(A-1),entity]:propDelete()
    Spawned[toString(A-2),entity]:propDelete()
    Spawned[toString(A-3),entity]:propDelete()
    Spawned:remove(toString(A-1))
    Spawned:remove(toString(A-2))
    Spawned:remove(toString(A-3))
    Spawned:remove(toString(A-4))
    Shotgun_R--
    
    if(A == ID){
        
        ID = clamp(ID - 4,1,9^9^9)
        
    }
    
    posUpdate()       
        
}elseif(Temp & minquota() > Quota){
   
    switch(Case2){
        
        case(1),
        
            while(X <= Cars:count()/2 & minquota() > Quota){
                
                if(Pistol_R[1,entity]:id() == Cars[X*2-1,number]){
                    
                    if(holoEntity(Cars[X*2,number]):getAlpha() == 255){
                        
                        Alpha = 5
                        
                    }else{
                    
                        Alpha = 255
                        
                    }
                    
                    X = Cars:count()/2
                    
                } 
                    
                X++
                
            }
            
            if(X > Cars:count()/2){
                
                X = 1
                Case2++
                
            }
        
        break
        case(2),
        
            while(X <= Temp & minquota() > Quota){
        
                if(Pistol_R[Y,entity]:model():find("bogey") | !Pistol_R[Y,entity]:isValidPhysics()){
                    
                   Pistol_R:remove(Y) 
                    
                }else{
                
                    Y++
                
                }
                    
                X++
                
            }
            
            if(X > Temp){
                
                X = 1
                Y = 1
                Case2++
                
            }
            
        break,
        case(3),
            
            while(X <= Pistol_R:count() & minquota() > Quota){
            
                while(Y <= Cars:count()/2 & minquota() > Quota){
                    
                    if(Cars[Y*2-1,number] == Pistol_R[X,entity]:id()){
                        
                        holoAlpha(Cars[Y*2,number],Alpha)
                        Y = Cars:count()/2
                            
                    }   
                    
                    Y++
                    
                } 
                
                if(Y > Cars:count()/2){
                    
                    X++
                    Y = 1
                    
                }
                
            }
            
            if(X > Pistol_R:count()){
                
                Case2 = 1
                X = 1
                Temp = 0
                
            }
            
        break,
            
    }
    
}
