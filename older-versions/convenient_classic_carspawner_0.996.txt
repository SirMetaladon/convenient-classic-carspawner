@name Convenient Classic Carspawner 0.996

#Set your default gauge here. This also changes the spawn-head model.

@model models/magtrains/trucks/barber_s2_rsg.mdl
#@model models/magtrains/trucks/barber_s2_phx.mdl
#@model models/joe/bogies/2ft_2.mdl

#Constants (cannot be changed after the first iteration)
@persist QUOTA HIDE_CHAT SAFE_MODE PRINTING_DETAIL LOAD_IMPACT WEIGHT_MULTIPLIER LOADED_CHANCE ENTRIES_PER_MODEL VARIANCE_EXPONENT #Numbers
@persist ENTRIES_PER_WEATHERING DRAWBAR_LENGTH FOLLOW_RAILS AIRBORNE_MODE SCANNER_VISIBLE SNAP_TO_RAILS NO_TF2_CARS LIMIT_CAR_LENGTH #Numbers
@persist COLOR_SPEED DISPLAY_TAGS BLOCK_STACK_SIZE FIVE_FOOT_ENABLED BLOCK_END_CHANCE BLOCK_LENGTH_LIMIT SCAN_INTERVAL RAILHEAD_EXTRA_HEIGHT #Numbers
@persist [MODELS TAG_DATA DEFAULT_TAGS BOGIES NUDGE]:table [WEATHERING COLORS BLOCK_TYPES TAG_OVERRIDES]:array [TEXT_COLOR]:vector2 [VERSION]:string 

#Normal Variables
@persist LockInAngle PreviousVerticalOffset OldRailhead Railhead ScannerSpeed CCCHue ScanDistance NewModelEntriesToProcess #Numbers
@persist TagPrinterGroups TagPrinterItems TagsPrinting TotalTrainLength TotalTrainWeight BlockSameInARow MDLTagIterator TotalTagGroups #Numbers
@persist ParserCommasIterator ParserSpacesIterator ParserTagGroupsIterator ParserTagItemsIterator ParserPhase NoDef MdlTag #Numbers 
@persist ValidAdditionalModels OperationsArmingSwitch CarSlopeAngle SoundID HoloID RopeID SpacerFtLength Flipping_Direction #Numbers
@persist ParserFlag PreviousTagCount DelayInterlock GaugeDistance SpawnPhase DistToPreviousBogie TagCount CarIsLoaded CarLengthLimit #Numbers
@persist [CarPreviouslySeen TagsInGroup ForceUseThisBogie GaugeMode DonezoString SpecialInstructionSet ScanPhase]:string
@persist [ParserLocatedTags SpawningInstruction MainCommandQueue BogieData AddModels ScanPointsTable SearchArchive Props MDLTable CopySkin]:table
@persist [PrinterStack CarModelIDs BlockedCarBuffer BlockCurrentType TagKeysPruned CommandArchive CarEntityArray AnchorPoints]:array  
@persist [SpawnHeadEntity ScanProp]:entity 
@persist [LockInPosition SCEndPos ScanLastPosition SlopeAxis]:vector
@persist [MainLoop CommandLoop]:function

#Outputs (for debugging)
@outputs ParserCommasIterator ParserSpacesIterator ParserTagGroupsIterator ParserTagItemsIterator NewModelEntriesToProcess TotalTrainLength
@outputs [CurrentTopCommand Break]:string ScanProp:entity SpawnHeadEntity:entity SearchArchive:table SpawnPhase DistToPreviousBogie ScanDistance ModelIDToSpawn ParserPhase

#[
  ___________           
 |  _______  |  
 |_| _____ |_|                        _            _       
    /  __ \                          (_)          | |      
    | /  \/ ___  _ ____   _____ _ __  _  ___ _ __ | |_     
    | |    / _ \| '_ \ \ / / _ \ '_ \| |/ _ \ '_ \| __|    
    | \__/\ (_) | | | \ V /  __/ | | | |  __/ | | | |_                                                     
     \____/____/|_| |_|\_/ \___|_| |_|_|\___|_| |_|\__|      
    /  __ \ |             (_)                    
    | /  \/ | __ _ ___ ___ _  ___                
    | |   | |/ _` / __/ __| |/ __|               
    | \__/\ | (_| \__ \__ \ | (__                
     \____/_|\__,_|___/___/_|\___|                                                                                                                                        
    /  __ \                                                  
    | /  \/ __ _ _ __ ___ _ __   __ ___      ___ __   ___ _ __ 
    | |    / _` | '__/ __| '_ \ / _` \ \ /\ / / '_ \ / _ \ '__|
    | \__/\ (_| | |  \__ \ |_) | (_| |\ V  V /| | | |  __/ |   
  _  \____/\__,_|_|  |___/ .__/ \__,_| \_/\_/ |_| |_|\___|_|   
 | |_______| |           | |                                   
 |___________|           |_|                                   
           
Welcome to the Convenient, Classic Carspawner! This E2 is the next generation in car spawning technologies, allowing the user to 
spawn many styles of train, pre-detailed, and in an intuitive manner. It's also open-source and modification-friendly.

Type ".help" in chat for a guide on how to use the E2. It will show you through all you need to know on running this E2.

Made by Metaladon: https://steamcommunity.com/profiles/76561198077247660/

]#

if(dupefinished()){reset()}

if(first()){
    
    #Here's some settings for those who are so inclined:
    
    WEIGHT_MULTIPLIER = 0.5 #Controls average car weight. 0.5 would make that 50 tons, and 2 would make it 200 tons. Default is 1 (averaging 100 tons).
    
    LOADED_CHANCE = 0.6 #Chance the car will be loaded (heavier). Default is 0.6, or 60% chance, since railroads often re-load cars on the return trip. Default is 0.6.
    
    LOAD_IMPACT = 0.5 #What quantity of total weight of the car is determined by the load. Lower values mean less overal variance between loaded and unloaded cars. Default is 0.5.
    
    PRINTING_DETAIL = 2 #If 0, the E2 will not output any messages. 1 is only high-importance messages, and 2 is all messages. Default is 2.

    DISPLAY_TAGS = 0 #If 1, the system will display tags after it finishes searching. Default is 0.
    
    SCANNER_VISIBLE = 0 #If 1, the scanner bogie is visible when scanning. Default is 0.
    
    SAFE_MODE = 0 #If 1, all processes will be limited by perf(), which is more stable on servers with a low tick quota but will also make the E2 significantly slower. Default is 0.
    
    FOLLOW_RAILS = 1 #If 0, the system will spawn cars in a straight line with no collision checks. If 1, the system will follow the rails check for valid placement. Default is 1.
    
    BLOCK_STACK_SIZE = 15 #This var controls how much cars of the same type clump together. Higher values means more, longer strings of the same car type. Default is 15.
    
    DRAWBAR_LENGTH = 0 #Extra slack let out between cars. Can lead to a bumpy ride, but increases realism. Default is 0, suggested is 10 (inches).
    
    NO_TF2_CARS = 0 #Remove TF2 cars from the pool. For those who dislike them. 1 removes the cars. Default is 0.
    
    LIMIT_CAR_LENGTH = 0 #If 1, removes the longest cars that behave poorly on maps like SSG2. Default is 0.
    
    RAILHEAD_EXTRA_HEIGHT = 3 #How much higher off the rails do you want the car to spawn to avoid banked curves? Default is 2, but I jacked it up to 3.
    
    Flipping_Direction = 0 #Which direction do you want the system to face cars? 0 for Random, 1 for one way, -1 for other way. Default is 0.
    
    #[Here's where you add your own custom cars, if you feel like it.
    
    Key:
    
    1: Model Name (the full path)
    2: Weighted chance to spawn (5 is uncommon, 100 will spawn in droves)
    3: Tags (typically having a country, type, load status, kind, manifest/unitfreight, detail level, modeler, era(s), and bogie type)
    4: Car placement data
     4a: Length from bogie mount to bogie mount (in inches)
     4b: Vertical offset (from the 0 point of the chosen bogie)
     4c: Rotation offset (for cars like Grove's that spawn 90 degrees rotated)
     4d: Extra coupler space (in inches)
    5: Submaterials (numbers are paired, the first number in the pair determines what mat to apply, and the second determines what ID to apply to)
     1st Submat number is laid out like this:
     1: Main
     2: Secondary
     3: Frame
     4: Wood (for flatcars)
     5: Black (for roofing)
     6: Shiny (for roofing)
     7: Coal (for coal cars)
     8: Reflector (for tankers)
    6: Coloration (each slot determines the # chance for that color to be used on the car)
     Colors are laid out like this:
     1: Red
     2: Orange
     3: White
     4: Yellow
     5: Green
     6: Blue
     7: Black
     8: Gray
     9: Aluminum (for unpainted aluminum hoppers)
     10: Wood (for early wooden cars)
     11: Tuscan (unique from red with less saturation)
     12: PC Green (unique to PC cars)
     13: NSW Brown (for NSW cars)
     14: Ore Pink (for pink Ore cars)
    7: Skin (2 numbers for maximum and minimum skin value)
    8: Bodygroups (array containing vectors, each vector randomises 1 bodygroup)
     8a: What bodygroup ID to change
     8b: Minimum value
     8c: Maximum value
    9: Weight (in tons)
    
    ]#
    
    #Add cars here!
    AddModels = table(
    
        "models/magtrains/boxcar_50.mdl",5,"usamerican general_boxcar_nonhigh invisiload manifest hdetail mow magnum 1970s 1980s 1990s 2000s 2010s 2020s",
        vec4(224*2,0,0,0),array(1,5,2,7,3,1),array(3,2,1,10,2,4,1,2,0,0,25),vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),100
        
    )
    
    #Beyond this point is internal variables and systems, modification isn't guarenteed to work correctly.
    
    DEFAULT_TAGS = table(
    
        array("manifest"), #Type of car
        array("1980s"), #Era of car
        array(), #Who made it
        array(), #Detail level
        array("usamerican"), #Country
        array()
        
    )
    
    #Override tag types; use these to ignore everything from a certain category.
    
    TAG_OVERRIDES = array(
    
        "anytype",
        "anytime",
        "anyone",
        "anydetail",
        "anywhere"
        
    )
    
    #Color preset ranges, in HSL

    COLORS = array(    
        
        vec(-2.5,0.6,0.25),vec(8,0.1,0.02), #RED 1 
        vec(18,0.6,0.35),vec(28,0.1,0.05), #ORANGE 2 
        vec(-2.5,0.1,0.8),vec(240,0.1,0.15), #WHITE 3 
        vec(42.5,0.62,0.47),vec(47.5,0.06,0.03), #YELLOW 4
        vec(75,0.35,0.3),vec(125,0.1,0.05), #GREEN 5  
        vec(190,0.35,0.3),vec(230,0.15,0.1),  #BLUE 6 
        vec(-2.5,0.02,0.17),vec(47.5,0.02,0.03), #BLACK 7 
        vec(-2.5,0.02,0.4),vec(47.5,0.02,0.1), #GREY - 8
        vec(40,0.1,0.4),vec(55,0.025,0.125), #ALUMINUM - 9
        vec(-2.5,0.25,0.35),vec(30,0.15,0.05), #WOOD - 10
        vec(-2.5,0.3,0.3),vec(10,0.1,0.02), #TUSCAN - 11
        vec(155,0.33,0.36),vec(160,0.03,0), #PC GREEN - 12
        vec(15,0.25,0.27),vec(20,0.1,0.02), #NSW BROWN - 13
        vec(-2,0.25,0.45),vec(2,0.08,0.03) #ORE PINK - 14
        
    )
    
    #Tag Attributes
    
    TAG_DATA = table(
        
        #Type of Car
        array("general_boxcar_highcube","appliance_boxcar_highcube","autoparts_boxcar_highcube","general_boxcar_nonhigh", 
            "scrap_gondola","woodchips_gondola","hematite_ore_gondola","magnetite_ore_gondola","generic_ore_gondola","general_gondola","steel_gondola","water_tanker",
            "coal_gondola","sand_gondola","tie_gondola","gravel_gondola","trash_gondola","cement_gondola","wood_gondola","pulp_gondola",
            "general_tanker","ethanol_tanker","lpg_tanker","chemical_tanker","oil_tanker","slab_flatcar","military_flatcar",
            "coal_hopper","grain_hopper","cement_hopper","aggregate_hopper","generic_ore_hopper","taconite_ore_hopper","gravel_hopper","sand_hopper","dolomite_hopper","potash_hopper",
            "airslide_hopper_sugar","airslide_hopper_flour","pressuredifferentialpd_hopper_flour","pressuredifferentialpd_hopper_clay",
            "log_flatcar","wood_flatcar","general_flatcar","heavy_flatcar","general_flatcar_bulkhead","trash_flatcar","tofc_flatcar","steel_flatcar","container_flatcar","coilcar","bulkhead_flatcar_wood","steel_flatcar_bulkhead",
            "centerbeam_flatcar_wood","centerbeam_flatcar_steel","centerbeam_flatcar_frames","centerbeam_flatcar_ties",
            "intermodal_wellcar_40ft","intermodal_wellcar_48ft","intermodal_wellcar_53ft","icereeferrefridgerator","coke_hopper","coke_gondola","limestone_hopper",
            "trilevel_open_autorack","bilevel_open_autorack","bilevel_closed_autorack","paper_boxcar_highcube","slag","hotmetalcar",
            "anytype","caboose","stock","sulfur_gondola","mechanicalreeferrefridgerator","insulated_boxcar_nonhigh","coilcar","mow_gondola",
            "manifest","mow","buffer","freight","dummy","caboose","testing","passenger","new","whale","wellzilla"), 
            
        #Era of Car
        array("2020s","2010s","2000s","1990s","1980s","1970s","1960s","1950s","1940s","1930s","1920s","1910s","1900s","preera","anytime","new"),
        
        #Who made it?
        array("metaladon","gsgrove","magnum","union","joeconqueror","monkatraz","goomz","zexciv","daylight","jazzie","anyone991","anyone","spdaylight","laz","priority","parkman",
        "akandr","hanksabutt","reverendv92","linnie","westausman98","titus","armystuntman","bobster","toastur","seaboard","snowy","sparks","phantomone"),
        
        #Detail Level
        array("hdetail","mdetail","ldetail","anydetail","sdetail","mstsports","tf2"),
        
        #Locale of Car
        array("usamerican","ussrussian","european","anywhere","nswaustralianz","britishuk","new","nldutch","jpjapanese","unitfreight"),
        
        #Load Tags
        array("empty","loaded","invisiload")
        
    )
    
    #Block types, these will be collected together by the Blocking system.
    
    BLOCK_TYPES = array(
    
        "scrap_gondola general_gondola steel general_flatcar_bulkhead coilcar",
        "wellcar tofc container",
        "autorack",
        "log_flatcar woodchip",
        "aggregate gravel sand",
        "flour sugar",
        "cement clay",
        "lpg chemical",
        "trash",
        "general_boxcar",
        "reefer insulated",
        "wood"
        
    )
    
    Coal_Texture="models/magtrains/coal"
    Reflector_Clean_Texture = "models/proppertextures/acrylic2_gold_lw"
    Reflector_Dirty_Texture = "models/props_gulch/tinycars/tc_gold"
    Aluminum_Clean_Texture = "models/proppertextures/aluminum"
    Aluminum_Dirty_Texture = "icegt/loco/ice_trainmetal_darkgrey"
    
    #Weathering presets, in order from least to most weathered
    
    WEATHERING = array(
        
        "models/proppertextures/acrylic","models/proppertextures/acrylic_metal1","models/proppertextures/enamel_black","phoenix_storms/wood_dome",
        "models/proppertextures/acrylic_black",Aluminum_Clean_Texture,Coal_Texture,Reflector_Clean_Texture,
        "models/proppertextures/acrylic2","models/proppertextures/acrylic2_metal1","models/proppertextures/enamel2_black","phoenix_storms/wood_dome",
        "models/proppertextures/acrylic2_black",Aluminum_Clean_Texture,Coal_Texture,Reflector_Clean_Texture,
        "models/proppertextures/acrylic2_lw","models/proppertextures/acrylic2_metal1_lw","models/proppertextures/enamel2_black_lw","phoenix_storms/wood_dome",
        "models/proppertextures/acrylic2_black_lw",Aluminum_Clean_Texture,Coal_Texture,Reflector_Clean_Texture,
        
        "wtp/paint_2","sprops/textures/sprops_metal5","models/proppertextures/enamel_black","phoenix_storms/wood_dome",
        "models/proppertextures/acrylic_black",Aluminum_Clean_Texture,Coal_Texture,Reflector_Clean_Texture,
        
        
        "models/proppertextures/acrylic2_hw","models/proppertextures/acrylic2_metal1_hw","models/proppertextures/enamel2_black_lw","phoenix_storms/wood_dome",
        "models/proppertextures/acrylic2_black_hw",Aluminum_Dirty_Texture,Coal_Texture,Reflector_Dirty_Texture,
        
        "models/props_gulch/tinycars/tc_colorable","models/props_c17/metalladder001","models/proppertextures/enamel2_black_lw","phoenix_storms/wood_dome",
        "models/proppertextures/acrylic2_black_hw",Aluminum_Dirty_Texture,Coal_Texture,Reflector_Dirty_Texture       
    )
    
    ENTRIES_PER_WEATHERING = 8 #How many strings per preset
        
    VERSION = "0.996" #1.0 beta
    
    local RussianColor = array(1,2,3,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12)
    local OldBoxcarColor = array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,5,5,5,5,6,6,6,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12)
    local AggregateHopperColor = array(1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,12)
    local NormalGondolaColor = array(1,2,2,4,5,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,10,11,11,11,11,11,11,11,11,11,11,12,12)
    
    MODELS = table(

#usamerican - US Standard Gauge#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    #"anyone991"#================================================================================================================================================
        #BOXCAR
            "models/anytrains/rollingstock/freight/tf2/tf2_boxcar.mdl",2,"usamerican general_boxcar_nonhigh manifest invisiload mdetail tf2 anyone991 1930s 1940s 1950s 1960s 1970s 1980s tf2phx tf2rsg",vec4(308,-21,90,-3),array(2,3,3,5,2,7,1,8),OldBoxcarColor,vec2(0,0),array(vec(1,1,1)),70
            ,"models/anytrains/rollingstock/freight/tf2/tf2_boxcar_noladder.mdl",8,"usamerican general_boxcar_nonhigh manifest invisiload mdetail tf2 anyone991 1930s 1940s 1950s 1960s 1970s 1980s tf2phx tf2rsg",vec4(308,-21,90,-3),array(),array(),vec2(0,1),array(),70
        #GONDOLA
            ,"models/anytrains/rollingstock/freight/tf2/tf2_orecar.mdl",1,"usamerican gravel_gondola manifest loaded mdetail tf2 anyone991 1950s 1960s 1970s 1980s 1990s tf2phx tf2rsg",vec4(376,-21,90,-3),array(),array(),vec2(0,1),array(vec(3,1,1)),70
            ,"models/anytrains/rollingstock/freight/tf2/tf2_orecar.mdl",2,"usamerican coal_gondola manifest loaded mdetail tf2 anyone991 1950s 1960s 1970s 1980s 1990s tf2phx tf2rsg",vec4(376,-21,90,-3),array(),array(),vec2(0,1),array(vec(3,2,2)),70
            ,"models/anytrains/rollingstock/freight/tf2/tf2_orecar.mdl",3,"usamerican coal_gondola gravel_gondola manifest empty mdetail tf2 anyone991 1950s 1960s 1970s 1980s 1990s tf2phx tf2rsg",vec4(376,-21,90,-3),array(),array(),vec2(0,1),array(),70
        #HOPPER
            ,"models/anytrains/rollingstock/freight/fict/tlr_hopper.mdl",15,"usamerican coal_hopper empty manifest mdetail anyone991 preera 1900s 1910s magphx magrsg",vec4(298,-18,0,0),array(3,2,3,6,2,7,7,8),array(8),vec2(0,0),array(),40
            ,"models/anytrains/rollingstock/freight/fict/tlr_hopper.mdl",15,"usamerican coal_hopper loaded manifest mdetail anyone991 preera 1900s 1910s magphx magrsg",vec4(298,-18,0,0),array(3,2,3,6,2,7,7,8),array(8),vec2(0,0),array(vec(4,1,1)),40
        #TANKER
            ,"models/anytrains/rollingstock/freight/tf2/tf2_tankcar.mdl",0.5,"usamerican general_tanker manifest invisiload mdetail tf2 anyone991 1960s 1970s 1980s 1990s tf2phx tf2rsg",vec4(308,-21,90,-3),array(),array(),vec2(0,1),array(),70

    #"botz"#====================================================================================================================================================
        #FLATBED
            ,"models/botzmpak/rollingstock/nyct_flatcar.mdl",1,"usamerican general_gondola gravel_gondola empty mow hdetail botz 1950s 1960s 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(472,-29,90,0),array(3,1,1,2,2,6),array(4),vec2(0,0),array(),50

    #"daylight"#================================================================================================================================================
        #CABOOSE
            ,"models/daylight/ca_1_caboose.mdl",5,"usamerican caboose hdetail daylight 1910s 1920s 1930s 1940s 1950s 1960s magphx magrsg",vec4(226,-18,0,0),array(3,1,3,4,2,5,5,6),array(10,11,11,11,11,11,11),vec2(0,0),array(),10
        #REEFER
            ,"models/daylight/woodreefer.mdl",20,"usamerican icereeferrefridgerator invisiload manifest mdetail daylight 1910s 1920s 1930s 1940s 1950s magphx magrsg",vec4(326,0,0,0),array(3,5,2,3,2,4),array(2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(),50
        #TANKER
            ,"models/daylight/ll_tankcar.mdl",6,"usamerican chemical_tanker general_tanker invisiload mow manifest hdetail daylight 1920s 1930s 1940s magphx magrsg",vec4(296,-6,90,0),array(1,1,3,3,2,4),array(3,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8),vec2(0,0),array(),50

    #"flumz" / "fox"#===========================================================================================================================================
        #BOXCAR
            ,"models/fox/socker_bopper.mdl",1,"usamerican grain_hopper cement_hopper general_boxcar manifest invisiload hdetail fox 1980s 1990s magphx magrsg",vec4(516,-3,90,0),array(1,1,3,4,2,7,2,8),array(9),vec2(0,0),array(),100
        #CABOOSE
            ,"models/flumz/nkp_baywindow.mdl",20,"usamerican caboose hdetail fox 1950s 1960s 1970s 1980s 1990s functional archrsg magphx magphx magrsg",vec4(289,3,90,0),array(6,1,6,2,5,5,1,6,3,7,2,8,6,9,8,10,3,11,2,12,2,14,3,15,5,16,5,18,6,20,6,21),array(1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,4,4,4,4,4,5,5,5,5,6,6,6,6,6,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,11,11,11,11,11,11,12,12,12,12,13,13,13,13,13,13),vec2(0,0),array(vec(2,0,1)),24

    #"goomz"#===================================================================================================================================================
        #GONDOLA
            ,"models/goomzmodels/rollingstock/gondola52.mdl",9,"usamerican general_gondola scrap_gondola woodchips_gondola gravel_gondola steel_gondola empty manifest mow hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(13,0,10)),100
            ,"models/goomzmodels/rollingstock/gondola52.mdl",3,"usamerican scrap_gondola loaded manifest mow hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(13,0,10),vec(12,4,4)),100
            ,"models/goomzmodels/rollingstock/gondola52.mdl",1,"usamerican gravel_gondola loaded manifest mow hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(13,0,10),vec(12,5,5)),100
            ,"models/goomzmodels/rollingstock/gondola52.mdl",4,"usamerican steel_gondola loaded manifest mow hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(13,0,10),vec(12,2,3)),100
            ,"models/goomzmodels/rollingstock/gondola52.mdl",1,"usamerican general_gondola loaded manifest mow hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(13,0,10),vec(12,7,7)),100
            ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",0.5,"usamerican sand_gondola loaded manifest hdetail goomz 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(4,0,1),vec(5,5,5)),100
            ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",0.5,"usamerican woodchips_gondola loaded manifest hdetail goomz 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(4,0,1),vec(5,3,3)),100
            ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",1.5,"usamerican gravel_gondola loaded manifest mow hdetail goomz 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(4,0,1),vec(5,4,4)),100
            ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",12,"usamerican general_gondola scrap_gondola woodchips_gondola gravel_gondola sand_gondola steel_gondola empty manifest mow hdetail goomz 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(4,0,1),vec(3,0,10)),100
            ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",3.5,"usamerican scrap_gondola loaded manifest hdetail goomz 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(4,0,1),vec(5,1,2)),100
            ,"models/goomzmodels/rollingstock/goomz_gondola1.mdl",6,"usamerican steel_gondola loaded manifest hdetail goomz 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(706,29,0,0),array(1,1,3,2,2,3,2,6,3,7),NormalGondolaColor,vec2(0,0),array(vec(4,0,1),vec(5,6,9)),100
        #HOPPER            
            ,"models/goomzmodels/rollingstock/bethlehem3bay4000.mdl",20,"usamerican coal_hopper coke_hopper aggregate_hopper limestone_hopper empty unitfreight sdetail goomz 1960s 1970s 1980s 1990s 2000s magphx magrsg",vec4(430,-14,0,0),array(1,17,3,22),array(7),vec2(0,0),array(vec(1,0,15)),100
            ,"models/goomzmodels/rollingstock/bethlehem3bay4000.mdl",10,"usamerican coal_hopper loaded unitfreight sdetail goomz 1960s 1970s 1980s 1990s 2000s magphx magrsg",vec4(430,-14,0,0),array(1,17,3,22),array(7),vec2(0,0),array(vec(1,0,15),vec(0,1,1)),100
            ,"models/goomzmodels/rollingstock/bethlehem3bay4000.mdl",4,"usamerican limestone_hopper loaded unitfreight sdetail goomz 1960s 1970s 1980s 1990s 2000s magphx magrsg",vec4(430,-14,0,0),array(1,17,3,22),array(7),vec2(0,0),array(vec(1,0,15),vec(0,3,3)),100
            ,"models/goomzmodels/rollingstock/bethlehem3bay4000.mdl",1,"usamerican coke_hopper loaded unitfreight sdetail goomz 1960s 1970s 1980s 1990s 2000s magphx magrsg",vec4(430,-14,0,0),array(1,17,3,22),array(7),vec2(0,0),array(vec(1,0,15),vec(0,4,4)),100
            ,"models/goomzmodels/rollingstock/bethlehem3bay4000.mdl",5,"usamerican aggregate_hopper loaded unitfreight sdetail goomz 1960s 1970s 1980s 1990s 2000s magphx magrsg",vec4(430,-14,0,0),array(1,17,3,22),array(7),vec2(0,0),array(vec(1,0,15),vec(0,5,5)),100

    #"gsgrove"#================================================================================================================================================       
        #AUTORACK
            ,"models/gsgtrainprops/trains/rolling_stock/autorack_bilevel_enclosed.mdl",3,"usamerican bilevel_closed_autorack invisiload unitfreight sdetail mstsports gsgrove 1980s 1990s 2000s gsgphx33 gsgrsg33",vec4(804,-14,90,0),array(),array(),vec2(0,12),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/autorack_bilevel_semiopen.mdl",1,"usamerican bilevel_open_autorack empty unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx33 gsgrsg33",vec4(804,-14,90,0),array(),array(),vec2(0,2),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/autorack_bilevel_semiopen.mdl",1,"usamerican bilevel_open_autorack loaded unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx33 gsgrsg33",vec4(804,-14,90,0),array(),array(),vec2(0,2),array(vec(1,1,1)),100
            ,"models/gsgtrainprops/trains/rolling_stock/autorack_trilevel_semiopen.mdl",1,"usamerican trilevel_open_autorack empty unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx33 gsgrsg33",vec4(786,-14,90,0),array(),array(),vec2(0,3),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/autorack_trilevel_semiopen.mdl",1,"usamerican trilevel_open_autorack loaded unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx33 gsgrsg33",vec4(786,-14,90,0),array(),array(),vec2(0,3),array(vec(1,1,1)),100
        #BOXCAR
            ,"models/gsgtrainprops/trains/rolling_stock/boxcar_50ft_ps.mdl",50,"usamerican general_boxcar_nonhigh invisiload manifest sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(491,-16,90,0),array(),array(),vec2(0,12),array(),100
        #CABOOSE
            ,"models/gsgtrainprops/trains/rolling_stock/caboose_baywindow_acf.mdl",1,"usamerican caboose sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s gsgphxleaf gsgrsgleaf",vec4(286,-14,90,0),array(),array(),vec2(0,7),array(),30
            ,"models/gsgtrainprops/trains/rolling_stock/caboose_extvis_acf.mdl",1,"usamerican caboose sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s gsgphxleaf gsgrsgleaf",vec4(286,-14,90,0),array(),array(),vec2(0,0),array(),30
        #FLATBED
            ,"models/gsgtrainprops/trains/rolling_stock/flatcar_89ft_garbage.mdl",2,"usamerican trash_flatcar loaded manifest sdetail mstsports gsgrove 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(804,-14,90,0),array(),array(),vec2(0,2),array(vec(1,0,2)),90
        #GONDOLA
            ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",2,"usamerican steel_gondola loaded manifest mow sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s  gsgphx33 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,2),array(vec(1,2,2)),100
            ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",4,"usamerican scrap_gondola loaded manifest mow sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s  gsgphx33 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,2),array(vec(1,1,1)),100
            ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_nsc.mdl",6,"usamerican general_gondola scrap_gondola steel_gondola empty manifest mow sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s gsgphx33 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,2),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",2,"usamerican steel_gondola loaded manifest mow sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s gsgphx33 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,6),array(vec(1,2,2)),100
            ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",4,"usamerican scrap_gondola loaded manifest mow sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s gsgphx33 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,6),array(vec(1,1,1)),100
            ,"models/gsgtrainprops/trains/rolling_stock/gon_52ft_thrall.mdl",6,"usamerican general_gondola scrap_gondola steel_gondola empty manifest mow sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s gsgphx33 gsgrsg33",vec4(505,-14,90,0),array(),array(),vec2(0,6),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/bathtub_hs_sulfur.mdl",1,"usamerican sulfur_gondola empty unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx36 gsgrsg36",vec4(551,-16,90,0),array(),array(),vec2(0,3),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/bathtub_hs_sulfur.mdl",1,"usamerican sulfur_gondola loaded unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx36 gsgrsg36",vec4(551,-16,90,0),array(),array(),vec2(0,3),array(vec(1,1,1)),100
            ,"models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",4,"usamerican coal_gondola empty unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx36 gsgrsg36",vec4(551,-16,90,0),array(),array(),vec2(0,9),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/bathtub_hs_coal.mdl",4,"usamerican coal_gondola loaded unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx36 gsgrsg36",vec4(551,-16,90,0),array(),array(),vec2(0,9),array(vec(1,1,1)),100
            ,"models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",6,"usamerican coal_gondola empty unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx36 gsgrsg36",vec4(459,-16,90,0),array(),array(),vec2(0,23),array(vec(1,0,0)),100
            ,"models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl",6,"usamerican coal_gondola loaded unitfreight sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx36 gsgrsg36",vec4(459,-16,90,0),array(),array(),vec2(0,23),array(vec(1,1,1)),100
        #HOPPER
            ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_3800.mdl",4,"usamerican cement_hopper invisiload manifest sdetail mstsports gsgrove 1960s 1970s 1980s 1990s gsgphx33 gsgrsg33",vec4(509,-15,90,0),array(),array(),vec2(0,3),array(),70
            ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_acf_4600.mdl",15,"usamerican grain_hopper invisiload manifest buffer sdetail mstsports gsgrove 1970s 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(544,-15,90,0),array(),array(),vec2(0,25),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4100.mdl",5,"usamerican grain_hopper invisiload manifest sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx33 gsgrsg33",vec4(570,-15,90,0),array(),array(),vec2(0,1),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_grain_4550.mdl",5,"usamerican grain_hopper invisiload manifest buffer sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx33 gsgrsg33",vec4(560,-15,90,0),array(),array(),vec2(0,13),array(),100
            ,"models/gsgtrainprops/trains/rolling_stock/hopper_covered_potash_4550.mdl",5,"usamerican potash_hopper invisiload manifest sdetail mstsports gsgrove 1970s 1980s 1990s gsgphx36 gsgrsg36",vec4(560,-14,90,0),array(),array(),vec2(0,3),array(),100
    
    #"hanksabutt"#================================================================================================================================================
        #BOXCAR
            ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_fmc_doubledoor.mdl",30,"usamerican general_boxcar_nonhigh manifest invisiload sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(486,-17,90,0),array(),array(),vec2(0,4),array(),100
            ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_fmc_doubledoor_ribbed.mdl",20,"usamerican general_boxcar_nonhigh manifest invisiload sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(486,-17,90,0),array(),array(),vec2(0,1),array(),100
            ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_gunderson.mdl",30,"usamerican general_boxcar_highcube paper_boxcar_highcube appliance_boxcar_highcube manifest invisiload sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(492,-16,90,0),array(),array(),vec2(0,4),array(),130
            ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_pcf_plugdoor.mdl",8,"usamerican general_boxcar_nonhigh manifest invisiload sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(512,-4,90,0),array(),array(),vec2(0,0),array(),100
            ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_ps.mdl",10,"usamerican general_boxcar_nonhigh manifest invisiload sdetail mstsports hanksabutt 1960s 1970s 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(512,-15,90,0),array(),array(),vec2(0,6),array(),100
            ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_ps5574_dd.mdl",5,"usamerican general_boxcar_highcube manifest invisiload sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(474,-15,90,0),array(),array(),vec2(0,6),array(),100
            ,"models/hanksabutt/rollingstock/boxcars/boxcar_86ft_ps.mdl",20,"usamerican autoparts_boxcar_highcube invisiload unitfreight sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(776,-18,90,0),array(),array(),vec2(0,6),array(),100
        #FLATBED
            ,"models/hanksabutt/rollingstock/centerbeams/nsc_centerbeam.mdl",12,"usamerican centerbeam_flatcar_wood empty manifest sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(724,-18,90,0),array(),array(),vec2(0,11),array(),100
            ,"models/hanksabutt/rollingstock/centerbeams/nsc_centerbeam.mdl",12,"usamerican centerbeam_flatcar_wood loaded manifest sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(724,-18,90,0),array(),array(),vec2(0,11),array(vec(1,1,6)),100
            ,"models/hanksabutt/rollingstock/flatcars/nsc_bulkheadflat.mdl",10,"usamerican general_flatcar_bulkhead bulkhead_flatcar_wood steel_flatcar_bulkhead manifest empty sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,2),array(),100
            ,"models/hanksabutt/rollingstock/flatcars/nsc_bulkheadflat.mdl",5,"usamerican bulkhead_flatcar_wood manifest loaded sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,2),array(vec(1,1,2)),100
            ,"models/hanksabutt/rollingstock/flatcars/nsc_bulkheadflat.mdl",5,"usamerican steel_flatcar_bulkhead manifest loaded sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,2),array(vec(1,3,3)),100
            ,"models/hanksabutt/rollingstock/flatcars/thrall_bulkheadflat.mdl",10,"usamerican general_flatcar_bulkhead bulkhead_flatcar_wood steel_flatcar_bulkhead manifest empty sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,3),array(),100
            ,"models/hanksabutt/rollingstock/flatcars/thrall_bulkheadflat.mdl",5,"usamerican bulkhead_flatcar_wood manifest loaded sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,3),array(vec(1,1,2)),100
            ,"models/hanksabutt/rollingstock/flatcars/thrall_bulkheadflat.mdl",5,"usamerican steel_flatcar_bulkhead manifest loaded sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(638,-28,90,0),array(),array(),vec2(0,3),array(vec(1,3,3)),100
        #GONDOLA    
            ,"models/hanksabutt/rollingstock/openhoppers/gon_transcona_coal.mdl",3,"usamerican coal_gondola manifest empty sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(546,-15,90,0),array(),array(),vec2(0,4),array(),100
            ,"models/hanksabutt/rollingstock/openhoppers/gon_transcona_coal.mdl",3,"usamerican coal_gondola manifest loaded sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(546,-15,90,0),array(),array(),vec2(0,4),array(vec(1,1,1)),100
            ,"models/hanksabutt/rollingstock/openhoppers/gon_transcona_sulfur.mdl",3,"usamerican sulfur_gondola manifest empty sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(546,-15,90,0),array(),array(),vec2(0,0),array(),100
            ,"models/hanksabutt/rollingstock/openhoppers/gon_transcona_sulfur.mdl",3,"usamerican sulfur_gondola manifest loaded sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(546,-15,90,0),array(),array(),vec2(0,0),array(vec(1,1,1)),100
            ,"models/hanksabutt/rollingstock/openhoppers/gon_teoli_sulfur.mdl",3,"usamerican sulfur_gondola manifest empty sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(540,-13,90,0),array(),array(),vec2(0,2),array(),100
            ,"models/hanksabutt/rollingstock/openhoppers/gon_teoli_sulfur.mdl",3,"usamerican sulfur_gondola manifest loaded sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(540,-13,90,0),array(),array(),vec2(0,2),array(vec(1,1,1)),100
            ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter.mdl",4,"usamerican coal_gondola empty unitfreight sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,18),array(),110
            ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter.mdl",4,"usamerican coal_gondola loaded unitfreight sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,18),array(vec(1,1,1)),110
            ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter_irlskins.mdl",3,"usamerican coal_gondola empty unitfreight sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,26),array(),110
            ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter_irlskins.mdl",3,"usamerican coal_gondola loaded unitfreight sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,26),array(vec(1,1,1)),110
            ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter_bnsf.mdl",3,"usamerican coal_gondola empty unitfreight sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,6),array(),110
            ,"models/hanksabutt/rollingstock/bethgon_coalporter/bethgon_coalporter_bnsf.mdl",3,"usamerican coal_gondola loaded unitfreight sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx36 gsgrsg36",vec4(491,-18,90,0),array(),array(),vec2(0,6),array(vec(1,1,1)),110
            ,"models/hanksabutt/rollingstock/gondolas/gondola_mow.mdl",4,"new usamerican mow_gondola manifest loaded sdetail mstsports hanksabutt 1970s 1980s 1990s 200s 2010s 2020s gsgphx33 gsgrsg33",vec4(510,-16,90,0),array(),array(),vec2(0,0),array(),100
        #HOPPER
            ,"models/hanksabutt/rollingstock/hoppers/hopper_acf_2970.mdl",25,"usamerican cement_hopper manifest invisiload sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(312,-7,90,0),array(),array(),vec2(0,7),array(),100
            ,"models/hanksabutt/rollingstock/hoppers/hopper_ps4750.mdl",50,"usamerican grain_hopper manifest invisiload sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(564,-16,90,0),array(),array(),vec2(0,17),array(),100
            ,"models/hanksabutt/rollingstock/hoppers/hopper_trin_5161.mdl",70,"usamerican grain_hopper manifest invisiload sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(550,-16,90,0),array(),array(),vec2(0,6),array(),100
        #REEFER
            ,"models/hanksabutt/rollingstock/boxcars/boxcar_50ft_pcf_insulated.mdl",8,"usamerican insulated_boxcar_nonhigh manifest invisiload sdetail mstsports hanksabutt 1970s 1980s 1990s 2000s gsgphx33 gsgrsg33",vec4(496,-18,90,0),array(),array(),vec2(0,8),array(),100
            ,"models/hanksabutt/rollingstock/reefers/reefer_trincool/reefer_trincool.mdl",40,"usamerican mechanicalreeferrefridgerator manifest invisiload sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(660,-16,90,0),array(),array(),vec2(0,0),array(),100
        #TANKER
            ,"models/hanksabutt/rollingstock/tankers/tanker_26k.mdl",40,"usamerican general_tanker ethanol_tanker oil_tanker manifest invisiload sdetail mstsports hanksabutt 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(581,-16,90,0),array(),array(),vec2(0,6),array(),100
        #WELLCAR
            ,"models/hanksabutt/rollingstock/wellcars/wellcar_lopac_middle.mdl",1,"new usamerican intermodal_wellcar_40ft $3set$ empty unitfreight sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(1841,-40,90,700-11),array(),array(),vec2(0,4),array(),90
            ,"models/hanksabutt/rollingstock/wellcars/wellcar_lopac_middle.mdl",1,"new usamerican intermodal_wellcar_40ft $3set$ loaded unitfreight sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(1841,-40,90,700-11),array(),array(),vec2(0,4),array(vec(1,1,6)),90
            ,"models/hanksabutt/rollingstock/wellcars/wellcar_lopac_middle.mdl",4,"new usamerican intermodal_wellcar_40ft $5set$ empty unitfreight sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(3066,-40,90,1300),array(),array(),vec2(0,4),array(),90
            ,"models/hanksabutt/rollingstock/wellcars/wellcar_lopac_middle.mdl",4,"new usamerican intermodal_wellcar_40ft $5set$ loaded unitfreight sdetail mstsports hanksabutt 1980s 1990s 2000s 2010s 2020s gsgphx33 gsgrsg33",vec4(3066,-40,90,1300),array(),array(),vec2(0,4),array(vec(1,1,6)),90

    #"joeconqueror"#================================================================================================================================================
        #BOXCAR
            ,"models/joe/rolling_stock/1860s/24_boxcar/24_boxcar.mdl",25,"usamerican general_boxcar_nonhigh invisiload mow manifest hdetail joeconqueror preera 1900s 1910s magphx magrsg",vec4(220,-8,90,0),array(2,1,2,2,2,3,2,5,2,9),array(10,10,10,11),vec2(0,0),array(),30
            ,"models/joe/rolling_stock/1860s/boxcar/boxcar.mdl",35,"usamerican general_boxcar_nonhigh invisiload manifest mow hdetail joeconqueror preera 1900s 1910s 1920s 1930s magphx magrsg",vec4(264,-10,90,0),array(2,1,2,3,2,5),array(10,10,10,11),vec2(0,0),array(),40
            ,"models/joe/rolling_stock/1860s/open_stock_car/open_stock_car.mdl",2,"usamerican stock empty manifest hdetail joeconqueror preera magphx magrsg",vec4(220,-8,90,0),array(3,2,2,3,2,7,2,8),array(10,10,10,11),vec2(0,0),array(),25
            ,"models/joe/rolling_stock/stock_car.mdl",10,"usamerican stock empty manifest hdetail joeconqueror 1910s 1920s 1930s 1940s 1950s magphx magrsg",vec4(344,0,90,0),array(3,1,2,7,1,4,4,2,4,6,3,9,1,5),array(7,10,10,10,10,11,11),vec2(0,0),array(),50
        #CABOOSE
            ,"models/joe/rolling_stock/bobber/bobber_caboose.mdl",1,"usamerican caboose hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s 1950s magphx magrsg",vec4(122,-15,90,0),array(5,1,3,3,2,7,2,9),array(10,11,11,11,11,11,11),vec2(0,0),array(),15
            ,"models/joe/rolling_stock/caboose_1/caboose_1.mdl",0,"usamerican caboose hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s 1950s magphx magrsg",vec4(188,-15,90,0),array(5,1,3,3,2,7,2,9),array(10,11,11,11,11,11,11),vec2(0,0),array(),20
            ,"models/joe/rolling_stock/fec_caboose/fec_caboose.mdl",5,"usamerican caboose hdetail joeconqueror 1910s 1920s 1930s 1940s 1950s 1960s magphx magrsg",vec4(298,-15,90,0),array(3,2,2,7,5,8,2,9),array(10,11,11,11,11,11,11),vec2(0,0),array(),10
        #FLATBED
            ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",20,"usamerican coal_gondola general_gondola empty manifest mow hdetail joeconqueror preera 1900s 1910s magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(3,1,1)),35
            ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",15,"usamerican coal_gondola loaded manifest hdetail joeconqueror preera 1900s 1910s magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(3,1,1),vec(4,2,2)),35
            ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",15,"usamerican wood_flatcar log_flatcar general_flatcar empty manifest mow hdetail joeconqueror preera 1900s 1910s magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(1,1,1),vec(2,0,1)),35
            ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",7,"usamerican wood_flatcar loaded manifest mow hdetail joeconqueror preera 1900s 1910s magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(1,1,1),vec(2,0,1),vec(4,4,4)),35
            ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",7,"usamerican log_flatcar loaded manifest mow hdetail joeconqueror preera 1900s 1910s magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(1,1,1),vec(2,1,1),vec(4,3,3)),35
            ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",2,"usamerican water_tanker empty manifest hdetail joeconqueror preera 1900s 1910s magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(3,1,1),vec(4,1,1)),40
            ,"models/joe/rolling_stock/1860s/flat_car/flat_car.mdl",2,"usamerican water_tanker empty manifest hdetail joeconqueror preera 1900s 1910s magphx magrsg",vec4(220,-8,90,0),array(3,3,2,4,3,7),array(10,10,10,11),vec2(0,0),array(vec(4,1,1)),40
        #TANKER
            ,"models/joe/rolling_stock/tank_car.mdl",10,"usamerican general_tanker invisiload manifest mow hdetail joeconqueror 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(416,0,90,0),array(4,5,3,1,1,2,2,3,2,7),array(2,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),55
    
    #"laz"#================================================================================================================================================
        #BOXCAR
            ,"models/lazpack/freightcars/usra_ds_ventmod.mdl",50,"usamerican general_boxcar_nonhigh manifest invisiload sdetail laz 1910s 1920s 1930s 1940s 1950s magphx magrsg",vec4(374,-17,90,0),array(),OldBoxcarColor,vec2(0,0),array(),50
        #FLATBED
            ,"models/lazpack/freightcars/flatcar_p-0.mdl",1,"usamerican general_flatcar wood_flatcar steel_flatcar empty manifest hdetail laz 1950s 1960s 1970s 1980s magphx magrsg",vec4(414,-18,90,0),array(1,1,2,10,2,11,3,12,2,17),array(1,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),70
            ,"models/lazpack/freightcars/flatcar_p-0.mdl",1,"usamerican steel_flatcar loaded manifest hdetail laz 1950s 1960s 1970s 1980s magphx magrsg",vec4(414,-18,90,0),array(1,1,2,10,2,11,3,12,2,17),array(1,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,2,6)),70
            ,"models/lazpack/freightcars/flatcar_p-0.mdl",1,"usamerican wood_flatcar loaded manifest hdetail laz 1950s 1960s 1970s 1980s magphx magrsg",vec4(414,-18,90,0),array(1,1,2,10,2,11,3,12,2,17),array(1,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,7,8)),70
        #HOPPER
            ,"models/lazpack/freightcars/hopper_acf_1958cuft.mdl",3,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1940s 1950s 1960s 1970s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(3),vec2(0,0),array(vec(2,1,1),vec(1,16,19)),70
            ,"models/lazpack/freightcars/hopper_acf_1958cuft.mdl",3,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1940s 1950s 1960s 1970s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(7),vec2(0,0),array(vec(2,0,3),vec(1,0,3)),70
            ,"models/lazpack/freightcars/hopper_acf_1958cuft.mdl",6,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1940s 1950s 1960s 1970s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,7,7,7,7,7,8,8,8,11,11,11),vec2(0,0),array(vec(2,0,1),vec(1,20,20)),70
            ,"models/lazpack/freightcars/hopper_acf_1958cuft.mdl",9,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1940s 1950s 1960s 1970s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(3),vec2(0,0),array(vec(2,0,3),vec(1,4,15)),70
            ,"models/lazpack/freightcars/hopper_h30.mdl",2,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1940s 1950s 1960s 1970s magphx magrsg",vec4(324,-16,90,0),array(1,1,2,4),array(1,3,3,3,3,3,3,3,3,3,3,4,5,7,7,7,7,7,8,8,8,8,8,11,11,11,12),vec2(0,0),array(vec(1,10,10)),70
            ,"models/lazpack/freightcars/hopper_h30.mdl",4,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1940s 1950s 1960s magphx magrsg",vec4(324,-16,90,0),array(1,1,2,4),array(11),vec2(0,0),array(vec(1,0,4)),70
            ,"models/lazpack/freightcars/hopper_h30.mdl",4,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1960s 1970s 1980s magphx magrsg",vec4(324,-16,90,0),array(1,1,2,4),array(12),vec2(0,0),array(vec(1,5,9)),70
            ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",2,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1950s 1960s 1970s 1980s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(12),vec2(0,0),array(vec(1,12,14)),70
            ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",2,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1950s 1960s 1970s 1980s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(7),vec2(0,0),array(vec(1,9,11)),70
            ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",4,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1950s 1960s 1970s 1980s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,7,7,7,7,7,8,8,8,11,11,11,11,11,12),vec2(0,0),array(vec(1,24,24)),70
            ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",6,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1950s 1960s 1970s 1980s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(3),vec2(0,0),array(vec(1,0,8)),70
            ,"models/lazpack/freightcars/hopper_ps2_2bay.mdl",6,"usamerican cement_hopper sand_hopper dolomite_hopper invisiload manifest sdetail laz 1950s 1960s 1970s 1980s magphx magrsg",vec4(302,-16,90,0),array(1,1,2,6),array(3),vec2(0,0),array(vec(1,15,23)),70
            ,"models/lazpack/freightcars/hopper_ps2cd_4750.mdl",60,"usamerican grain_hopper invisiload manifest sdetail laz 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(550,-16,90,0),array(1,25,1,26,1,27),array(1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,6,7,8,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12),vec2(0,0),array(vec(1,0,10),vec(2,0,2),vec(3,0,10),vec(4,0,1)),100
            ,"models/lazpack/freightcars/trinity_3230_pd.mdl",1,"usamerican pressuredifferentialpd_hopper_clay invisiload manifest sdetail laz 1990s 2000s 2010s 2020s magphx magrsg",vec4(402,-15,90,0),array(1,1),array(3),vec2(0,11),array(),70
            ,"models/lazpack/freightcars/trinity_5660_pd.mdl",5,"usamerican pressuredifferentialpd_hopper_flour invisiload manifest sdetail laz 1990s 2000s 2010s 2020s magphx magrsg",vec4(626,-15,90,0),array(1,1),array(3),vec2(0,11),array(),100
        #TANKER
            ,"models/lazpack/freightcars/icc_103w_19k.mdl",10,"usamerican ethanol_tanker invisiload manifest hdetail laz 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(454,-18,90,0),array(1,1),array(7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8),vec2(0,0),array(),70
            ,"models/lazpack/freightcars/icc_103w_19k.mdl",10,"usamerican oil_tanker invisiload manifest hdetail laz 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(454,-18,90,0),array(1,1),array(7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8),vec2(0,0),array(),70
            ,"models/lazpack/freightcars/icc_103w_19k.mdl",20,"usamerican general_tanker invisiload manifest hdetail laz 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(454,-18,90,0),array(1,1),array(2,3,3,3,3,3,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,12),vec2(0,0),array(vec(1,1,1)),70

    #"magnum""#================================================================================================================================================
        #AUTORACK
            ,"models/magtrains/autorack_89_covered.mdl",3,"usamerican bilevel_closed_autorack invisiload unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(784,0,0,0),array(3,1,1,2,1,7),array(1,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,7,8,11,11,11,11,11),vec2(0,0),array(vec(1,0,5),vec(2,0,3),vec(3,0,1)),120
        #BOXCAR
            ,"models/magtrains/boxcar_50.mdl",50,"usamerican general_boxcar_nonhigh invisiload manifest hdetail mow magnum 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(448,0,0,0),array(1,5,2,7,3,1),array(1,1,1,2,2,3,4,4,4,4,4,4,4,4,4,4,5,5,6,6,6,6,7,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,3),vec(2,0,2),vec(3,0,2),vec(4,0,2)),100
        #CABOOSE
            ,"models/magtrains/caboose1.mdl",1,"usamerican caboose mdetail magnum 1930s 1940s 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(352,0,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),30
            ,"models/magtrains/caboose2.mdl",1,"usamerican caboose mdetail magnum 1930s 1940s 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(352,0,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,9),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),30
            ,"models/magtrains/caboose3.mdl",1,"usamerican caboose mdetail magnum 1930s 1940s 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(352,0,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,2,10),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),30
            ,"models/magtrains/caboose4.mdl",1,"usamerican caboose mdetail magnum 1930s 1940s 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(352,0,0,0),array(3,1,3,2,1,3,1,4,1,5,2,7,3,9),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),30
        #FLATBED
            ,"models/magtrains/centerbeam1.mdl",0.4,"usamerican centerbeam_flatcar_wood empty manifest mdetail magnum 1970s 1980s 1990s magphx magrsg",vec4(608,0,0,0),array(3,2,4,3,1,5,2,1),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1)),80
            ,"models/magtrains/flatcar1.mdl",8,"usamerican general_flatcar empty manifest mdetail mow magnum 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(608,0,0,0),array(3,1,4,2,1,4,2,5),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),80
            ,"models/magtrains/flatcar1.mdl",5,"usamerican wood_flatcar empty manifest mdetail magnum 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(608,0,0,0),array(3,1,4,2,1,4,2,5),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,1,1)),80
            ,"models/magtrains/flatcar2.mdl",15,"usamerican general_flatcar_bulkhead empty manifest mdetail magnum 1950s 1960s 1970s 1980s magphx magrsg",vec4(608,0,0,0),array(3,1,4,2,1,4,2,5),array(1,1,2,4,4,5,5,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),70
            ,"models/magtrains/flatcar2.mdl",25,"usamerican general_flatcar_bulkhead empty manifest mdetail magnum 1970s 1980s 1990s 2000s magphx magrsg",vec4(608,0,0,0),array(3,1,4,2,1,4,2,5),array(1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),120
            ,"models/magtrains/flatcar3.mdl",4,"usamerican heavy_flatcar empty manifest mdetail magnum 1940s 1950s 1960s magphx magrsg",vec4(528,0,0,0),array(1,1,3,2,3,3,2,5),array(8,11,11,11,12),vec2(0,0),array(),120
            ,"models/magtrains/flatcar4.mdl",6,"usamerican tofc_flatcar empty mdetail magnum 1950s 1960s 1970s 1980s magphx magrsg",vec4(608,0,0,0),array(1,3,3,1,2,4),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,2)),100
            ,"models/magtrains/flatcar_f89f.mdl",10,"usamerican tofc_flatcar empty manifest unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(736,0,0,0),array(1,1,3,2,6,3),array(3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,8,11,11,11,11,11),vec2(0,0),array(),100
            ,"models/magtrains/flatcar_f89j.mdl",10,"usamerican tofc_flatcar empty manifest unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(736,0,0,0),array(1,1,3,2,6,3),array(3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,8,8,11,11,11,11,11),vec2(0,0),array(),100
        #GONDOLA
            ,"models/magtrains/gondola1.mdl",5,"usamerican scrap_gondola general_gondola empty manifest mow mdetail magnum 1940s 1950s 1960s 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(608,0,0,0),array(2,1,3,3,1,2),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(),100
            ,"models/magtrains/jenny1.mdl",8,"usamerican generic_ore_gondola empty unitfreight mdetail magnum 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(216,-5,0,0),array(1,1,3,2,2,3,2,5),array(7,11,11,12),vec2(0,0),array(vec(3,0,3),vec(5,0,2),vec(7,0,2)),100
        #HOPPER
            ,"models/magtrains/hopper1.mdl",10,"usamerican coal_hopper empty manifest unitfreight mdetail magnum 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(2,0,0)),70
            ,"models/magtrains/hopper1.mdl",10,"usamerican coal_hopper loaded manifest unitfreight mdetail magnum 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(2,1,1)),70
            ,"models/magtrains/hopper1.mdl",16,"usamerican cement_hopper empty manifest mdetail magnum 1950s 1960s 1970s 1980s magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,2,2)),70
            ,"models/magtrains/hopper1.mdl",16,"usamerican cement_hopper loaded manifest mdetail magnum 1950s 1960s 1970s 1980s magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,2,2)),70
            ,"models/magtrains/hopper1.mdl",8,"usamerican grain_hopper empty manifest mdetail magnum 1960s 1970s 1980s magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,6,6,7,8,11,11,11,11,11,12),vec2(0,0),array(vec(1,1,1)),70
            ,"models/magtrains/hopper1.mdl",8,"usamerican grain_hopper loaded manifest mdetail magnum 1960s 1970s 1980s magphx magrsg",vec4(352,-4,0,0),array(3,2,1,4,2,1),array(1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,6,6,7,8,11,11,11,11,11,12),vec2(0,0),array(vec(1,1,1)),70
            ,"models/magtrains/hopper2.mdl",20,"usamerican cement_hopper invisiload manifest mdetail magnum 1960s 1970s 1980s 1990s magphx magrsg",vec4(352,0,0,0),array(3,2,1,4,2,1),array(1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,5,5,6,7,7,8,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),90
            ,"models/magtrains/hopper4.mdl",10,"usamerican coal_hopper empty manifest unitfreight mdetail magnum 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(512,-4,0,0),array(3,2,1,4,2,1),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,0)),100
            ,"models/magtrains/hopper4.mdl",10,"usamerican coal_hopper loaded manifest unitfreight mdetail magnum 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(512,-4,0,0),array(3,2,1,4,2,1),array(1,1,1,3,4,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,1,1)),100
            #,"models/magtrains/hopper4.mdl",20,"usamerican grain_hopper invisiload manifest buffer mdetail magnum 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(512,-4,0,0),array(3,2,1,4,2,1),array(1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,6,6,7,8,11,11,11,11,11),vec2(0,0),array(vec(1,2,2)),100
            ,"models/magtrains/hopper4.mdl",7,"usamerican grain_hopper invisiload manifest mdetail buffer magnum 1950s 1960s 1970s 1980s magphx magrsg",vec4(512,-4,0,0),array(3,2,1,4,2,1),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,3,3)),100
        #WELLCAR
            ,"models/magtrains/intermodal/wellcar_40_middle.mdl",8,"new usamerican intermodal_wellcar_40ft $5set$ empty unitfreight hdetail magnum 1980s 1990s 2000s 2010s magphx magrsg",vec4(3200,0,0,1355),array(1,1,3,3,2,4),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_40b_middle.mdl",2,"new usamerican intermodal_wellcar_40ft $5set$ empty unitfreight hdetail magnum 1970s 1980s 1990s 2000s magphx magrsg",vec4(3200,0,0,1355),array(1,1,3,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_40r_middle.mdl",6,"new usamerican intermodal_wellcar_40ft $5set$ empty unitfreight hdetail magnum 1980s 1990s 2000s 2010s magphx magrsg",vec4(3200,0,0,1355),array(1,1,3,2,2,4),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_40_single.mdl",5,"usamerican intermodal_wellcar_40ft empty unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(640,0,0,0),array(1,1,2,3,3,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_40b_single.mdl",1,"usamerican intermodal_wellcar_40ft empty unitfreight hdetail magnum 1980s 1990s 2000s 2010s magphx magrsg",vec4(640,0,0,0),array(1,1,3,3,2,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_40r_single.mdl",4,"usamerican intermodal_wellcar_40ft empty unitfreight hdetail magnum 1980s 1990s 2000s 2010s magphx magrsg",vec4(640,0,0,0),array(1,1,3,3,2,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_48_middle.mdl",3,"new usamerican intermodal_wellcar_48ft empty $3set$ unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(2208,0,0,812),array(1,1,3,3,2,4),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_48_middle.mdl",2,"new usamerican intermodal_wellcar_48ft empty $5set$ unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(3680,0,0,1548),array(1,1,3,3,2,4),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_48_single.mdl",3,"usamerican intermodal_wellcar_48ft empty unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(736,0,0,0),array(1,1,2,3,3,2),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_53_middle.mdl",8,"new usamerican intermodal_wellcar_53ft empty $3set$ unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(2400,0,0,875),array(1,1,3,2,2,4),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100
            ,"models/magtrains/intermodal/wellcar_53_middle.mdl",0.1,"new usamerican intermodal_wellcar_53ft empty $zilla$ wellzilla unitfreight hdetail magnum 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(7200,0,0,3400),array(1,1,3,2,2,4),array(1,4,4,4,4,4,4,4,4,4,4,6,11,11),vec2(0,0),array(),100

    #"metaladon"#================================================================================================================================================
        #BOXCAR
            ,"models/props_metaladon/freelance/boxcar_40ft_xm1.mdl",25,"usamerican general_boxcar_nonhigh invisiload manifest hdetail metaladon 1910s 1920s 1930s 1940s 1950s magphx magrsg",vec4(354,0,0,0),array(3,2,1,3,1,4),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(5,0,2),vec(6,0,1)),60
            ,"models/props_metaladon/freelance/boxcar_40ft_xm1.mdl",25,"usamerican general_boxcar_nonhigh invisiload manifest hdetail metaladon 1930s 1940s 1950s 1960s magphx magrsg",vec4(354,0,0,0),array(3,2,2,3,1,4),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(1,1),array(vec(5,0,2),vec(6,0,1)),60
            ,"models/props_metaladon/freelance/boxcar_40ft_xm1.mdl",4,"usamerican stock empty manifest hdetail metaladon 1930s 1940s 1950s magphx magrsg",vec4(354,0,0,0),array(3,2,2,3,1,4),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(1,1),array(vec(5,1,1),vec(6,2,2)),70
            ,"models/props_metaladon/freelance/boxcar_40ft_xm1.mdl",7,"usamerican stock empty manifest hdetail metaladon 1920s 1930s 1940s magphx magrsg",vec4(354,0,0,0),array(3,2,1,3,1,4),array(1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,7,7,7,7,7,7,8,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(5,1,1),vec(6,2,2)),70
            ,"models/props_metaladon/boxcar_40ft_hycube.mdl",1,"usamerican appliance_boxcar_highcube invisiload manifest mow hdetail metaladon 1950s 1960s 1970s magphx magrsg",vec4(352,0,0,0),array(1,4,2,3,3,1,1,7,2,8,5,13),array(1,2,4,5,11,11),vec2(1,1),array(vec(6,0,1)),70
            ,"models/props_metaladon/boxcar_40ft_hycube.mdl",3,"usamerican appliance_boxcar_highcube invisiload manifest mow hdetail metaladon 1950s 1960s 1970s magphx magrsg",vec4(352,0,0,0),array(1,4,2,3,3,1,1,7,2,8,5,13),array(1,2,4,5,11,11),vec2(0,0),array(vec(6,0,1)),70
            ,"models/props_metaladon/freelance/boxcar_60ft_autoparts.mdl",1.5,"usamerican autoparts_boxcar_highcube invisiload manifest hdetail metaladon 1960s 1970s 1980s magphx magrsg",vec4(543,0,0,0),array(1,4,2,3,3,1,1,8,2,9,5,13),array(1,1,1,4,5,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12),vec2(1,1),array(vec(6,0,1)),100
            ,"models/props_metaladon/freelance/boxcar_60ft_autoparts.mdl",3.5,"usamerican autoparts_boxcar_highcube invisiload manifest hdetail metaladon 1960s 1970s 1980s magphx magrsg",vec4(543,0,0,0),array(1,4,2,3,3,1,1,8,2,9,5,13),array(1,1,1,4,5,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12),vec2(0,0),array(vec(6,0,1)),100
            ,"models/props_metaladon/boxcar_86ft_autoparts.mdl",1,"usamerican autoparts_boxcar_highcube invisiload unitfreight hdetail metaladon 1960s 1970s 1980s 1990s magphx magrsg",vec4(740,-1,0,0),array(1,1,1,6,2,5,3,2),array(1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,8,9),vec(2,7,8),vec(3,2,2),vec(4,2,2),vec(5,2,2),vec(6,2,2),vec(7,0,1),vec(8,0,1)),100
            ,"models/props_metaladon/boxcar_86ft_autoparts.mdl",15,"usamerican autoparts_boxcar_highcube invisiload unitfreight hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(740,-1,0,0),array(1,1,1,6,2,5,3,2),array(1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,4),vec(2,0,6),vec(7,0,1),vec(8,0,1)),100
            ,"models/props_metaladon/boxcar_86ft_autoparts.mdl",4,"usamerican autoparts_boxcar_highcube invisiload unitfreight hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(740,-1,0,0),array(1,1,1,6,2,5,3,2),array(1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,5,7),vec(2,0,6),vec(3,2,2),vec(4,2,2),vec(5,2,2),vec(6,2,2),vec(7,0,1),vec(8,0,1)),100
        #COILCAR
            ,"models/props_metaladon/coilcar_48ft_evans.mdl",10,"usamerican coilcar manifest invisiload hdetail metaladon 1960s 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(1,2,2,2,4,5,5,6,6,7,7,7,7,7,8,11,11,11,11,12),vec2(0,1),array(vec(3,0,5),vec(4,0,5),vec(5,0,5)),100
            ,"models/props_metaladon/coilcar_48ft_evans.mdl",15,"usamerican coilcar manifest invisiload hdetail metaladon 1960s 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(1,2,2,2,4,5,5,6,6,7,7,7,7,7,8,11,11,11,11,12),vec2(0,1),array(vec(3,0,5)),100
            ,"models/props_metaladon/coilcar_48ft_evans.mdl",15,"usamerican coilcar manifest invisiload hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(1,2,2,2,4,5,5,6,6,7,7,7,7,7,8,11,11,11,11,12),vec2(0,1),array(vec(3,0,5),vec(4,2,2),vec(5,2,2)),100
            ,"models/props_metaladon/coilcar_48ft_evans.mdl",3,"usamerican coilcar manifest invisiload hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(6),vec2(0,1),array(vec(3,0,5),vec(4,6,6),vec(5,6,6)),100
            ,"models/props_metaladon/coilcar_48ft_evans.mdl",30,"usamerican coilcar manifest invisiload hdetail metaladon 1990s 2000s 2010s 2020s magphx magrsg",vec4(486,0,0,0),array(3,1,1,2,2,3,2,10),array(1,2,2,2,4,5,5,6,6,7,7,7,7,7,8,11,11,11,11,12),vec2(0,1),array(vec(3,0,5),vec(4,4,4),vec(5,4,4)),100
        #FLATBED
            ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",12,"usamerican general_flatcar wood_flatcar steel_flatcar empty manifest mow hdetail metaladon 1930s 1940s 1950s 1960s magphx magrsg",vec4(367,0,0,0),array(3,2,1,3,2,5),array(4,4,4,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,0,2)),70
            ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",2,"usamerican general_flatcar loaded manifest mow hdetail metaladon 1930s 1940s 1950s 1960s magphx magrsg",vec4(367,0,0,0),array(3,2,1,3,2,5),array(4,4,4,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,0,2),vec(5,6,6)),70
            ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",2,"usamerican wood_flatcar loaded manifest mow hdetail metaladon 1930s 1940s 1950s 1960s magphx magrsg",vec4(367,0,0,0),array(3,2,1,3,2,5),array(4,4,4,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,0,2),vec(5,5,5)),70
            ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",8,"usamerican steel_flatcar loaded manifest mow hdetail metaladon 1930s 1940s 1950s 1960s magphx magrsg",vec4(367,0,0,0),array(3,2,1,3,2,5),array(4,4,4,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(3,0,2),vec(5,1,4)),70
            ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",2,"usamerican slab_flatcar empty hdetail metaladon 1930s 1940s 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(367,0,0,0),array(3,2,1,3,2,5,3,8,2,10),array(8),vec2(0,0),array(vec(3,2,2)),100
            ,"models/props_metaladon/freelance/flatcar_40ft_freelance.mdl",2,"usamerican slab_flatcar loaded hdetail metaladon 1930s 1940s 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(367,0,0,0),array(3,2,1,3,2,5,3,8,3,10),array(8),vec2(0,0),array(vec(3,2,2),vec(5,4,4)),100
            ,"models/props_metaladon/freelance/flatcar_45ft_logs.mdl",8,"usamerican log_flatcar empty manifest hdetail metaladon 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(386,2,0,0),array(2,6,3,2,1,4),array(11),vec2(0,0),array(),70
            ,"models/props_metaladon/freelance/flatcar_45ft_logs.mdl",8,"usamerican log_flatcar loaded manifest hdetail metaladon 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(386,2,0,0),array(2,6,3,2,1,4),array(11),vec2(0,0),array(vec(3,1,6)),70
            ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",15,"usamerican centerbeam_flatcar_wood empty manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(6,0,3),vec(7,0,1)),100
            ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",2,"usamerican centerbeam_flatcar_frames loaded manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,10,13),vec(6,0,3),vec(7,0,1)),100
            ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",2,"usamerican centerbeam_flatcar_steel loaded manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,9,9),vec(6,0,3),vec(7,0,1)),100
            ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",2,"usamerican centerbeam_flatcar_ties loaded manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,7,8),vec(6,0,3),vec(7,0,1)),100
            ,"models/props_metaladon/flatcar_73ft_centerbeam.mdl",9,"usamerican centerbeam_flatcar_wood loaded manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(720,0,0,0),array(2,1,1,2,3,3,8,11),array(1,1,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1),vec(2,0,4),vec(3,1,6),vec(6,0,3),vec(7,0,1)),100
        #GONDOLA
            ,"models/props_metaladon/gondola_70t_usra.mdl",10,"usamerican general_gondola loaded manifest hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,1,2)),70
            ,"models/props_metaladon/gondola_70t_usra.mdl",10,"usamerican scrap_gondola loaded manifest hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,10,13)),70
            ,"models/props_metaladon/gondola_70t_usra.mdl",10,"usamerican steel_gondola loaded manifest hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,7,9)),70
            ,"models/props_metaladon/gondola_70t_usra.mdl",2,"usamerican tie_gondola loaded manifest hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,22,22)),70
            ,"models/props_metaladon/gondola_70t_usra.mdl",4,"usamerican pulp_gondola loaded manifest hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,21,21)),70
            ,"models/props_metaladon/gondola_70t_usra.mdl",44,"usamerican general_gondola tie_gondola pulp_gondola coke_gondola cement_gondola steel_gondola generic_ore_gondola coal_gondola gravel_gondola sand_gondola wood_gondola empty manifest hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(),70
            ,"models/props_metaladon/gondola_70t_usra.mdl",8,"usamerican wood_gondola loaded manifest hdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(452,0,0,0),array(1,1,1,2,3,3,2,4),array(1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11),vec2(0,0),array(vec(3,20,20)),70
            ,"models/props_metaladon/commissions/gondola_silverside_coal.mdl",1,"new usamerican coal_gondola unitfreight loaded hdetail metaladon 1960s 1970s 1980s 1990s magphx magrsg",vec4(460,0,0,0),array(3,1,1,2,2,4,1,5),array(9),vec2(0,0),array(vec(4,1,1),vec(5,0,1)),100
            ,"models/props_metaladon/commissions/gondola_silverside_coal.mdl",1,"new usamerican coal_gondola unitfreight empty hdetail metaladon 1960s 1970s 1980s 1990s magphx magrsg",vec4(460,0,0,0),array(3,1,1,2,2,4,1,5),array(9),vec2(0,0),array(vec(5,0,1)),100
            ,"models/props_metaladon/commissions/gondola_coalveyor_acf_coal.mdl",25,"new usamerican coal_gondola unitfreight empty sdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(484,0,0,0),array(3,1,1,2,2,3,1,4,2,6),array(7),vec2(1,11),array(),100
            ,"models/props_metaladon/commissions/gondola_coalveyor_acf_coal.mdl",25,"new usamerican coal_gondola unitfreight loaded sdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(484,0,0,0),array(3,1,1,2,2,3,1,4,2,6),array(7),vec2(1,11),array(vec(2,1,3)),100
            ,"models/props_metaladon/commissions/gondola_coalveyor_acf_extended.mdl",25,"new usamerican trash_gondola manifest empty sdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(484,0,0,0),array(3,1,1,2,2,3,1,4,2,6),array(7),vec2(1,3),array(),100
            ,"models/props_metaladon/commissions/gondola_coalveyor_acf_extended.mdl",25,"new usamerican trash_gondola manifest loaded sdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(484,0,0,0),array(3,1,1,2,2,3,1,4,2,6),array(7),vec2(1,3),array(vec(3,1,3)),100
            ,"models/props_metaladon/commissions/gondola_coalveyor_acf_scrap.mdl",25,"new usamerican scrap_gondola manifest empty sdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(484,0,0,0),array(3,1,1,2,2,3,1,4,2,6),array(7),vec2(1,6),array(),100
            ,"models/props_metaladon/commissions/gondola_coalveyor_acf_scrap.mdl",25,"new usamerican scrap_gondola manifest loaded sdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(484,0,0,0),array(3,1,1,2,2,3,1,4,2,6),array(7),vec2(1,6),array(vec(2,1,1)),100
            ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican scrap_gondola loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,2,2),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
            ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican scrap_gondola loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,6,6),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
            ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican trash_gondola loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,3,3),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
            ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican woodchips_gondola loaded manifest hdetail metaladon 1960s 1970s 1980s magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,1,1),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
            ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican woodchips_gondola loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(2,4,5),vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
            ,"models/props_metaladon/gondola_woodchips_gunderson.mdl",6,"usamerican woodchips_gondola scrap_gondola trash_gondola empty manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(644,0,0,0),array(3,2,1,5,2,4,5,9,1,12,8,13),array(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,9,9,9,9,9),vec2(0,0),array(vec(3,0,6),vec(4,0,3),vec(7,1,1)),100
        #HOPPER
            ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",0.9,"usamerican coal_hopper loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),AggregateHopperColor,vec2(0,0),array(vec(3,7,7),vec(2,0,1)),100
            ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",0.9,"usamerican sand_hopper loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),AggregateHopperColor,vec2(0,0),array(vec(3,4,4),vec(2,0,1)),100
            ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",1.8,"usamerican aggregate_hopper loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),AggregateHopperColor,vec2(0,0),array(vec(3,5,6),vec(2,0,1)),100
            ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",2,"usamerican limestone_hopper loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),AggregateHopperColor,vec2(0,0),array(vec(3,3,3),vec(2,0,1)),100
            ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",2.7,"usamerican aggregate_hopper loaded manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),AggregateHopperColor,vec2(0,0),array(vec(3,1,3),vec(2,0,1)),100
            ,"models/props_metaladon/freelance/hopper_aggregate_freelance.mdl",8.2,"usamerican limestone_hopper empty aggregate_hopper manifest hdetail metaladon 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(376,0,0,0),array(1,1,3,3,2,6,2,2,8,9),AggregateHopperColor,vec2(0,0),array(vec(2,0,1)),100
            ,"models/props_metaladon/hopper_2bay_airslide.mdl",12,"usamerican airslide_hopper_flour airslide_hopper_sugar invisiload manifest buffer hdetail metaladon 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(488,0,0,0),array(2,2,1,3,3,4,8,9),array(1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,6,6,7,8,11,11,11,11,11,12),vec2(0,0),array(vec(2,0,1)),100
            ,"models/props_metaladon/hopper_2bay_trinity.mdl",12,"usamerican cement_hopper invisiload manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(360,0,0,0),array(3,8,1,3,2,1,3,2,8,9),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8,8,8,8,8,11,11,11,11,11),vec2(0,0),array(vec(5,0,5),vec(2,0,3)),100
            ,"models/props_metaladon/hopper_3bay_ari.mdl",50,"usamerican grain_hopper invisiload manifest buffer hdetail metaladon 1990s 2000s 2010s 2020s magphx magrsg",vec4(568,0,0,0),array(1,1,2,2,3,3,8,6),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,7,8),vec2(0,0),array(vec(3,0,1)),120
            ,"models/props_metaladon/jenny_24ft_u27.mdl",18,"usamerican generic_ore_hopper taconite_ore_hopper empty unitfreight hdetail metaladon 1950s 1960s 1970s magphx magrsg",vec4(212,4,0,0),array(2,1,1,2,3,3,8,9),array(11),vec2(0,0),array(vec(5,0,2)),100
            ,"models/props_metaladon/jenny_24ft_u27.mdl",6,"usamerican generic_ore_hopper loaded unitfreight hdetail metaladon 1950s 1960s 1970s magphx magrsg",vec4(212,4,0,-3),array(2,1,1,2,3,3,8,9),array(11),vec2(0,0),array(vec(3,1,1)),100
            ,"models/props_metaladon/jenny_24ft_u27.mdl",6,"usamerican taconite_ore_hopper loaded unitfreight hdetail metaladon 1950s 1960s 1970s 1980s magphx magrsg",vec4(212,4,0,-3),array(2,1,1,2,3,3,8,9),array(11),vec2(0,0),array(vec(3,2,2),vec(5,1,2)),100
        #SPECIAL
            ,"models/props_metaladon/placeholders/hotmetal_8axle_torpedo.mdl",2,"new usamerican hotmetalcar $hotmetalcar$ invisiload mdetail metaladon 1940s 1950s 1960s 1970s 1980s 1990s magrsg magphx",vec4(496+106,-18,0,110),array(1,1,2,3,2,5),array(7),vec2(),array(),250
            ,"models/props_metaladon/placeholders/slag_single_tipper.mdl",1,"usamerican slag invisiload mdetail metaladon 1920s 1930s 1940s 1950s 1960s 1970s 1980s 1990s 2000s magrsg magphx",vec4(167,-18,0,0),array(3,2,2,4,1,6),array(7),vec2(0,0),array(),70
        #TANKER
            ,"models/props_metaladon/tanker_8k_beercan.mdl",3,"usamerican chemical_tanker invisiload manifest mow hdetail metaladon 1970s 1980s 1990s magphx magrsg",vec4(192,0,0,0),array(3,2,2,4,1,5),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(vec(3,0,1)),70
            ,"models/props_metaladon/tanker_11k_jacketed.mdl",30,"usamerican chemical_tanker invisiload manifest hdetail metaladon 1940s 1950s 1960s 1970s magphx magrsg",vec4(304,0,0,0),array(1,1,2,3,3,4),array(2,3,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8),vec2(0,0),array(vec(3,0,1),vec(4,0,1)),50
            ,"models/props_metaladon/freelance/tanker_18k_chemical.mdl",17,"usamerican chemical_tanker invisiload manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(308,0,0,0),array(3,2,2,4,1,5,1,9,8,10),array(3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(1,1),array(),100
            ,"models/props_metaladon/freelance/tanker_18k_chemical.mdl",8,"usamerican chemical_tanker invisiload manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(308,0,0,0),array(3,2,2,4,1,5,1,9,8,10),array(3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),100
            ,"models/props_metaladon/freelance/tanker_25k_trinity.mdl",10,"usamerican general_tanker invisiload manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(2,1,1,2,3,3,1,7,8,9),array(2,3,3,3,3,3,3,3,3,3,3,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8),vec2(1,1),array(vec(3,0,2)),100
            ,"models/props_metaladon/freelance/tanker_25k_trinity.mdl",20,"usamerican oil_tanker ethanol_tanker invisiload manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(2,1,1,2,3,3,1,7,8,9),array(7),vec2(1,1),array(vec(3,0,2)),100
            ,"models/props_metaladon/freelance/tanker_25k_trinity.mdl",3,"usamerican general_tanker invisiload manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(2,1,1,2,3,3,1,7,8,9),array(2,3,3,3,3,3,3,3,3,3,3,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8),vec2(0,0),array(vec(3,0,2)),100
            ,"models/props_metaladon/freelance/tanker_25k_trinity.mdl",6,"usamerican oil_tanker ethanol_tanker invisiload manifest hdetail metaladon 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(524,0,0,0),array(2,1,1,2,3,3,1,7,8,9),array(7),vec2(0,0),array(vec(3,0,2)),100
            ,"models/props_metaladon/tanker_31k_trinity.mdl",10,"usamerican oil_tanker ethanol_tanker invisiload manifest hdetail metaladon 2000s 2010s 2020s magphx magrsg",vec4(548,0,0,0),array(2,1,1,2,3,3,8,9),array(7),vec2(0,0),array(vec(3,0,4)),100
            ,"models/props_metaladon/tanker_31k_trinity.mdl",25,"usamerican general_tanker invisiload manifest hdetail metaladon 2000s 2010s 2020s magphx magrsg",vec4(548,0,0,0),array(2,1,1,2,3,3,8,9),array(2,3,3,3,3,3,3,3,3,3,3,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8),vec2(0,0),array(),100
            ,"models/props_metaladon/tanker_34k_lpg.mdl",15,"usamerican lpg_tanker invisiload manifest hdetail metaladon  1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(648,0,0,0),array(1,1,3,3,2,5,1,6,8,7),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(1,1),array(),100
            ,"models/props_metaladon/tanker_34k_lpg.mdl",5,"usamerican lpg_tanker invisiload manifest hdetail metaladon  1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(648,0,0,0),array(1,1,3,3,2,5,1,6,8,7),array(3,3,3,3,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),vec2(0,0),array(),100
            ,"models/props_metaladon/tanker_50k_whalebelly.mdl",0.5,"new usamerican lpg_tanker whale invisiload manifest hdetail $whale$ metaladon 1960s 1970s 1980s 1990s magphx magrsg",vec4(936,0,0,36),array(1,1,2,3),array(3),vec2(0,0),array(vec(1,0,1)),220

    #"parkman"#================================================================================================================================================
        #GONDOLA
            ,"models/parkmanpack/cars/virginian_vgn_battleship_gondola_g4c.mdl",1,"new usamerican coal_gondola unitfreight loaded sdetail parkman manifest 1920s 1930s 1940s 1950s magphx buckeyersg",vec4(416,-43,90,0),array(1,1,2,2),array(7),vec2(0,0),array(vec(3,0,5)),100
            ,"models/parkmanpack/cars/virginian_vgn_battleship_gondola_g4c.mdl",1,"new usamerican coal_gondola unitfreight empty sdetail parkman manifest 1920s 1930s 1940s 1950s magphx buckeyersg",vec4(416,-43,90,0),array(1,1,2,2),array(7),vec2(0,0),array(vec(3,0,5),vec(4,1,1)),100
        #TANKER
            ,"models/parkmanpack/cars/20k_tank_car.mdl",5,"new usamerican chemical_tanker invisiload sdetail parkman manifest 1920s 1930s 1940s 1950s 1960s 1970s 1980s magphx magrsg",vec4(406,0,90,0),array(3,1,6,2,5,3,5,4),array(vec(5,0,2)),vec2(0,0),array(),70
    
    #"phantomone"#
        #HOPPER
            ,"models/phantom_one/norfolk_and_western_hl_hopper.mdl",15,"new usamerican coal_hopper unitfreight empty hdetail phantomone manifest 1920s 1930s 1940s 1950s magphx magrsg",vec4(274,-10,90,0),array(3,1,1,2),array(7),vec2(0,0),array(),70
    
    #"reverendv92"#============================================================================================================================================
        #BOXCAR
            ,"models/v92/props_trains/ep2/train_boxcar.mdl",15,"ussrussian general_boxcar_nonhigh invisiload manifest sdetail reverendv92 1970s 1980s 1990s 2000s 2010s 2020s rus5ft rusphx rusrsg",vec4(320,-56,90,0),array(),array(),vec2(0,0),array(),70

    #"snowy"#============================================================================================================================================
        #CABOOSE
            ,"models/snowy/rollingstock/cabooses/caboose_center_cupola.mdl",5,"new usamerican caboose hdetail snowy 1930s 1940s 1950s 1960s 1970s 1980s 1990s magphx magrsg",vec4(258,-4,0,0),array(1,1,2,3,2,4,1,6,2,9,2,10,2,14,2,15,3,16,1,18,9,7),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(vec(1,0,1),vec(2,0,1),vec(3,0,1)),10 
        #REEFER
            ,"models/lazpack/snowy/cnr_reefer.mdl",25,"new usamerican icereeferrefridgerator invisiload manifest hdetail snowy 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(362,0,90,0),array(1,1,3,2,2,3,1,4,1,5,1,9,2,10,2,12,1,15,2,16),array(1,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,10,10,11,11,11,11,11),vec2(0,0),array(vec(3,0,1)),50 
    
    #"sparks"#=================================================================================================================================================
        #CABOOSE
            ,"models/paducah/rollingstock/28_ft_caboose.mdl",1,"new usamerican caboose mdetail sparks 1930s 1940s 1950s 1960s 1970s magphx magrsg",vec4(310,-3,90,15),array(3,1,2,2,1,3,1,4,2,5,2,7,2,8,2,9,2,11),array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,6,7,8,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12),vec2(0,0),array(),10
        #GONDOLA
            ,"models/paducah/rollingstock/mcc_sidedump_static.mdl",1,"new usamerican gravel_gondola empty mdetail sparks manifest 1950s 1960s 1970s 1980s magphx magrsg",vec4(280,-3,90,15),array(1,1,3,2,3,3,2,4,2,6,2,8,2,9),array(7,7,8),vec2(0,0),array(),50
        #FLATBED
            ,"models/paducah/rollingstock/freelanced_flatbed.mdl",5,"new usamerican general_flatcar empty hdetail sparks manifest 1950s 1960s 1970s 1980s 1990s 2000s magphx magrsg",vec4(570,-52,0,0),array(3,2,1,3),array(7),vec2(0,0),array(),70
        #REEFER
            ,"models/paducah/rollingstock/72_ft_refrigerated_boxcar.mdl",10,"new usamerican mechanicalreeferrefridgerator invisiload hdetail sparks manifest 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(592,0,0,0),array(3,1,1,3,2,4,2,15),array(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,4,8),vec2(0,0),array(),100

    #"spdaylight"#=============================================================================================================================================
        #FLATBED
            ,"models/sps_pack/railcars/54ft_dodx_flatcar.mdl",5,"new usamerican military_flatcar empty manifest hdetail spdaylight 1950s 1960s 1970s 1980s 1990s magphx buckeyersg",vec4(428,-6,90,0),array(1,1,3,2,2,4,3,5,2,6,2,7,6,10,6,14,2,15,2,16,2,17,2,18,2,19,2,20),array(7),vec2(0,0),array(),120

    #"toastur"#================================================================================================================================================
        #BOXCAR
            ,"models/toast/rollingstock/boxcars/boxcar_wagontop_40ft.mdl",6,"usamerican general_boxcar_nonhigh invisiload manifest sdetail mstsports toastur 1940s 1950s 1960s gsgphx33 gsgrsg33",vec4(376,-18,90,0),array(),array(),vec2(0,6),array(),70
            ,"models/toast/rollingstock/hoppers/boxcar_sco_usra_fishbelly.mdl",15,"usamerican general_boxcar_nonhigh invisiload manifest sdetail mstsports toastur 1900s 1910s 1920s 1930s 1940s 1950s gsgphx33 gsgrsg33",vec4(380,-16,90,0),array(),array(),vec2(0,1),array(),100
        #GONDOLA
            ,"models/toast/rollingstock/gondolas/gondola_40ft_usra.mdl",25,"usamerican general_gondola gravel_gondola sand_gondola scrap_gondola empty manifest sdetail mstsports toastur 1900s 1910s 1920s 1930s 1940s 1950s gsgphx33 gsgrsg33",vec4(400,-16,90,0),array(),array(),vec2(0,2),array(),70
        #HOPPER
            ,"models/toast/rollingstock/hoppers/hopper_2bay_usra_lcn.mdl",35,"usamerican coal_hopper empty manifest sdetail mstsports toastur 1920s 1930s 1940s 1950s 1960s gsgphx33 gsgrsg33",vec4(266,-10,90,0),array(),array(),vec2(0,10),array(),50
            ,"models/toast/rollingstock/hoppers/hopper_2bay_usra_lcn.mdl",35,"usamerican coal_hopper loaded manifest sdetail mstsports toastur 1920s 1930s 1940s 1950s 1960s gsgphx33 gsgrsg33",vec4(266,-10,90,0),array(),array(),vec2(0,10),array(vec(1,1,1)),50
        #REEFER
            ,"models/toast/rollingstock/boxcars/boxcar_pfe_reefer.mdl",40,"usamerican icereeferrefridgerator invisiload manifest sdetail toastur 1920s 1930s 1940s 1950s 1960s gsgphx33 gsgrsg33",vec4(374,-16,90,0),array(),array(),vec2(0,2),array(),70

    #"zexciv"#================================================================================================================================================
        #GONDOLA
            ,"models/zexciv_train_stuff/usa/armc/hopper_armc_77t_2700cuft.mdl",10,"usamerican coal_hopper empty unitfreight sdetail zexciv 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(410,-18,90,0),array(1,1,3,5,7,9),array(7,7,7,7,7,7,7,7,11),vec2(0,0),array(vec(9,0,1)),77
            ,"models/zexciv_train_stuff/usa/armc/hopper_armc_77t_2700cuft.mdl",10,"usamerican coal_hopper loaded unitfreight sdetail zexciv 1970s 1980s 1990s 2000s 2010s magphx magrsg",vec4(410,-18,90,0),array(1,1,3,5,7,9),array(7,7,7,7,7,7,7,7,11),vec2(0,0),array(vec(8,1,1),vec(9,0,1)),77
        #HOPPER
            ,"models/zexciv_train_stuff/usa/stock/prr_g38_jenny.mdl",1,"new usamerican generic_ore_gondola empty unitfreight sdetail zexciv 1960s 1970s 1980s 1990s magphx magrsg",vec4(180,-18,0,0),array(3,1,2,4,1,6,2,13,3,24),array(7,7,11),vec2(1,8),array(vec(3,0,1),vec(4,0,1),vec(5,0,1)),84
            ,"models/zexciv_train_stuff/usa/stock/prr_g38_jenny.mdl",1,"new usamerican generic_ore_gondola loaded unitfreight sdetail zexciv 1960s 1970s 1980s 1990s magphx magrsg",vec4(180,-18,0,0),array(3,1,2,4,1,6,2,13,3,24),array(7,7,11),vec2(1,8),array(vec(2,4,4),vec(3,0,1),vec(4,0,1),vec(5,0,1)),84
            ,"models/zexciv_train_stuff/usa/stock/prr_g39_jenny.mdl",4,"new usamerican generic_ore_gondola empty unitfreight sdetail zexciv 1960s 1970s 1980s 1990s magphx magrsg",vec4(180,-18,0,0),array(3,1,2,4,1,6,2,13,3,17),array(7,7,11),vec2(1,14),array(vec(3,0,1),vec(4,0,1)),88
            ,"models/zexciv_train_stuff/usa/stock/prr_g39_jenny.mdl",4,"new usamerican generic_ore_gondola loaded unitfreight sdetail zexciv 1960s 1970s 1980s 1990s magphx magrsg",vec4(180,-18,0,0),array(3,1,2,4,1,6,2,13,3,17),array(7,7,11),vec2(1,14),array(vec(2,4,4),vec(3,0,1),vec(4,0,1)),88        

#britishuk - BR~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    #"bobster"#================================================================================================================================================
        #FLATBED
            ,"models/bobsters_trains/uk/stock/freight/bxx/steel_carrier_b.mdl",1,"britishuk steel_flatcar empty manifest hdetail bobster 1970s 1980s 1990s 2000s 2010s 2020s uky25cphx",vec4(400,-11,90,6),array(3,1,1,2,5,4,6,5,2,6,3,9),array(7,7,7,7,7,8,8,13,13,13),vec2(0,0),array(vec(1,0,1)),100
            ,"models/bobsters_trains/uk/stock/freight/bxx/steel_carrier_b.mdl",1,"britishuk steel_flatcar loaded manifest hdetail bobster 1970s 1980s 1990s 2000s 2010s 2020s uky25cphx",vec4(400,-11,90,6),array(3,1,1,2,5,4,6,5,2,6,3,9),array(7,7,7,7,7,8,8,13,13,13),vec2(0,0),array(vec(1,0,1),vec(2,1,4)),100
        #TANKER
            ,"models/bobsters_trains/uk/stock/freight/tanks/bogie_tank.mdl",1,"britishuk general_tanker empty manifest mdetail titus 1970s 1980s 1990s 2000s 2010s 2020s uky25cphx",vec4(520,-11,90,6),array(3,1,1,2,2,3,5,5,6,6),array(7,7,7,7,7,8,8,13,13,13),vec2(0,0),array(),100

    #"titus"#================================================================================================================================================
        #FLATBED
            ,"models/titus's_propper_model_pack_2.4/propper/ukwagon/ukwagon.mdl",1,"britishuk general_flatcar empty freight manifest mdetail janky titus 1970s 1980s 1990s 2000s 2010s 2020s uky25cphx",vec4(474,-19,90,0),array(3,3,1,4,2,5),array(7),vec2(0,0),array(),70

#european - EU [+] #nldutch - DU

    #"rusty"#========================================================================================================================================
        #BOXCAR
            ,"models/rusty/stock/chok.mdl",15,"new nldutch european $2axle$ generic_van invisiload freight manifest mdetail rusty 1940s 1950s 2axrsg36",vec4(176,-8,0,5),array(),array(8,8,11,11),vec2(0,0),array(vec(1,2,2)),60

#nswaustralianz - AU and NZ#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    #"linnie"#========================================================================================================================================
        #COILCAR
            ,"models/rcaf/wagon_rcaf.mdl",15,"nswaustralianz coilcar empty manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(452,-2,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(vec(1,0,1),vec(3,0,1),vec(4,0,2)),70
            ,"models/rcaf/wagon_rcaf.mdl",15,"nswaustralianz coilcar loaded manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(452,-2,90,0),array(1,1,3,2,2,3,6,5),array(10,11,13,13,13,13,13,13),vec2(0,0),array(vec(1,0,1),vec(3,0,1),vec(4,0,2),vec(5,1,1)),70
        #FLATBED
            ,"models/rkly/wagon_rkly.mdl",30,"nswaustralianz container_flatcar empty manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(446,0,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(vec(1,0,1)),70
            ,"models/rkly/wagon_rkly.mdl",30,"nswaustralianz container_flatcar loaded manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(446,0,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(vec(1,0,1),vec(3,1,1)),70
        #GONDOLA
            ,"models/mcar/wagon_mcar.mdl",10,"nswaustralianz generic_ore_gondola hematite_ore_gondola magnetite_ore_gondola empty manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(238,-12,90,0),array(3,1,1,2),array(11,11,11,13,13,14,14),vec2(0,0),array(),160
        #HOPPER
            ,"models/props/linnies_nsw_train_pack/nhff_hopper.mdl",15,"nswaustralianz coal_hopper mdetail manifest empty linnie 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(546,0,0,10),array(1,1,3,2,2,3),array(6,6,6,6,6,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,13,13,14,14,14,14,14,14),vec2(0,0),array(),100
            ,"models/props/linnies_nsw_train_pack/nhvf_hopper.mdl",15,"nswaustralianz coal_hopper mdetail manifest empty linnie 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(594,0,0,10),array(3,1,2,2,1,3),array(6,6,6,6,6,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,13,13,13,14,14,14,14,14,14),vec2(0,0),array(),100
            ,"models/props/linnies_nsw_train_pack/prycementhopper.mdl",5,"nswaustralianz cement_hopper manifest invisiload mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(332,-41,90,0),array(3,1,1,2),array(8),vec2(0,0),array(),80
        #TANKER
            ,"models/jk/wagon_jk.mdl",2,"nswaustralianz general_tanker invisiload manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(452,-15,90,0),array(2,1,1,2,3,3,1,4,2,5),array(8),vec2(0,0),array(),70
            ,"models/ntaf/wagon_ntaf.mdl",5,"nswaustralianz general_tanker invisiload manifest mdetail linnie 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(478,-22,90,0),array(1,1,3,2,2,3),array(7,7,8),vec2(0,0),array(),120

    #"westausman98"#================================================================================================================================================
        #FLATBED
            ,"models/wam98_trains/rolling_stock/container_flats/conflat_2teu.mdl",15,"nswaustralianz container_flatcar empty manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(362,-18,0,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),45
            ,"models/wam98_trains/rolling_stock/container_flats/conflat_3teu.mdl",10,"nswaustralianz container_flatcar empty manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(526,-18,0,0),array(3,1,2,2,1,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),60
            ,"models/wam98_trains/rolling_stock/container_flats/conflat_4teu.mdl",5,"nswaustralianz container_flatcar empty manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(766,-18,0,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),75
            ,"models/wam98_trains/rolling_stock/container_flats/ave_q40.mdl",15,"nswaustralianz container_flatcar empty manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(362,-30,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),45
            ,"models/wam98_trains/rolling_stock/container_flats/ave_q60.mdl",10,"nswaustralianz container_flatcar empty manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s magphx magrsg",vec4(526,-30,90,0),array(3,1,2,2,1,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),60
            ,"models/wam98_trains/rolling_stock/container_flats/ave_q80.mdl",5,"nswaustralianz container_flatcar empty manifest mdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(766,-30,90,0),array(1,1,3,2,2,3),array(10,11,13,13,13,13,13,13),vec2(0,0),array(),75
        #GONDOLA
            #,"models/wam98_trains/rolling_stock/ore_cars/crrc_cck.mdl",15,"nswaustralianz hematite_ore_gondola magnetite_ore_gondola generic_ore_gondola empty manifest hdetail westausman98 2000s 2010s 2020s magphx magrsg",vec4(280,-18,90,0),array(3,1,1,2,3,3,1,9,2,11),array(11,11,11,13,13,14,14),vec2(0,0),array(),160
            #,"models/wam98_trains/rolling_stock/ore_cars/crrc_cck.mdl",15/3,"nswaustralianz generic_ore_gondola loaded manifest hdetail westausman98 2000s 2010s 2020s magphx magrsg",vec4(280,-18,90,-10),array(3,1,1,2,3,3,1,9,2,11),array(11,11,11,13,13,14,14),vec2(0,0),array(vec(1,3,3)),160
            #,"models/wam98_trains/rolling_stock/ore_cars/crrc_cck.mdl",15/3,"nswaustralianz hematite_ore_gondola loaded manifest hdetail westausman98 2000s 2010s 2020s magphx magrsg",vec4(280,-18,90,0),array(3,1,1,2,3,3,1,9,2,11),array(11,11,11,13,13,14,14),vec2(0,0),array(vec(1,1,1)),160
            #,"models/wam98_trains/rolling_stock/ore_cars/crrc_cck.mdl",15/3,"nswaustralianz magnetite_ore_gondola loaded manifest hdetail westausman98 2000s 2010s 2020s magphx magrsg",vec4(280,-18,90,0),array(3,1,1,2,3,3,1,9,2,11),array(11,11,11,13,13,14,14),vec2(0,0),array(vec(1,2,2)),160
        #HOPPER
            ,"models/wam98_trains/rolling_stock/covered_hoppers/crrc_c35-130.mdl",15,"new nswaustralianz grain_hopper invisiload manifest hdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(490,-17,90,0),array(2,1,3,3,1,4,1,6,2,7,1,8,2,9,2,13,2,14,2,16,1,17,2,18,2,19),array(3,3,3,8,9,9),vec2(0,0),array(),130
        #TANKER
            ,"models/wam98_trains/rolling_stock/tankers/ave_t40.mdl",5,"new nswaustralianz general_tanker invisiload manifest hdetail westausman98 1970s 1980s 1990s 2000s 2010s 2020s nsw2cmrsg nsw2cmphx",vec4(540,-17,90,0),array(3,2,3,5,2,6,2,7,2,8,2,9,2,10,2,11,2,12,6,13,2,14,2,15,1,17,1,18),array(7),vec2(0,0),array(),80
         
#ussrussian - RU#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    #"akandr"#================================================================================================================================================
        #GONDOLA
            ,"models/akandr/russian/poluvagon.mdl",8,"russian coal_gondola empty manifest hdetail akandr priority 1980s 1990s 2000s 2010s 2020s rus5ft rusphx rusrsg",vec4(360,-1,90,-1),array(3,2,1,3,3,4,2,5),RussianColor,vec2(0,0),array(),70
            ,"models/akandr/russian/poluvagon.mdl",8,"russian coal_gondola loaded manifest hdetail akandr priority 1980s 1990s 2000s 2010s 2020s rus5ft rusphx rusrsg",vec4(360,-1,90,-1),array(3,2,1,3,3,4,2,5),RussianColor,vec2(0,0),array(vec(3,1,3)),70
        #HOPPER
            ,"models/akandr/russian/rus_grain_hopper.mdl",3,"russian grain_hopper cement_hopper invisiload manifest mow hdetail akandr priority 1970s 1980s 1990s 2000s 2010s 2020s rus5ft rusphx rusrsg",vec4(414,50,90,-1),array(1,1,3,3),array(3,5,5,5,5,5,6,6,6,6,6,8,11),vec2(0,0),array(),70

    #"anyone991"#================================================================================================================================================
        #HOPPER
            ,"models/anytrains/rollingstock/freight/rus/rus_wagon_19-1241.mdl",2,"russian gravel_hopper empty manifest hdetail anyone991 1970s 1980s 1990s 2000s 2010s 2020s rus5ft rusphx rusrsg",vec4(270,-4-9.7,0,0),array(1,3,3,2,6,4),RussianColor,vec2(0,0),array(),50

    #"goomz"#================================================================================================================================================
        #BOXCAR
            ,"models/goomzmodels/rollingstock/rus 1612-10 box wagon.mdl",10,"russian general_boxcar_nonhigh invisiload manifest hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s rus5ft rusphx rusrsg",vec4(376,-8-10.5,90,10),array(1,1,2,2,3,3,2,4,2,6),array(3,5,5,5,5,5,6,6,6,6,6,8,11),vec2(0,0),array(),60
            ,"models/goomzmodels/rollingstock/rus 1612-12 box wagon.mdl",1,"russian general_boxcar_nonhigh invisiload manifest hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s rus5ft rusphx rusrsg",vec4(376,-8-10.5,90,10),array(1,1,2,2,3,3,2,4,2,6),array(3,5,5,5,5,5,6,6,6,6,6,8,11),vec2(0,0),array(),60
        #GONDOLA
            ,"models/goomzmodels/rollingstock/rus 12 132 gondola.mdl",4,"russian general_gondola empty mow manifest hdetail goomz 1970s 1980s 1990s 2000s 2010s 2020s rus5ft rusphx rusrsg",vec4(376,35-11,90,10),array(1,2,2,1,3,3,2,4,2,5),RussianColor,vec2(0,0),array(),60

#2ft6in gauge - 2ft#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    #"joeconqueror"#================================================================================================================================================
        #BOXCAR
            ,"models/joe/rolling_stock/2ft/boxcar.mdl",5,"usamerican general_boxcar_nonhigh invisiload manifest hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft",vec4(183,-2.5,0,4),array(3,1,3,3,2,5,2,8,2,9),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
            ,"models/joe/rolling_stock/2ft/stock_car.mdl",5,"usamerican stock empty manifest hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft",vec4(183,-2,0,4),array(3,1,3,3,2,5,2,8,2,9),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        #FLATBED
            ,"models/joe/rolling_stock/2ft/flat_car.mdl",5,"usamerican general_flatcar wood_flatcar empty manifest hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft",vec4(198,0,0,4),array(1,1,3,2,3,5,3,6,2,7,2,8),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,0,1)),20
            ,"models/joe/rolling_stock/2ft/flat_car.mdl",5,"usamerican wood_flatcar loaded manifest hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft",vec4(198,0,0,4),array(1,1,3,2,3,5,3,6,2,7,2,8),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,1,1),vec(2,1,1)),20
        #GONDOLA
            ,"models/joe/rolling_stock/2ft/gondola.mdl",5,"usamerican coal_gondola loaded manifest hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft",vec4(198,2,0,4),array(2,3,3,4,2,5,3,6,7,8),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(1,1,1)),20
            ,"models/joe/rolling_stock/2ft/gondola.mdl",5,"usamerican general_gondola coal_gondola empty manifest hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft",vec4(198,2,0,4),array(2,3,3,4,2,5,3,6),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
        #HOPPER
            ,"models/joe/rolling_stock/2ft/mc_hopper/mc_hopper.mdl",5,"usamerican coal_hopper empty manifest hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft",vec4(198,-1,0,4),array(3,4,3,6,2,7,2,8,7,9),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(),20
            ,"models/joe/rolling_stock/2ft/mc_hopper/mc_hopper.mdl",5,"usamerican coal_hopper loaded manifest hdetail joeconqueror preera 1900s 1910s 1920s 1930s 1940s joe2ft",vec4(198,-1,0,4),array(3,4,3,6,2,7,2,8),array(1,7,8,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),vec2(0,0),array(vec(2,1,1)),20

)

#Thanks to "papyrus8mt" (Wilde) for the re-sorting job.
     
    BOGIES = table()
    BOGIES["magphx",table] = table("models/magtrains/trucks/barber_s2_phx.mdl",           26,44,0,vec(90,65,55),"magnum new",array(),array(1,"models/props_gulch/tinycars/tc_colorable",2,"models/props_gulch/tinycars/tc_colorable",6,"models/props_gulch/tinycars/tc_lightgray",7,"models/proppertextures/wheel",9,"models/proppertextures/wheel"))
    BOGIES["magrsg",table] = table("models/magtrains/trucks/barber_s2_rsg.mdl",           26,44,0,vec(90,65,55),"magnum new",array(),array(1,"models/props_gulch/tinycars/tc_colorable",2,"models/props_gulch/tinycars/tc_colorable",5,"models/props_gulch/tinycars/tc_lightgray",6,"models/proppertextures/wheel",8,"models/proppertextures/wheel"))
    BOGIES["magold",table] = table("models/magtrains/freightbogey2.mdl",                  44,44,0,vec(90,65,55),"magnum phx",array(),array(1,"models/proppertextures/wheel",2,"models/proppertextures/wheel",3,"models/props_gulch/tinycars/tc_colorable"))
    BOGIES["rus5ft",table] = table("models/akandr/russian/bogie/cnii_hz_5ft.mdl",         34,57.5,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/props_gulch/tinycars/tc_lightgray",4,"models/proppertextures/wheel",5,"models/proppertextures/wheel"))
    BOGIES["rusphx",table] = table("models/akandr/russian/bogie/cnii_hz_phx.mdl",         34,57.5,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/props_gulch/tinycars/tc_lightgray",4,"models/proppertextures/wheel",5,"models/proppertextures/wheel"))
    BOGIES["rusrsg",table] = table("models/akandr/russian/bogie/cnii_hz_rsg.mdl",         34,57.5,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/props_gulch/tinycars/tc_lightgray",4,"models/proppertextures/wheel",5,"models/proppertextures/wheel"))
    BOGIES["joe2ft",table] = table("models/joe/bogies/2ft_2.mdl",                         -4,20,0,vec(90,65,55),"3ft",array(),array(1,"models/props_gulch/tinycars/tc_colorable",6,"models/props_gulch/tinycars/tc_lightgray",7,"models/props_gulch/tinycars/tc_lightgray"))
    BOGIES["gsgrsg33",table] = table("models/gsgtrainprops/parts/trucks/barber_s2_33in.mdl",26,44,90,vec(255),"grove rsg",array(),array())
    BOGIES["gsgphx33",table] = table("models/gsgtrainprops/parts/trucks/barber_s2_33in_phx.mdl",26,44,90,vec(255),"grove",array(),array())  
    BOGIES["gsgrsg36",table] = table("models/gsgtrainprops/parts/trucks/barber_s2hd_36in.mdl",26,44,90,vec(255),"grove rsg",array(),array())
    BOGIES["gsgphx36",table] = table("models/gsgtrainprops/parts/trucks/barber_s2hd_36in_phx.mdl",26,44,90,vec(255),"grove",array(),array())   
    BOGIES["gsgrsgleaf",table] = table("models/gsgtrainprops/parts/trucks/barber-bettendorf.mdl",26,44,90,vec(255),"grove rsg leaf",array(),array())
    BOGIES["gsgphxleaf",table] = table("models/gsgtrainprops/parts/trucks/barber-bettendorf_phx.mdl",26,44,90,vec(255),"grove leaf",array(),array())  
    BOGIES["coachphx",table]=table("models/magtrains/coachbogie1.mdl",                    20,44,0,vec(90,65,55),"magnum old",array(),array(1,"models/proppertextures/wheel",3,"models/props_gulch/tinycars/tc_colorable"))
    BOGIES["nsw2cmphx",table]=table("models/bogies/bogie_2cm_phx.mdl",                    19,42,0,vec(90,65,55),"linnie austrailian",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/proppertextures/wheel",4,"models/proppertextures/wheel"))
    BOGIES["nsw2cmrsg",table]=table("models/bogies/bogie_2cm_tp3.mdl",                    19,42,0,vec(90,65,55),"linnie rsg austrailian",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/proppertextures/wheel",4,"models/proppertextures/wheel"))
    BOGIES["uky25cphx",table]=table("models/bobsters_trains/uk/bogies/y25c.mdl",          50,55,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",3,"models/proppertextures/wheel",2,"models/proppertextures/wheel",5,"models/proppertextures/wheel"))
    BOGIES["tf2phx",table]=table("models/anytrains/rollingstock/freight/tf2/tf2_bogie_phx.mdl",24,44,90,vec(255),"",array(1,2),array())
    BOGIES["tf2rsg",table]=table("models/anytrains/rollingstock/freight/tf2/tf2_bogie_rsg.mdl",24,44,90,vec(255),"",array(1,2),array())
    BOGIES["buckeyersg",table]=table("models/zexciv_train_stuff/usa/bogies/buckeye_truck.mdl",27,44,90,vec(90,65,55),"",array(),array(1,"models/props_gulch/tinycars/tc_colorable",2,"models/props_gulch/tinycars/tc_colorable",3,"models/props_gulch/tinycars/tc_lightgray"))
    BOGIES["2axrsg42",table]=table("models/bobsters_trains_2/wheels/standard/double_42.mdl",24,44,90,vec(255),"",array(1,2),array())
    BOGIES["2axrsg36",table]=table("models/bobsters_trains_2/wheels/standard/double_36.mdl",18,44,90,vec(255),"",array(1,2),array())
    
    NUDGE = table()
    NUDGE["models/paducah/rollingstock/72_ft_refrigerated_boxcar.mdl",vector] = vec(0,-16,0)
    NUDGE["models/hanksabutt/rollingstock/wellcars/wellcar_lopac_end.mdl",vector] = vec(-36,0,0)
    
    Break = "models"
    
    #Misc Variables Priming and Hidden Settings
        
    ENTRIES_PER_MODEL = 9 #Number of data inputs per car
    QUOTA = 500 #Tick quota limit
    
    FIVE_FOOT_ENABLED = 0
    
    HoloID = 20 #some value above 2-3 so we can use the basic holograms
    HoloID = HoloID + 1 #happy, E2?
    SoundID = 1
    MDLTagIterator = 1
    
    LockInAngle = 0
    PreviousVerticalOffset = 0
    OldRailhead = 0
    Railhead = 0
    ScannerSpeed = 0
    CCCHue = 0
    ScanDistance = 0
    NewModelEntriesToProcess = 0
    TagPrinterGroups = 0
    TagPrinterItems = 0
    TagsPrinting = 0
    TotalTrainLength = 0
    TotalTrainWeight = 0
    BlockSameInARow = 0
    ParserCommasIterator = 0
    ParserSpacesIterator = 0
    ParserTagGroupsIterator = 0
    ParserTagItemsIterator = 0
    ParserPhase = 0
    NoDef = 0
    MdlTag= 0
    ValidAdditionalModels = 0
    OperationsArmingSwitch = 0
    CarSlopeAngle = 0
    SoundID = 0
    HoloID = 0
    RopeID = 0
    SpacerFtLength = 0
    ParserFlag = 0
    PreviousTagCount = 0
    DelayInterlock = 0
    GaugeDistance = 0
    SpawnPhase = 0
    DistToPreviousBogie = 0
    TagCount = 0
    CarIsLoaded = 0
    
    CarPreviouslySeen = ""
    TagsInGroup  = ""
    ForceUseThisBogie  = ""
    GaugeMode  = ""
    DonezoString  = ""
    SpecialInstructionSet  = ""
    ScanPhase = ""
    
    ParserLocatedTags = table()
    SpawningInstruction = table()
    MainCommandQueue = table()
    BogieData = table()
    AddModels = table()
    ScanPointsTable = table()
    SearchArchive = table()
    Props = table()
    MDLTable = table()
    CopySkin = table()
    
    PrinterStack = array()
    CarModelIDs = array()
    BlockedCarBuffer = array()
    BlockCurrentType = array()
    TagKeysPruned = array()
    CommandArchive = array()
    CarEntityArray = array()
    AnchorPoints = array()
    
    SpawnHeadEntity = noentity()
    ScanProp = noentity()
    
    LockInPosition = vec()
    SCEndPos = vec()
    ScanLastPosition = vec()
    SlopeAxis = vec()
    
    MainLoop = function(){}
    CommandLoop = function(){}
        
    #Variables for debugging purposes
    HIDE_CHAT = 1 #If 1, chat commands are hidden
    VARIANCE_EXPONENT = 0.85 #If 0, all cars have the same chance to spawn
    AIRBORNE_MODE = 0 #Makes the spawner ignore spawning conditions when spawning cars
    SCAN_INTERVAL = 0.2 #Scan Interval
    SNAP_TO_RAILS = 1 #If 1, the system will snap to the track.
    
    CCCHue = random(0,359) #Randomly set the starting CCCHue
    TEXT_COLOR = vec2(0.8,0.7) #Hue and lightness for Text
    COLOR_SPEED = 6*2.5 #how fast the color cycles on text and the Cone
    
    TotalTagGroups = TAG_DATA:count()
    #for MDLTag
    TAG_DATA:pushArray(array())
    
    WEIGHT_MULTIPLIER = WEIGHT_MULTIPLIER/2 #PT2 sees everything as double-weight, use this to negate it
    
    #Clamping vars
    WEIGHT_MULTIPLIER = clamp(WEIGHT_MULTIPLIER,0.1,5)
    LOADED_CHANCE = clamp(LOADED_CHANCE,0,1)
    LOAD_IMPACT = clamp(LOAD_IMPACT,0,1)
    PRINTING_DETAIL = owner():steamID() == "STEAM_0:0:58490966" ? 2 : clamp(round(PRINTING_DETAIL),0,2)
    DISPLAY_TAGS = clamp(round(DISPLAY_TAGS),0,1)
    SAFE_MODE = clamp(round(SAFE_MODE),0,1)
    FOLLOW_RAILS = clamp(round(FOLLOW_RAILS),0,1)
    BLOCK_STACK_SIZE = clamp(round(BLOCK_STACK_SIZE),1,30)
    SCANNER_VISIBLE = round(clamp(SCANNER_VISIBLE,0,1))
    Flipping_Direction = round(clamp(Flipping_Direction,-1,1))
    
    BLOCK_LENGTH_LIMIT = ceil(BLOCK_STACK_SIZE/8)
    BLOCK_END_CHANCE = 1-(1/(BLOCK_STACK_SIZE/8))
    
    CarLengthLimit = 0 
    
    if(LIMIT_CAR_LENGTH != 0){
        
        #considered setting it per-map, too much hassle.
        CarLengthLimit = 900
        
    }
    
    
    Break = "variables"
    
    #Functions
    
    function number safe(){ #Function that determines if the current iteration is out of processing time
        
        if(SAFE_MODE){
            
            return minquota() > QUOTA & perf()
            
        }else{
        
            return minquota() > QUOTA
            
        }

    } 
    
    function void playsound(Str:string){ #Consolidated function for playing sounds
        
        soundStop(3)
        
        if(Str == "err"){
            
            owner():soundPlay(3,100,"buttons/button11.wav",0)
            soundVolume(3,0.3)
            
        }elseif(Str == "ding"){
        
            owner():soundPlay(3,100,"buttons/bell1.wav",0)
            soundVolume(3,0.3)
            
        }elseif(Str == "spawn"){
        
            owner():soundPlay(3,100,"buttons/blip2.wav",0)
            soundVolume(3,0.3)
            
        }elseif(Str == "nope"){
        
            owner():soundPlay(3,100,"buttons/combine_button_locked.wav",0)
            
        }elseif(Str == "remove"){
            
            owner():soundPlay(3,100,"buttons/button19.wav",0)
            soundVolume(3,0.3)
            
        }elseif(Str == "space"){
        
            owner():soundPlay(3,100,"buttons/lever2.wav",0)
            soundVolume(3,0.2)
            
        }elseif(Str == "kill"){
        
            owner():soundPlay(3,100,"buttons/lever4.wav",0)
            soundVolume(3,0.2)
            
        }elseif(Str == "hmm"){
        
            owner():soundPlay(3,100,"buttons/button16.wav",0)
            
        }elseif(Str == "done"){
        
            owner():soundPlay(3,100,"buttons/button14.wav",0)
            soundVolume(3,0.3)
            
        }
        
    }
    
    function number metafind(Str1:string,Str2:string,Nclusive:number){ #For space-explode Str2, find matches in Str1. Nclusive switches between "and" or "or" behavior
        
        local N = 1
        
        foreach(OLD:number,Find:string = Str2:explode(" ")){
            
            #to get the compiler to shut up
            OLD = OLD
            
            if(!Str1:find(Find)){
                
                N = 0
                
            }elseif(Nclusive){
                
                return 1
                
            }
            
        }
        
        return N
        
    }
    
    function string extractModelName(FullPath:string){ #Returns the final part of any model path, sans .mdl

        local ModelnameArray = FullPath:explode("/")
        local ModelString = ModelnameArray[ModelnameArray:count(),string]
        return ModelString:sub(1,ModelString:length()-4)
        
    }
    
    function vector flat(V:vector){ #Returns a vector flattened along the Z axis
            
        return vec(V:x(),V:y(),0)
        
    }
    
    function number metacount(T:table,Depth:number){ #Count every item in every array in a table
        
        local O = 0
        
        for(X = 1, Depth){
            
            O = O + T[toString(X),array]:count()
            
        }
        
        return O
        
    }
    
    function string list(T:table,Depth:number){ #Collect every item in every array in a table into a string
        
        local O = ""
        
        for(X = 1, Depth){
            
            for(Y = 1, T[toString(X),array]:count()){
            
                O = O + T[toString(X),array][Y,string] + " "
                
            }
            
        }
        
        return O:trim()
        
    }
    
    function array prunekeys(Table:table){ #Similar to keys(), but only returns valid entries with some added sortingity specialized for the use case
        
        local Out = array()
        local Keys = Table:keys()
        
        foreach(OLD:number,Key:string = Keys){
            
            #shut up
            OLD = OLD
            
            if(Table[Key,array]:count()){
                
                if(Key == "1" | Key == "2"){
                    
                    Out:insertString(1,Key)
                    
                }elseif(Key != "9"){
                
                    Out:pushString(Key)
                    
                }
                
            }
            
        }
        
        return Out
        
    }
     
    #[ #Depreciated; now using the built-in hsl2rgb()
    function vector toRGB(HSL:vector){ #Converts HSL to RGB
        
        local Chr = (1 - abs(2 * HSL:z() - 1)) * HSL:y()
        local H = HSL:x()/60
        local MID =(1 - abs(H % 2 - 1)) * Chr
        
        if(H < 1){R = Chr, G = MID,B = 0
        }elseif(H < 2){R = MID,G = Chr, B = 0
        }elseif(H < 3){R = 0,G = Chr,B = MID
        }elseif(H < 4){R = 0,G = MID,B = Chr
        }elseif(H < 5){R = MID,G = 0,B = Chr
        }elseif(H < 6){R = Chr,G = 0,B = MID
        }else{R = 255,G = 255,B = 255}
        
        local M = HSL:z() - Chr/2
        return vec(R+M,G+M,B+M)*255
    
    }]#
    
    function void printS(Important:number,ToPrint:string){ #Processes long strings into Print:array format
        
        local CleanPrint = "[CCC] " +ToPrint
        local Width = 75

        if(PRINTING_DETAIL == 0 | (PRINTING_DETAIL == 1 & Important != 1)){
            
            return void
            
        }
        
        local PrintBreakNewlines = CleanPrint:explode("\n")
        local PrintLine = ""
        
        if(CleanPrint:length() <= Width & PrintBreakNewlines:count() == 1){ #If it's short enough and contains no extra lines, print it normally.
        
            PrinterStack = PrinterStack:add(array(CleanPrint))
            return void
            
        }
        
        foreach(OLD:number,StringLine:string = PrintBreakNewlines){ 
            
            OLD = OLD #shutte
            
            local StringFragments = StringLine:explode(" ")
            
            foreach(OLD:number,StringFragment:string = StringFragments){
                
                OLD = OLD #SHUTT
                
                if((PrintLine + StringFragment + " "):length() <= Width){
                    
                    PrintLine = PrintLine + StringFragment + " "
                    
                }else{
                        
                    PrinterStack = PrinterStack:add(array(PrintLine:trim()))
                    PrintLine = StringFragment+" "
                    
                }
                
            }
            
            if(PrintLine:trim() != ""){
                
                PrinterStack = PrinterStack:add(array(PrintLine:trim()))
                PrintLine = ""
                
            }
            
        }
        
    }
    
    function string getSpecialInstructions(Cartags:string){ #Takes a model tag block and returns the special instruction tag.
        
        local R = Cartags:explode("$")
        
        if(R:count() == 1){
            
            return ""
            
        }else{
        
            return R[2,string]
            
        }
        
    }
    
    function void takelog(LogName:string){ #Takes a log of the current system state and command stack.
        
        printS(1,"Took log \">e2shared/ccc_error_log_"+LogName+".txt\"")
        
        local LogOutput = 
        
        "Name: "+owner():name()
        +"\nOwner: "+owner():steamID()
        +"\nDate: "+date():toString()
        +"\nVersion: "+VERSION
        +"\nLockInAngle: "+LockInAngle
        +"\nPreviousVerticalOffset: "+PreviousVerticalOffset
        +"\nGaugeDistance: "+GaugeDistance
        +"\nRailhead: "+Railhead
        +"\nScannerSpeed: "+ScannerSpeed
        +"\nCCCHue: "+round(CCCHue)
        +"\nScanDistance: "+round(ScanDistance)
        +"\nNewModelEntriesToProcess: "+NewModelEntriesToProcess
        +"\nTagPrinterGroups: "+TagPrinterGroups
        +"\nTagPrinterItems: "+TagPrinterItems
        +"\nsystime(): "+systime()
        +"\nTotalTrainLength: "+round(TotalTrainLength)
        +"\nTotalTrainWeight: "+round(TotalTrainWeight)
        +"\nBlockSameInARow: "+BlockSameInARow
        +"\nRopeID: "+RopeID
        +"\nScanPhase: "+ScanPhase
        +"\nDistToPreviousBogie: "+DistToPreviousBogie
        +"\nParserCommasIterator: "+ParserCommasIterator
        +"\nParserSpacesIterator: "+ParserSpacesIterator
        +"\nParserTagGroupsIterator: "+ParserTagGroupsIterator
        +"\nParserTagItemsIterator: "+ParserTagItemsIterator
        +"\nParserPhase: "+ParserPhase
        +"\nNoDef: "+NoDef
        +"\nMdlTag: "+MdlTag
        +"\nTagCount: "+TagCount
        +"\nPreviousTagCount: "+PreviousTagCount
        +"\nParserFlag: "+ParserFlag
        +"\nSpacerFtLength: "+SpacerFtLength
        +"\nCarIsLoaded: "+CarIsLoaded
        +"\nCarPreviouslySeen: "+CarPreviouslySeen
        +"\nTagsInGroup: "+TagsInGroup
        +"\nForceUseThisBogie: "+ForceUseThisBogie
        +"\nGaugeMode: "+GaugeMode
        +"\nLockInPosition: "+round(LockInPosition)
        +"\nSCEndPos: "+round(SCEndPos)
        +"\nScanLastPosition: "+round(ScanLastPosition)
        +"\nSpawnHeadEntity: "+round(SpawnHeadEntity:pos())+" "+round(SpawnHeadEntity:angles())+" "+SpawnHeadEntity:model()
        +"\nScanProp: "+round(ScanProp:pos())+" "+round(ScanProp:angles())+" "+ScanProp:model()
        
        foreach(OLD:number,AddCMD:string = CommandArchive){
            
            OLD = OLD
            
            LogOutput = LogOutput +"\n"+ AddCMD
            
        }
        
        fileWrite(">e2shared/ccc_error_log_"+LogName+".txt",LogOutput)
        
    }
    
    function number validate(Model:string,Position:vector,Angle:angle){ #Function for catching bad spawning conditions and reporting a log
        
        holoModel(1,Model)
        local Err = 0
        
        if(holoEntity(1):model() != Model){
            
            Err = -1
            
        }
        
        local ToValidate = array(Position:x(),Position:y(),Position:z(),Angle:pitch(),Angle:yaw(),Angle:roll())
        
        foreach(K:number,Num:number = ToValidate){
            
            if(isnan(Num) | isinf(Num) | abs(Num) > 16384){Err = K}
                        
        }
        
        if(Err != 0){
            
            takelog(systime()+"-"+Err+"_"+ToValidate[Err,number]+"_err")
            printS(1,"Bad data encountered when spawning. Send this log to Metaladon, please.")
            return 0
            
        }
        
        return 1
        
    }

    function array randomBogieBodygroups(BogieModel:string,CarTags:string,CarTons:number,BodygroupOverride:array){ #Finds the bodygroups for a given bogie
        
        if(BodygroupOverride:count() != 0 & (BodygroupOverride:count() % 2 == 0)){ #If the Override pass-through is active, just use that.
            
            return BodygroupOverride
            
        }
        
        local Type = ""
        
        if(BogieModel:find("magtrains/trucks/barber_s2")){
            
            Type = "new"
            
        }elseif(BogieModel == "models/magtrains1ga/freightbogey2.mdl"){
            
            Type = "old"
            
        }else{
            
            return array()
            
        }
        
        local DataTranslator = table()
        DataTranslator["journal",table]   = table("new" = array(1,4),"old" = array(2,1,1,1))
        DataTranslator["converted",table] = table("new" = array(1,5),"old" = array(2,1,1,1))
        DataTranslator["roller",table]    = table("new" = array(1,1),"old" = array(2,1,1,1))
        DataTranslator["120ton",table]    = table("new" = array(1,3),"old" = array())
        DataTranslator["100ton",table]    = table("new" = array(1,2),"old" = array())
        
        if(CarTons > 105){
            
            return DataTranslator["120ton",table][Type,array] 
            
        }elseif(CarTons > 75){
            
            return DataTranslator["100ton",table][Type,array] 
            
        }
        
        #The numbers correspond to the percentage of old-school journal trucks in use for 70-ton cars.
        local Era70TonBehavior = array("preera",1,"1910s",1,"1920s",1,"1930s",0.9,"1940s",0.75,"1950s",0.4,"1960s",0.1)
        local JournalRate = 0
        
        for(X = 1,Era70TonBehavior:count()/2){
            
            if(CarTags:find(Era70TonBehavior[X*2-1,string])){ #Cycle through the possible options until you find the earliest one
                
                JournalRate = Era70TonBehavior[X*2,number]
                break
                
            }
            
        }
        
        if(JournalRate == 0){
            
            return DataTranslator["roller",table][Type,array] 
            
        }
                
        if(random() >= JournalRate){ #If the truck is a roller-bearing truck
            
            return DataTranslator["roller",table][Type,array] 
            
        }else{
            
            if(random() >= JournalRate){ #If it's a converted journal truck
                
                return DataTranslator["converted",table][Type,array] 
                
            }else{ #else, it's a normal journal truck
                
                return DataTranslator["journal",table][Type,array] 
                
            }
            
        }

    }
        
    function number modelLength(ModelIDNumber:number){ #Determines the length of a model
        
        Model = MODELS[ModelIDNumber,string]
        holoModel(1,Model)
        
        if(holoEntity(1):boxSize():y()-8 > holoEntity(1):boxSize():x()-8){
        
            return holoEntity(1):boxSize():y()-8+(MODELS[ModelIDNumber+3,vector4]:w())*2
            
        }else{
            
            return holoEntity(1):boxSize():x()-8+(MODELS[ModelIDNumber+3,vector4]:w())*2
        
        }
        
    }
    
    function number progress(IsLoaded:number,TonCapacity:number){ #Determines the final tonnage from capacity and load status
        
        return clamp(
        
        (((0.6 - (TonCapacity/120)*0.4)*TonCapacity)+TonCapacity)
        
         - ((TonCapacity*(1-IsLoaded))*LOAD_IMPACT)
        
        ,1,400)
        
        
    }
    
    function array colorConvert(InputArray:array){ #Turns arrays formatted as "1 x3, 2 x5" = array(3,5) to the format array(1,1,1,2,2,2,2,2) for random choice
        
        local OutputArray = array()
        
        if(!InputArray:count()){
            
            return array()
            
        }else{
            
            for(X = 1, InputArray:count()){
                
                for(OLD = 1,InputArray[X,number]){
                    
                    OLD = OLD
                    
                    OutputArray = OutputArray:add(array(X))
                    
                }
                
            }
            
            return OutputArray
            
        }
        
    }
    
    function number reprocessData(EntryNum:number){ #Turns car data into useable tables
        
        local CarDataEnd = EntryNum*ENTRIES_PER_MODEL
        local BaseModelString = AddModels[CarDataEnd-8,string]
        local TagString = AddModels[CarDataEnd-6,string]
        
        #If the entry is incomplete or invalid, cancel.
        if(BaseModelString == "" | AddModels[CarDataEnd,number] == 0){return 0}
        
        #Bogie Picker - process of elimination
        if(TagString:find("ussrussian")){
            
            TagString = TagString + " rus5ft rusphx rusrsg"
            
        }elseif(TagString:find("caboose")){
            
                TagString = TagString + " gsgphxleaf gsgrsgleaf" 
        
        }elseif(TagString:find("msts")){
            
            if(TagString:find("auto")){
                
                TagString = TagString + " gsgphx33 gsgrsg33" 
                
            }elseif(AddModels[CarDataEnd,number] < 70){ #Is this a heavy car?
            
                TagString = TagString + " gsgphx36 gsgrsg36" 
                
            }else{
            
                TagString = TagString + " gsgphx33 gsgrsg33" 
                
            }
            
        }elseif(TagString:find("passenger")){
            
            TagString = TagString + " coach"
            
        }elseif(!TagString:find("2ft") & !TagString:find("nsw2cmphx") & !TagString:find("uky25cphx")){
            
            TagString = TagString + " magphx magrsg"
            
        }
        
        ModelName = extractModelName(BaseModelString)
        
        TAG_DATA[TotalTagGroups+1,array]:pushString(ModelName) #so MdlTag works on imported cars
        
        TagString = TagString + " "+ModelName
        
        MODELS:pushString(ModelName)
        MODELS:pushNumber(AddModels[CarDataEnd-7,number])
        MODELS:pushString(TagString)
        MODELS:pushVector4(AddModels[CarDataEnd-5,vector4])
        MODELS:pushArray(AddModels[CarDataEnd-4,array])
        MODELS:pushArray(colorConvert(AddModels[CarDataEnd-3,array]))
        MODELS:pushVector2(AddModels[CarDataEnd-2,vector2])
        MODELS:pushArray(AddModels[CarDataEnd-1,array])
        MODELS:pushNumber(AddModels[CarDataEnd,number])
        
        return 1 #Success!
        
    }
    
    function array locate(DistanceFromStart:number){ #Function that turns a distance into a position on the track via a graph
        
        if(DistanceFromStart < 0){print("Negative overload! This is bad! Report this bug to Metaladon.: "+DistanceFromStart)}
        if(DistanceFromStart > ScanDistance){print("Positive overload! This is bad! Report this bug to Metaladon. "+DistanceFromStart)}
        
        if(!FOLLOW_RAILS){ #If it's just spawning straight, do a dumb "from where I am right now" spawning.
            
            return array(LockInPosition+ (vec(DistanceFromStart,0,0)):rotateAroundAxis(vec(0,0,1),LockInAngle),LockInAngle+90)
            
        }
        
        local RelevantSegment = clamp(floor(DistanceFromStart/(SCAN_INTERVAL*(ScannerSpeed)*1.1)),1,ScanPointsTable:count()-1) #Rough guess for RelevantSegment
        
        while(ScanPointsTable[RelevantSegment,array][3,number] > DistanceFromStart | ScanPointsTable[RelevantSegment+1,array][3,number] < DistanceFromStart){ #Loop moves RelevantSegment towards the correct answer
            
            if(ScanPointsTable[RelevantSegment,array][3,number] > DistanceFromStart){RelevantSegment--}else{RelevantSegment++}
            
        }
        
        local RelevantSegmentClamped = clamp(RelevantSegment,0,ScanPointsTable:count()-1) #Clamp RelevantSegment
        
        local Point1Data = ScanPointsTable[RelevantSegmentClamped,array]
        local Point2Data = ScanPointsTable[RelevantSegmentClamped+1,array]
        
        local Point1Angle = Point1Data[2,angle]:yaw() #First angle
        local Point2Angle = Point2Data[2,angle]:yaw() #Second angle
        
        local Relative = Point2Data[1,vector] - Point1Data[1,vector] #Calculate the inbetween vector
        
        local StockDiff = (Point2Angle-Point1Angle)%360
        local AngularDifference = (StockDiff)*2 % 360 - StockDiff #Calculate the inbetween angle
        
        local InterpolationPercent = clamp((DistanceFromStart-Point1Data[3,number])/(Relative:length()),0,1) #Calculate how far to go between the 2 points
        
        return array(Point1Data[1,vector] + Relative*InterpolationPercent, Point1Data[2,angle]:yaw() + AngularDifference*InterpolationPercent) #Return an array of the final position, yaw, and state (is it at the end of the tether or not)

         
    }
    
    function number isOnRails(Ent:entity){ #Checks to see if the prop is on the rails
            
        rangerFilter(Ent)
        local Ranger1 = rangerOffset(200,Ent:toWorld(vec((GaugeDistance/2)-1,0,-Railhead-6):rotateAroundAxis(vec(0,0,1),PreviousVerticalOffset)),(Ent:forward()-Ent:right()):rotateAroundAxis(vec(0,0,1),PreviousVerticalOffset))
        local Ranger2 = rangerOffset(200,Ent:toWorld(vec(-(GaugeDistance/2)+1,0,-Railhead-6):rotateAroundAxis(vec(0,0,1),PreviousVerticalOffset)),(-Ent:forward()-Ent:right()):rotateAroundAxis(vec(0,0,1),PreviousVerticalOffset))
        
        return (Ranger1:hit() & Ranger2:hit())
        
    }
    
    function void endScan(){ #Ends the current scan
        
        if(ScanProp:isValid()){
        
            ScanProp:constraintBreak()
            
            ScanProp:setPos(vec(0))
            ScanProp:propFreeze(1)
            ScanProp:noCollideAll(1)
            ScanProp:setAlpha(0)
            
        }
        
        stoptimer("ScanTick")
        stoptimer("StartScanning")
        
    }
    
    function string determinebogie(Str:string){ #Determines what the main bogie string should be
        
        if(Str == "" | metafind("models/magtrains/trucks/barber_s2_phx.mdl new",Str,0)){
            
            return "models/magtrains/trucks/barber_s2_phx.mdl"
            
        }elseif(metafind("models/magtrains/trucks/barber_s2_rsg.mdl new",Str,0)){
        
            return "models/magtrains/trucks/barber_s2_rsg.mdl"
            
        }elseif(metafind("models/joe/bogies/2ft_2.mdl",Str,0)){
        
            return "models/joe/bogies/2ft_2.mdl"
            
        }elseif(metafind("models/akandr/russian/bogie/cnii_hz_5ft.mdl",Str,0) & FIVE_FOOT_ENABLED){
        
            return "models/akandr/russian/bogie/cnii_hz_5ft.mdl"
            
        }else{
        
            return ""
            
        }
        
        
    }
    
    function string switchGauge(InputString:string){ #Switches the current SpawnHeadEntity and Scanner props to the head type, deleting the heads
        
        local StoredPosition = vec()
        local StoredAngles = ang()
        local State = 0
        local NewOffset = 0
        local TempScanProp = entity()
        
        SpawnHeadEntity:noCollideAll(1)
        
        
        switch(InputString){ #Determine which kind the bogie is
            
            case("models/magtrains/trucks/barber_s2_phx.mdl"),
                
                Railhead = 26 - RAILHEAD_EXTRA_HEIGHT
                GaugeDistance = 80
                State = 1
                
            break
            case("models/magtrains/trucks/barber_s2_rsg.mdl"),
            
                Railhead = 26 - RAILHEAD_EXTRA_HEIGHT
                GaugeDistance = 56
                State = 2
            
            break
            case("models/joe/bogies/2ft_2.mdl"),
            
                Railhead = -4 - RAILHEAD_EXTRA_HEIGHT
                GaugeDistance = 32
                State = 3
            
            break
            case("models/akandr/russian/bogie/cnii_hz_5ft.mdl"),
            
                Railhead = 34 - RAILHEAD_EXTRA_HEIGHT
                GaugeDistance = 60
                State = 4
                NewOffset = 90
            
            break
            default,
                
                propDeleteAll()
                error("This is impossible, right? How did you get a bad string here after completing a check?")
            
        }
        
        ScannerSpeed = select(State,750,750,300,750) #Set the ScannerSpeed
        
        if(MainCommandQueue[1,table][1,string] == "respawn"){ #If the current instruction involves deleting the head, use this stored data
        
            StoredPosition = MainCommandQueue[1,table][2,vector]
            StoredAngles = MainCommandQueue[1,table][3,angle]
            
        }elseif(first()){ #If it's the first iteration, use the E2's position as a base and nullify Railhead
        
            StoredPosition = entity():pos()
            StoredAngles = entity():angles()
            OldRailhead = Railhead
            
        }else{
        
            StoredPosition = SpawnHeadEntity:pos()
            StoredAngles = SpawnHeadEntity:angles()
            
        }
        
        propSpawnUndo(0)
        enableConstraintUndo(0)
        
        if(propCanCreate()){ #Spawning the scanner object first, else retry
            
            TempScanProp = propSpawn(InputString,vec(0),ang(0,0,0),1) #Spawn Scanner Object
            
        }else{
        
            return ""
            
        }
        
        if(InputString == entity():model()){ #If the head is going to become the entity
            
            if(SpawnHeadEntity != entity()){SpawnHeadEntity:propDelete()}
            SpawnHeadEntity = entity()
            entity():setAlpha(255)
            
        }elseif(propCanCreate()){ #Try to spawn a head, else retry
            
            if(SpawnHeadEntity != entity()){SpawnHeadEntity:propDelete()}
            SpawnHeadEntity = propSpawn(InputString,StoredPosition+vec(0,0,8-OldRailhead+Railhead),StoredAngles:rotateAroundAxis(vec(0,0,1),NewOffset-PreviousVerticalOffset),0) #Create Spawner Object
            
        }else{
            
            return ""
            
        }
        
        #Past this point, it's confirmed that SpawnHeadEntity and ScanProp are valid.
        
        ScanProp:propDelete()
        ScanProp = TempScanProp
        ScanProp:setMass(500)
        ScanProp:setAlpha(0)
        ScanProp:propPhysicalMaterial("friction_00")
        ScanProp:setMaterial("models/props_combine/health_charger_glass")
        
        if(ScanProp:isValid() & SpawnHeadEntity:isValid()){
            
            ScanProp:noCollide(SpawnHeadEntity)
            
        }
        
        propSpawnUndo(1)
        enableConstraintUndo(1)

        if(InputString != entity():model()){
            
            timer(0.2,function(){entity():setPos(vec(0,0,10))})
            entity():propFreeze(1)
            entity():setAlpha(0)
            
        }
        
        SpawnHeadEntity:setMass(50000)
        SpawnHeadEntity:constraintBreak()
        
        local HoloPos = select(State,vec(0,70,-7),vec(0,70,-7),vec(0,38,12),vec(68,0,-16))
        local HoloScale = vec(1,1,1.5)*select(State,2.5,2.5,1.25,2.5)
        local HoloAngle = select(State,ang(0,0,-90),ang(0,0,-90),ang(0,0,-90),ang(0,-90,-90))
        
        holoCreate(0,SpawnHeadEntity:toWorld(HoloPos),HoloScale,SpawnHeadEntity:toWorld(HoloAngle),vec(0,0,0),"cone") #spawns the "This Way Forward" cone
        holoParent(0,SpawnHeadEntity)
        holoMaterial(0,"debug/debugdrawflat")
        SpawnHeadEntity:setColor(hsl2rgb(vec(CCCHue,0.5,0.5)))
        holoColor(0,hsl2rgb(vec(CCCHue,0.5,0.5)))
        
        holoCreate(1) #this is for checking models against
        holoPos(1,SpawnHeadEntity:pos())
        holoParent(1,SpawnHeadEntity) 
        holoAlpha(1,0)
        holoShadow(1,0)
        holoModel(1,"cube")
        
        local SpawnHeadEntityPos = StoredPosition+vec(0,0,8-OldRailhead+Railhead) #Minor offset

        PreviousVerticalOffset = NewOffset
        OldRailhead = Railhead
        
        if(!SNAP_TO_RAILS){ #if no snapping action, don't bother with the next step
            
            return select(State,"PHX","RSG","2ft","5ft") #Return gauge
            
        }
        
        SpawnHeadEntity:propFreeze(0)
        timer(0.8,function(){SpawnHeadEntity:propFreeze(1)})
        
        local DirectionsToQuery = 4
        local Depth = -37
        local Depth2 = -41
        
        local Angle = vec(0)
        local Hitpos = vec(0)
        local Shortest = 100000
        
        if(State == 3){Depth = 4,Depth2 = 0}
        if(!first()){Depth = Depth - 8,Depth2 = Depth2 - 8}
        
        rangerFilter(SpawnHeadEntity)
        
        local Rangers = array()
    
        for(RayNumber = 1,DirectionsToQuery){ #For every direction, get 4 rangers.
            
            local DirectionVector = vec(1,0,0):rotateAroundAxis(vec(0,0,1),RayNumber*(360/DirectionsToQuery))
                
            local RangerPosition = SpawnHeadEntityPos + vec((GaugeDistance-4)/2,0,Depth):rotateAroundAxis(vec(0,0,1),RayNumber*(360/DirectionsToQuery))
            
            #There's 4 of them for the various possible depths relative to the spawner that you might encounter. I couldn't find a better way.
            Rangers:pushRanger(rangerOffset(GaugeDistance*3,RangerPosition,DirectionVector))
            Rangers:pushRanger(rangerOffset(GaugeDistance*3,RangerPosition+vec(0,0,-Depth+Depth2),DirectionVector))
            Rangers:pushRanger(rangerOffset(GaugeDistance*3,SpawnHeadEntityPos + vec(0,0,Depth),DirectionVector))
            Rangers:pushRanger(rangerOffset(GaugeDistance*3,SpawnHeadEntityPos + vec(0,0,Depth2),DirectionVector))            
    
        }
        
        foreach(OLD:number,Ranger:ranger = Rangers){ #Sort through the rangers and find the shortest possible one.
            
            OLD = OLD
            
            if(Ranger:distance() != 0 & Ranger:hit() & abs(Ranger:hitNormal():z()) < 0.5 & Ranger:distance() < Shortest){
                
                Angle = Ranger:hitNormal()
                Hitpos = Ranger:pos()
                Shortest = Ranger:distance()
                
            }
            
        }
        
        if(Angle != vec(0)){ #If one of the previous rangers was sucessful, run 2 rangers for "which side is longer" and place the spawner on the rails
        
            local RangDirection1 = vec(1,0,0):rotateAroundAxis(vec(0,0,1),Angle:toAngle():yaw()+90)
            local RangDirection2 = vec(1,0,0):rotateAroundAxis(vec(0,0,1),Angle:toAngle():yaw()-90)
                
            local RangLong1 = rangerOffset(10000,Hitpos+(Angle*1.5),RangDirection1):distance()
            local RangLong2 = rangerOffset(10000,Hitpos+(Angle*1.5),RangDirection2):distance()
             
            SpawnHeadEntity:setAng(ang(0,Angle:toAngle():yaw()+PreviousVerticalOffset+((RangLong1 > RangLong2) ? 0 : 180),0))
            SpawnHeadEntity:setPos(Hitpos+(Angle*(GaugeDistance/2))+vec(0,0,-Depth))
            
            local GaugeRanger = (round(rangerOffset(10000,Hitpos,Angle):distance()/8))*8 #distance between the rails rounded to the nearest 8 units
            local FoundGauge = ""
            
            if(GaugeRanger == 56){
                
                FoundGauge = "rsg"
            
            }elseif(GaugeRanger == 32){
            
                FoundGauge = "2ft"
            
            }elseif(GaugeRanger == 80){
            
                FoundGauge = "phx"
                
            }      
            
            if(GaugeDistance != GaugeRanger & first() & FoundGauge != ""){ #If it's the first iteration, switch to the gauge if detected
                
                MainCommandQueue:pushTable(table("gauge",FoundGauge))
                CommandArchive:pushString(systime()+" mode "+FoundGauge)
                
            }  
            
        }elseif(!first()){SpawnHeadEntity:setPos(SpawnHeadEntityPos)}
        
        return select(State,"PHX","RSG","2ft","5ft") #Return gauge
    }
    
    function table calibogie(BogieString:string){ #Finds the correct bogie for the given input string
        
        if(BOGIES[BogieString,table][1,string] != ""){
            
            return BOGIES[BogieString,table]
            
        }
        
        local BogieKeys = BOGIES:keys()
        
        foreach(OLD:number, Entry:string = BogieKeys){
            
            OLD = OLD
            
            if(metafind(BOGIES[Entry,table][1,string]+BOGIES[Entry,table][6,string],BogieString,0)){
                
                return BOGIES[Entry,table]   
                
            }
            
        }
        
        #If no bogie model has been found, default to an existing one.
        
        if(GaugeMode == "PHX"){
        
            #printS(0,"Invalid bogie model. Reverted to \"barber_s2_phx\".")
            return BOGIES["magphx",table]
            
        }elseif(GaugeMode == "RSG"){
        
            #printS(0,"Invalid bogie model. Reverted to \"barber_s2_rsg\".")
            return BOGIES["magrsg",table]
            
        }elseif(GaugeMode == "2ft"){
        
            #printS(0,"Invalid bogie model. Reverted to \"2ft_2\".")
            return BOGIES["joe2ft",table]
        
        }
        
        return table()
            
    }
    
    function number findnext(CurrentCarBufferType:array){ #Finds the next matching car in the list of buffered cars
        
        local SpecificType = CurrentCarBufferType[1,string]
        local TrainType = CurrentCarBufferType[2,string]
        local IsLoaded = CurrentCarBufferType[3,number]
        
        if(SpecificType == ""){return 0}
        
        for(X = 1, BlockedCarBuffer:count()){
            
            #If you can find the specific type in an existing car AND they're the same load status, choose it.
            if(metafind(MODELS[BlockedCarBuffer[X,vector2]:x()+2,string],SpecificType,1) & BlockedCarBuffer[X,vector2]:y() == IsLoaded){
                
                BlockSameInARow++
                return X
                
            }
            
        }
        
        #No cars found with the same specific type. Breaking up the block.
        BlockSameInARow = 0
        if(TrainType == ""){return 0}
        
        for(X = 1, BlockedCarBuffer:count()){
            
            #If you can find the train type in an existing car, use that one.
            if(metafind(MODELS[BlockedCarBuffer[X,vector2]:x()+2,string],TrainType+" "+SpecificType,1)){
                
                return X
                
            }
            
        }
        
        #Didn't find anything matching train type or specific type + load type
        return 0
        
    }
    
    function string resolveTagsToType(ModelTags:string){ #Resolves car tags to a definite car type
        
        local Choice = array()
        
        foreach(OLD:number, Entry:string = TAG_DATA[1,array]){
            
            OLD = OLD
        
            if(ModelTags:find(Entry) & Entry != "anytype"){
                
                Choice:pushString(Entry)
                
            }
            
        }
        
        return Choice[randint(1,Choice:count()),string]
        
    }
    
    function array resolveModelIDToBlockInfo(ModelIDNumber:number){ #Resolves a ModelIDToSpawn to a Train Type + Load state for use in the next iteration
        
        local ModelTags = MODELS[ModelIDNumber+2,string]
        local ReturnInfo = array()
        local Choice = array()
        
        ReturnInfo[1,string] = resolveTagsToType(ModelTags)
        
        foreach(OLD:number,Entry:string = BLOCK_TYPES){
            
            OLD = OLD
        
            if(metafind(ModelTags,Entry,1)){
                
                Choice:pushString(Entry)
                
            }
            
        }
        
        ReturnInfo[2,string] = Choice[randint(1,Choice:count()),string]
        
        return ReturnInfo
        
    }
    
    function string getBogie(Str:string){ #Resolves a bogie type for a car
        
        BogeyKeys = BOGIES:keys()
        BogieRoller = array()
        
        foreach(OLD:number,Key:string = BogeyKeys){
            
            OLD = OLD
            
            if(Key:find(GaugeMode:lower()) & Str:find(Key)){
                
                BogieRoller:pushString(Key)
                
            }
            
        }
        
        return BogieRoller[randint(1,BogieRoller:count()),string]
        
    }
    
    function void resetSpawn(){ #Resets all elements of the Spawning procedure as well as all train data storage variables
        
        ParserSpacesIterator = ParserTagGroupsIterator = ParserTagItemsIterator = 1
        Props = table()
        endScan()
        ForceUseThisBogie = ""
        ParserCommasIterator = TotalTrainLength = TotalTrainWeight = ParserPhase = SpacerFtLength = ModelIDToSpawn = BlockSameInARow = DistToPreviousBogie = 0
        BlockedCarBuffer = array()
        BlockCurrentType = array()
        
    }
    
    function void logScanner(CurrentDistance:number){
        
        local ScanTick = function(){ #When the scan clk goes off
        
            local TraveledDistance = (ScanProp:pos() - ScanLastPosition):length() #Calculate the added distance
            
            if((isOnRails(ScanProp) & TraveledDistance >= 0.9*(SCAN_INTERVAL*ScannerSpeed)) | AIRBORNE_MODE){ #If the system hasn't been derailed or stopped since the last scan tick, or AIRBORNE_MODE:
                
                ScanDistance += TraveledDistance
                logScanner(ScanDistance)
                
            }else{ #if derailed or stopped, terminate with a different code
                
                endScan()
                ScanPhase = "bad"
                
            }
            
        }
        
        ScanLastPosition = ScanProp:pos()
        ScanPointsTable:pushArray(array(round(ScanProp:pos(),2),round(ScanProp:angles()),round(CurrentDistance,2)))
        ScanProp:propSetVelocity(ScanProp:right()*-ScannerSpeed)
        timer("ScanTick",SCAN_INTERVAL,0,ScanTick)
        
    }
    
    function void finalizeSpawnCommand(SearchString:string){
        
        if(SearchArchive[SearchString,array]:count() != 0){
            
            MainCommandQueue[1,table] = table("spwn",MainCommandQueue[1,table][3,vector]:x(),MainCommandQueue[1,table][3,vector]:y(),MainCommandQueue[1,table][3,vector]:z(),SearchArchive[SearchString,array],MainCommandQueue[1,table][4,string])
                
            printS(0,"Found " + (SpawningInstruction[5,array]:count()-2)/2 + " car variants matching searched tags.")
            CommandArchive:pushString(systime()+" added SPWN via SearchArchive")
            ParserCommasIterator = 0
            
        }else{
        
            SpawningInstruction = table("spwn",MainCommandQueue[1,table][3,vector]:x(),MainCommandQueue[1,table][3,vector]:y(),MainCommandQueue[1,table][3,vector]:z(),array(0),MainCommandQueue[1,table][4,string])
            
        }
        
    }
    
    function void spawningStartupProcedure(){
        
        holoEntity(1):soundPlay(2,100,"ambient/computer_working2.wav",0)
        soundPitch(2,250)
        
        if(SpawnHeadEntity:isValid()){
                
            if(GaugeMode == "5ft"){Acc = -90}else{Acc = 0}
            
            LockInPosition = SpawnHeadEntity:pos()
            LockInAngle = ((round(((SpawnHeadEntity:angles():yaw()+ Acc+ 90)/180)*16)/16)*180) #convoluted method of rounding to the nearest 16 degrees angle
        
            holoUnparent(0)
            
        }
        
        #Make a blank Spawning instruction. Clears all the registers used for Tag parsing.
        CarPreviouslySeen = ""
        ParserLocatedTags = table()
        ParserCommasIterator = ParserSpacesIterator = ParserTagGroupsIterator = ParserTagItemsIterator = 1
        ParserPhase = 0
        TagCount = 0
        
        local SpawningString = ""
        
        for(X = 1, MainCommandQueue[1,table][2,string]:explode(" "):count()-2){ #Amend the input to be more streamlined
            
           SpawningString = SpawningString +  " " + MainCommandQueue[1,table][2,string]:explode(" ")[X+2,string]
        
        }
        
        SpawningString = SpawningString:trim()
        
        MainCommandQueue[1,table][2,string] = SpawningString
        CommandArchive:pushString(systime()+" modified SpawningString")
        
        finalizeSpawnCommand(SpawningString)
        
    }
    
    function void spaceParserProcedure(CurrentSpaceString:string){
        
        if(CurrentSpaceString == "mt"){ #pair of workarounds for abbreviating loaded and empty - thanks for the suggestion.... whoever suggested that.
            
            ParserLocatedTags["6",array] = ParserLocatedTags["6",array]:add(array("empty","invisiload"))
            
        }elseif(CurrentSpaceString == "ld"){
            
            ParserLocatedTags["6",array] = ParserLocatedTags["6",array]:add(array("loaded","invisiload"))
            
        }
        
        while(ParserTagGroupsIterator <= TotalTagGroups+MdlTag & safe()){ #While Counter 2 <= the number of potential tag blocks
            
            while(ParserTagItemsIterator <= TAG_DATA[ParserTagGroupsIterator,array]:count() & safe()){ #While Counter 3 <= the tags in the current tag block
                
                local CurrentTagDataBlock = TAG_DATA[ParserTagGroupsIterator,array][ParserTagItemsIterator,string]
                local IteratorString = toString(ParserTagGroupsIterator)
                
                if(CurrentTagDataBlock:find(CurrentSpaceString)){ #If this input is found within the currently selected tag in the tag block
                    
                    if(CurrentTagDataBlock == "loaded" | CurrentTagDataBlock == "empty"){ #Workaround for Invisiload
                        
                        ParserLocatedTags[IteratorString,array] = ParserLocatedTags[IteratorString,array]:add(array("invisiload"))
                        
                    }
                    
                    ParserLocatedTags[IteratorString,array] = ParserLocatedTags[IteratorString,array]:add(array(CurrentTagDataBlock)) #Add the tag to the Tags output
                    TagCount++
                    
                }
                
                ParserTagItemsIterator++
                 
            }
            
            if(ParserTagItemsIterator > TAG_DATA[ParserTagGroupsIterator,array]:count()){ #Counter 3 terminator
                
                ParserTagGroupsIterator++
                ParserTagItemsIterator = 1
                
                
            }
            
        }
        
        if(ParserTagGroupsIterator > TotalTagGroups+MdlTag){ #Counter 2 terminator
            
            if(TagCount == PreviousTagCount){ #If no tags were added to the list, print a minor error
                
                printS(0,"Couldn't find a tag matching \"" + CurrentSpaceString + "\"")
                playsound("hmm")
                
            }
            
            ParserSpacesIterator++
            ParserTagGroupsIterator = 1
            PreviousTagCount = TagCount
            
        }
        
    }
    
    function number runSpecialRules(CarID:number){
        
        if(NO_TF2_CARS == 1 && MODELS[CarID*ENTRIES_PER_MODEL-6,string]:find("tf2")){
            
            return -1
            
        }elseif(CarLengthLimit > 0 && CarLengthLimit < modelLength(CarID*ENTRIES_PER_MODEL-8) && !MODELS[CarID*ENTRIES_PER_MODEL-6,string]:find("$")){
            
            return -1
            
        }
        
        return 0
        
    }
    
    function void commaParserProcedure(CurrentCommaString:string){

        if(!ParserPhase){ #If it's the first part of the process
            
            ParserPhase = ParserSpacesIterator = ParserTagGroupsIterator = ParserTagItemsIterator = 1
            NoDef = 0
            MdlTag = 0
            
            if(CurrentCommaString:find("mdltag")){#Account for Nodef and MDL
                
                MdlTag = 1
                NoDef = 1
                
            }elseif(CurrentCommaString:find("nodef")){ 
                
                NoDef = 1
                
            }
            
        }
        
        SpawnStringSpacesExplode = CurrentCommaString:explode(" ")
        
        if(ParserPhase == 1){ #Phase 1: What are the Valid Tags?
            
            while(ParserSpacesIterator <= SpawnStringSpacesExplode:count() & safe()){ #While Counter 1 <= the number of space-separated segments in the current comma segment
                
                CurrentSpaceString = SpawnStringSpacesExplode[ParserSpacesIterator,string]
                
                if(CurrentSpaceString == "" | CurrentSpaceString == "nodef" | CurrentSpaceString == "mdltag"){ #Skip if the tag is (somehow) empty, or if it's a special tag
                    
                    ParserSpacesIterator++
                    ParserTagGroupsIterator = 1
                    PreviousTagCount = TagCount
                    continue
                    
                }else{
                
                    spaceParserProcedure(CurrentSpaceString)
                    
                }
                
            }
            
            if(ParserLocatedTags:count() == 0 & ParserSpacesIterator > SpawnStringSpacesExplode:count()){ #If no tags were selected overall when Counter 1 terminates

                printS(0,"No tags selected!") #Print a minor error, stop scanning, and reset things.
                endScan() 
                playsound("err")
                soundStop(2)
                ParserPhase = 0
                MainCommandQueue:remove(1)
                CommandArchive:pushString(systime()+" finished SP via no tags selected")
                ParserSpacesIterator = ParserTagGroupsIterator = ParserTagItemsIterator = 1
                PreviousTagCount = TagCount = 0
                ParserCommasIterator = 9999
                
            }elseif(ParserSpacesIterator > SpawnStringSpacesExplode:count()){ #If we have found tags and terminated Counter 1, continue to Phase 2
            
                ParserPhase = 2
                ParserSpacesIterator = ParserTagGroupsIterator = ParserTagItemsIterator = 1
                PreviousTagCount = TagCount = 0
                
                if(!NoDef){ #If !Nodef, apply default tags
                    
                    for(ParserTagGroupsIterator = 1, TotalTagGroups){ #For every tag block, minus MDLTag
                        
                        if(!ParserLocatedTags[toString(ParserTagGroupsIterator),array]:count()){ #If tag block is uninhabited, populate with default tags
                            
                            if(ParserTagGroupsIterator == 2 & GaugeMode != "2ft"){
                                
                                printS(0,"No era specified! Forced era to \""+DEFAULT_TAGS[ParserTagGroupsIterator,array][1,string]+"\".")
                                ParserLocatedTags[toString(ParserTagGroupsIterator),array] = DEFAULT_TAGS[ParserTagGroupsIterator,array]
                                
                            }elseif(ParserTagGroupsIterator != 2 | GaugeMode != "2ft"){
                                
                                ParserLocatedTags[toString(ParserTagGroupsIterator),array] = DEFAULT_TAGS[ParserTagGroupsIterator,array]
                                
                            }
                                        
                        }
                        
                    }
                    
                }
                
                ParserLocatedTags[toString(ParserLocatedTags:count()+1),array] = array(GaugeMode:lower())
                
                TagKeysPruned = prunekeys(ParserLocatedTags)
                
                if(!DISPLAY_TAGS){printS(0,"Applied " + metacount(ParserLocatedTags,10) + " tags.")}else{printS(0,"Applied " + metacount(ParserLocatedTags,10) + " tags. " + list(ParserLocatedTags,10))}
                
            }
            
        }
        
        if(ParserPhase == 2){ #Phase 2: What are the Valid Cars?
            
            
            
            while(ParserSpacesIterator <= MODELS:count()/ENTRIES_PER_MODEL && safe()){ #While Counter 1 <= the number of car options
                
                ParserFlag = runSpecialRules(ParserSpacesIterator)
    
                while(ParserTagGroupsIterator <= TagKeysPruned:count() & safe() && ParserFlag == 0){ #While Counter 2 <= the number of tag blocks
                    
                    local ParserLocatedTagsByCategory = ParserLocatedTags[TagKeysPruned[ParserTagGroupsIterator,string],array]
    
                    while(ParserTagItemsIterator <= ParserLocatedTagsByCategory:count() & safe()){ #While Counter 3 <= the number of tags in the tag block
                        
                        local ModelExplode = MODELS[ParserSpacesIterator*ENTRIES_PER_MODEL-8,string]:explode("/")
                        local TagOverrideCheck = TAG_OVERRIDES[TagKeysPruned[ParserTagGroupsIterator,string]:toNumber(),string]
                                                
                        #if, within the tag block, a tag is found, 
                        if(MODELS[ParserSpacesIterator*ENTRIES_PER_MODEL-6,string]:find(ParserLocatedTagsByCategory[ParserTagItemsIterator,string]) ||
                        
                        #OR, if we're dealing with the Models block, look for the tag within the model path
                        (TagKeysPruned[ParserTagGroupsIterator,string] == (TAG_DATA:count():toString()) && ModelExplode[ModelExplode:count(),string]:find(ParserLocatedTagsByCategory[ParserTagItemsIterator,string])) ||
                        
                        #OR, the TagOverrideCheck isn't nothing, and 
                        (ParserLocatedTagsByCategory[ParserTagItemsIterator,string] == TagOverrideCheck && TagOverrideCheck != "")){
                            
                            ParserFlag = 1
                            break
                            
                        }else{
                        
                            ParserTagItemsIterator++
                            
                        }
                        
                    }
                    
                    if(ParserTagItemsIterator > ParserLocatedTagsByCategory:count()){ #If no matching tags in that block were found and it ran for more than 0 iterations, skip this car
                        
                        ParserFlag = -1
                        break
                        
                    }elseif(ParserFlag){ #If the system has found at least 1 tag, advance to the next tag block
                        
                        ParserFlag = 0
                        ParserTagItemsIterator = 1
                        ParserTagGroupsIterator++
                        
                    }
    
                }
    
                if(ParserTagGroupsIterator > TagKeysPruned:count()){ #If Counter 2 is concluded without breaking:
                    
                    local CarLoaded = 0
                    local CarEmpty = 0
                    
                    foreach(OLD:number, Substring:string = ParserLocatedTags[toString(10),array]){ #Search for load tags, "sticky" if found
                        
                        OLD = OLD
                    
                        CarLoaded = max(Substring == "loaded",CarLoaded)
                        CarEmpty = max(Substring == "empty",CarEmpty)

                    }
                    
                    if((CarLoaded | (!CarEmpty & !CarLoaded)) & !MODELS[ParserSpacesIterator*ENTRIES_PER_MODEL-(ENTRIES_PER_MODEL-1)+2,string]:find("empty")){
                    
                        if(!CarPreviouslySeen:find(" " + ParserSpacesIterator+"-1 ")){ #If this car/load hasn't been found before, add it to the list!
                      
                            SpawningInstruction[5,array] = SpawningInstruction[5,array]:add(array(SpawningInstruction[5,array][1,number],vec2(ParserSpacesIterator,1)))
                            SpawningInstruction[5,array][1,number] = SpawningInstruction[5,array][1,number] + (MODELS[ParserSpacesIterator*ENTRIES_PER_MODEL-(ENTRIES_PER_MODEL-2),number]^(VARIANCE_EXPONENT))*LOADED_CHANCE
                            CarPreviouslySeen = CarPreviouslySeen + " " + ParserSpacesIterator+"-1 "
                            
                        }
                        
                    }
                    
                    if((CarEmpty | (!CarEmpty & !CarLoaded)) & !MODELS[ParserSpacesIterator*ENTRIES_PER_MODEL-(ENTRIES_PER_MODEL-1)+2,string]:find("loaded")){
                        
                        if(!CarPreviouslySeen:find(" " + ParserSpacesIterator+"-0 ")){ #If this car/load hasn't been found before, add it to the list!
                      
                            SpawningInstruction[5,array] = SpawningInstruction[5,array]:add(array(SpawningInstruction[5,array][1,number],vec2(ParserSpacesIterator,0)))
                            SpawningInstruction[5,array][1,number] = SpawningInstruction[5,array][1,number] + (MODELS[ParserSpacesIterator*ENTRIES_PER_MODEL-(ENTRIES_PER_MODEL-2),number]^(VARIANCE_EXPONENT))*(1-LOADED_CHANCE)
                            CarPreviouslySeen = CarPreviouslySeen + " " + ParserSpacesIterator+"-0 "
                            
                        }
                        
                    }
                        
                    ParserSpacesIterator++
                    ParserTagGroupsIterator = 1
                    
                }elseif(ParserFlag == -1){ #If no tags have been found for this iteration and it wasn't finished early, skip the car
                
                    ParserSpacesIterator++
                    ParserTagGroupsIterator = 1
                    ParserTagItemsIterator = 1
                    ParserFlag = 0
                    
                }
                
            }
        
            if(ParserSpacesIterator > MODELS:count()/ENTRIES_PER_MODEL){ #If Counter 1 is concluded, reset everything
                
            
                ParserSpacesIterator = ParserTagGroupsIterator = ParserTagItemsIterator = 1
                ParserCommasIterator++
                ParserPhase = 0
                
            }
            
        }
        
    }
    
    function entity:modSetSkin(SkinID:number){
        
        if(CopySkin[This:model(),number] == 0){
    
            This:setSkin(SkinID)
            
        }else{
            
            This:setSkin(CopySkin[This:model(),number]-1)
            
        }
        
    }
    
    function void entity:nudge(){
        
        local LocalPos = NUDGE[This:model(),vector]
        
        local GlobalPos = This:toWorld(LocalPos)
        
        This:setPos(GlobalPos)
        
    }
    
    function array get_wellcar_ends(Model:string,End:number){
        
        if(Model == "models/magtrains/intermodal/wellcar_53_middle.mdl"){
            
            if(End == 1){
                
                return array("models/magtrains/intermodal/wellcar_53_front.mdl",-90)
                
            }else{

                return array("models/magtrains/intermodal/wellcar_53_rear.mdl",-90)
                
            }
            
        }elseif(Model == "models/magtrains/intermodal/wellcar_48_middle.mdl"){
            
            if(End == 1){
                
                return array("models/magtrains/intermodal/wellcar_48_front.mdl",-90)
                
            }else{

                return array("models/magtrains/intermodal/wellcar_48_rear.mdl",-90)
                
            }
            
        }elseif(Model == "models/magtrains/intermodal/wellcar_40_middle.mdl"){
            
            if(End == 1){
                
                return array("models/magtrains/intermodal/wellcar_40_front.mdl",-90)
                
            }else{

                return array("models/magtrains/intermodal/wellcar_40_rear.mdl",-90)
                
            }
            
        }elseif(Model == "models/magtrains/intermodal/wellcar_40r_middle.mdl"){
            
            if(End == 1){
                
                return array("models/magtrains/intermodal/wellcar_40r_front.mdl",-90)
                
            }else{

                return array("models/magtrains/intermodal/wellcar_40r_rear.mdl",-90)
                
            }
            
        }elseif(Model == "models/magtrains/intermodal/wellcar_40b_middle.mdl"){
            
            if(End == 1){
                
                return array("models/magtrains/intermodal/wellcar_40b_front.mdl",-90)
                
            }else{

                return array("models/magtrains/intermodal/wellcar_40b_rear.mdl",-90)
                
            }
            
        }
        
        
        return array("models/hanksabutt/rollingstock/wellcars/wellcar_lopac_end.mdl",(End*90)-90)
        
    }
    
    Break = "functions"
    
    #Datasignal initialization
    dsJoinGroup("operations")

    setName("Convenient\nClassic\nCarspawner V"+VERSION+"\nMade by Metaladon")
    printColor(hsl2rgb(vec(CCCHue,TEXT_COLOR:x(),TEXT_COLOR:y())),"[CCC] Welcome to the Convenient, Classic Carspawner V"+VERSION+" Please type \".help\" for a tutorial on how to use the E2.")
    
    if(PRINTING_DETAIL == 0){
        printColor(hsl2rgb(vec(CCCHue,TEXT_COLOR:x(),TEXT_COLOR:y())),"[CCC] Chat output is disabled. Re-enable it by setting the variable \"PRINTING_DETAIL\" to 2.")
        playsound("nope")
    }
    
    if(entity():model() == "models/magtrains/trucks/barber_s2_phx.mdl"){BStr = "mag phx"}
    elseif(entity():model() == "models/magtrains/trucks/barber_s2_rsg.mdl"){BStr = "mag rsg"}
    elseif(entity():model() == "models/akandr/russian/bogie/cnii_hz_5ft.mdl"){BStr = "rus"}
    elseif(entity():model() == "models/joe/bogies/2ft_2.mdl"){BStr = "2ft"}
    else{BStr = "mag phx"}
    
    GaugeMode = switchGauge(determinebogie(BStr)) #Switch gauges if needed, spawn the ScanProp, and re-rail the head
    
    #Version Checker
    
    local HttpsTimeout = function(){
        
        printS(0,"Could not retrieve version number. Refresh the E2 to check again!")
        holoEntity(1):soundPlay(0,0,"vo/engineer_negativevocalization01.mp3",0)
        
    }
    
    runOnHTTP(1)
    timer("HttpsTimeout",3.5,HttpsTimeout)
    httpRequest("https://raw.githubusercontent.com/SirMetaladon/convenient-classic-carspawner/master/versions.txt")
    
    Break = "final first"

}

MainLoop = function(){ #Processes which run on tick
    
    SpawnHeadEntity:setColor(hsl2rgb(vec(CCCHue,0.5,0.5)))
    holoColor(0,hsl2rgb(vec(CCCHue,0.5,0.5)))
    CCCHue = (CCCHue + COLOR_SPEED)%360
    
    if(SpawnHeadEntity:isFrozen()){
        
        SpawnHeadEntity:noCollideAll(1)
        
    }else{
        
        SpawnHeadEntity:noCollideAll(0)
        
    }
    
    if(safe()){
        
        timer("CommandLoop",0.1,CommandLoop)

        if(PrinterStack:count() & playerCanPrint() & (PRINTING_DETAIL != 0)){
            
            if(PrinterStack[1,string] != ""){
                
                printColor(hsl2rgb(vec(CCCHue,TEXT_COLOR:x(),TEXT_COLOR:y())),PrinterStack[1,string])
                
            }elseif(PrinterStack[1,number]:toString() != ""){
            
                printColor(hsl2rgb(vec(CCCHue,TEXT_COLOR:x(),TEXT_COLOR:y())),"[CCC] "+PrinterStack[1,number]:toString())
                
            }else{
            
                printColor(hsl2rgb(vec(CCCHue,TEXT_COLOR:x(),TEXT_COLOR:y())),"[CCC] Incompatible print data type!")
                
            }
            
            PrinterStack:remove(1)
            
        }
        
        if(MDLTagIterator){
            
            local ModelCount = MODELS:count()/ENTRIES_PER_MODEL
        
            while(MDLTagIterator <= ModelCount & safe()){
                
                MDLTable[extractModelName(MODELS[MDLTagIterator*9-8,string]),number] = 1
                MDLTagIterator++
                
            }
            
            if(MDLTagIterator > ModelCount){
            
                TAG_DATA[(TotalTagGroups+1),array] = MDLTable:keys()
                MDLTagIterator = 0
                
            }
            
        }elseif(NewModelEntriesToProcess){
            
            local ModelCount = ceil(AddModels:count()/ENTRIES_PER_MODEL)
        
            while(NewModelEntriesToProcess <= ModelCount & safe()){
                
                if(reprocessData(NewModelEntriesToProcess)){ValidAdditionalModels++}else{NewModelEntriesToProcess = ceil(AddModels:count()/ENTRIES_PER_MODEL)}
                NewModelEntriesToProcess++
                
            }
            
            if(NewModelEntriesToProcess > ModelCount){
                
                if(AddModels:count() != 0){
                    printS(0,ValidAdditionalModels+" extra cars added to the main list of "+((MODELS:count()/ENTRIES_PER_MODEL)-ValidAdditionalModels)+" spawnable cars.")
                }else{
                    printS(0,ceil(MODELS:count()/ENTRIES_PER_MODEL)+" spawnable cars initialized.")
                }
                NewModelEntriesToProcess = 0
                
            }
            
        }
        
        if(TagsPrinting){
    
            while(TagPrinterGroups+1 <= TAG_DATA:count() & safe()){
                
                while(TagPrinterItems <= TAG_DATA[TagPrinterGroups+1,array]:count() & safe()){
                    
                    TagsInGroup = TagsInGroup +" | "+ TAG_DATA[TagPrinterGroups+1,array][TagPrinterItems,string]
                    TagPrinterItems++
                    
                }
                
                if(TagPrinterItems > TAG_DATA[TagPrinterGroups+1,array]:count()){
                    
                    printS(1,"Group "+(TagPrinterGroups+1) + ":" + TagsInGroup + "\n ")
                    TagsInGroup = ""
                    TagPrinterGroups++
                    TagPrinterItems = 1
                    
                }
                
            }
            
            if(TagPrinterGroups+1 > TAG_DATA:count()){
                
                TagPrinterGroups = 0
                printS(0,"Told you there's be a lot of them....")
                TagsPrinting = 0
                
            }
            
        }
        
    }
    
}

ChatEvent = 0
    
event chat(Ply:entity, Said:string, Team:number){
    
    if(Ply == owner()){
    
        LastSaid = Said:trim():lower()
        CommandTextSpaced = LastSaid:explode(" ")
        CommandTextSpaced[1,string] = CommandTextSpaced[1,string]:sub(2) #command start agnostic
    
        if(CommandTextSpaced[1,string] == "gauge" & CommandTextSpaced[2,string] != ""){
            
            MainCommandQueue:pushTable(table("gauge",CommandTextSpaced[2,string]))   
            CommandArchive:pushString(systime()+" mode "+MainCommandQueue[1,table][2,string])
            hideChat(HIDE_CHAT) 
    
        }elseif(CommandTextSpaced[1,string] == "sp"){
            
            hideChat(HIDE_CHAT) 
        
            if(CommandTextSpaced[2,string]:toNumber() != 0){
                
                printS(0,"Command recieved! Queuing " + CommandTextSpaced[2,string]:toNumber() + " cars. Spawnpoint locked.")
                MainCommandQueue:pushTable(table("clean"))
                MainCommandQueue:pushTable(table("sp",LastSaid,vec(CommandTextSpaced[2,string]:toNumber(),0,0)))
                CommandArchive:pushString(systime()+" clean")
                CommandArchive:pushString(systime()+" sp "+LastSaid)
                playsound("spawn")
                OperationsArmingSwitch = 0
                
            }elseif(CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-2):toNumber() != 0 & CommandTextSpaced[2,string]:sub(CommandTextSpaced[2,string]:length()-1,CommandTextSpaced[2,string]:length()) == "ft"){
            
                printS(0,"Command recieved! Queuing " + CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-2):toNumber() + " feet of cars. Spawnpoint locked.")
                MainCommandQueue:pushTable(table("clean"))
                MainCommandQueue:pushTable(table("sp",LastSaid,vec(0,CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-2):toNumber(),0)))
                CommandArchive:pushString(systime()+" clean")
                CommandArchive:pushString(systime()+" sp "+LastSaid)
                playsound("spawn")
                OperationsArmingSwitch = 0
                
            }elseif(CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-1):toNumber() != 0 & CommandTextSpaced[2,string]:sub(CommandTextSpaced[2,string]:length(),CommandTextSpaced[2,string]:length()) == "t"){
            
                printS(0,"Command recieved! Queuing " + CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-1):toNumber() + " tons worth of cars. Spawnpoint locked.")
                MainCommandQueue:pushTable(table("clean"))
                MainCommandQueue:pushTable(table("sp",LastSaid,vec(0,0,CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-1):toNumber())))
                CommandArchive:pushString(systime()+" clean")
                CommandArchive:pushString(systime()+" sp "+LastSaid)
                playsound("spawn")
                OperationsArmingSwitch = 0
                
            }else{
                
                playsound("err")
                printS(0,"Incorrect syntax! Do .sp [number of cars] [tag] [tag] etc...")
                
            }
            
        }elseif(CommandTextSpaced[1,string] == "rem"){
            
            hideChat(HIDE_CHAT) 
            
            if(CommandTextSpaced[2,string]:toNumber() != 0){
                
                printS(0,"Command recieved! Queuing " + min(CommandTextSpaced[2,string]:toNumber(),Props:count()) + " car removals.")
                MainCommandQueue:pushTable(table("rem",CommandTextSpaced[2,string]:toNumber(),0,0))
                CommandArchive:pushString(systime()+" rem "+CommandTextSpaced[2,string]:toNumber())
                playsound("remove")
                
            }elseif(CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-2):toNumber() != 0 & CommandTextSpaced[2,string]:sub(CommandTextSpaced[2,string]:length()-1,CommandTextSpaced[2,string]:length()) == "ft"){
            
                printS(0,"Command recieved! Queuing " + CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-2):toNumber() + " feet of removals.")
                MainCommandQueue:pushTable(table("rem",0,CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-2):toNumber(),0))
                CommandArchive:pushString(systime()+" rem "+CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-2):toNumber())
                playsound("remove")
                
            }elseif(CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-1):toNumber() != 0 & CommandTextSpaced[2,string]:sub(CommandTextSpaced[2,string]:length(),CommandTextSpaced[2,string]:length()) == "t"){
            
                printS(0,"Command recieved! Queuing " + CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-1):toNumber() + " tons of removals.")
                MainCommandQueue:pushTable(table("rem",0,0,CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-1):toNumber()))
                CommandArchive:pushString(systime()+" rem "+CommandTextSpaced[2,string]:sub(0,CommandTextSpaced[2,string]:length()-1):toNumber())
                playsound("remove")
            
            }elseif(CommandTextSpaced[2,string] == "all"){
                
                printS(0,"Command recieved! Queuing " + Props:count() + " car removals.")
                MainCommandQueue:pushTable(table("rem",Props:count(),0,0))
                CommandArchive:pushString(systime()+" rem "+Props:count())
                playsound("remove")
            
            }else{
                
                playsound("err")
                printS(0,"Incorrect syntax! Do .rem [number of cars]")
                
            }
        
        }elseif(CommandTextSpaced[1,string] == "help" & CommandTextSpaced[2,string] == ""){
        
            printS(1,"Here's an overview on how to use this spawner:\n"+
            "A system of Tags is used to determine what kind of train to spawn. Each car in the list of availible cars has tags that describe it. Example: My cement hopper model has the tags \"cement_hopper\", \"90s\", \"metaladon\", \"hdetail\", \"manifest\", and so forth. "+
            "Tags are broken up into "+(TotalTagGroups+1)+" categories like Type, Era, Modeler, etc. To spawn a car, type \".sp\", then number of cars (like 5), then Tags like \"boxcar\" or \"50s\". This example (.sp 5 boxcar 50s) will spawn 5 1950's boxcars. Feel free to try this command to see what it does! "+
            "To remove cars, do \".rem\", then the number of cars to remove. You can also substitute the number of cars with feet or tons, like \".sp 200ft grain\" which spawns 200ft of grain cars, or \".rem 500t\" which deletes 500 tons of cars. "+
            "To see other commands that the E2 supports, do \".commandlist\". You can also do \".help adv\" for some tips on more advanced spawning behavior.\n \n"+
            "Here's some other useful commands:\n"+
            "Do \".faq\" for frequently asked questions on the E2 and other functions.\n"+
            "Do \".gauge\" then a gauge type to switch gauges like PHX, RSG, and 2ft.\n"+
            "Do \".contact\" for my profile to ask questions and give feedback.\n"+
            "Do \".addons\" for the addon pack containing the models used in this E2.\n"+
            "Do \".settings\" to explain the current E2 spawning settings.\n"+
            "Do \".updates\" to get a link to the latest version on Github.")
    
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "log"){
        
            takelog(systime()+"-normal")
    
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "help" & CommandTextSpaced[2,string] == "adv"){
            
            printS(1,"Here's an overview of advanced spawning:\n"+
            "When you spawn a train and don't specify a tag in one of the "+(TotalTagGroups+1)+" categories, it is filled with the \"default\" tags for that slot. This can lead to some odd behavior, like the E2 not being able to spawn older cars like reefers. "+
            "Do .default to see default tags. To disable default tags when spawning, enter the tag \"nodef\". Not recommended, as it can lead to strange trains. Do \".help tags\" to see more specific information. "+
            "If you want to remove the random unit train cars (like wellcars and ore hoppers) from your mixed trains, use the \"manifest\" tag. You can also select only unit cars with \"unitfreight\" "+
            "You can use a comma to separate \"blocks\" of commands when spawning cars. Example: \".sp 5 grain 60s, tank 40s\" selects 60's grainers and 40's tankers, but NOT 40's grainers or 60's tankers. "+
            "Another special tag is \"mdltag\", which enables searching model names as well as normal tags. For instance \".sp 3 mdltag flatcar1\" would spawn both Union's and Magnum's Flatcar1, as they both have that model name. If you want to be more specific, "+
            "use the tags for the modeler's name like \"union\" or \"magnum\". Keep in mind, it can only see the text after the last slash of a model path, excluding the .mdl part. Example: You can spawn the car \"models/magtrains/boxcar_50.mdl\" with "+
            "\".sp 1 mdltag boxcar_50\", but not \".sp 1 mdltag boxcar_50.mdl\" or \".sp 1 mdltag models/magtrains/boxcar_50\". "+ 
            "You can specify whether a car is loaded or not with the \"loaded\" or \"empty\" tags. Keep in mind loaded cars are much heavier than empty ones! ")
            
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "help" & CommandTextSpaced[2,string] == "tags"){
            
            printS(1,"Here's how tags and searching work in detail:\n"+
            "Every car has tags. When you spawn a train, the tags you search are used to find cars. Tags are grouped into "+(TotalTagGroups+1)+" blocks, each of which is examined separately when searching. This means that if you do \".sp 10 box 70s grove\", you're actually searching 3 "+
            "separate categories: car type, era, and modeler. If no tags of a certain category are used in a search, the system fills in the default tags. This means the spawner is more specific by default, and can cause issues when you're searching for a car outside "+
            "the default tags. For instance, when you do \".sp 5 coal loaded\", it won't spawn cars outside the default era like Hank's bethgon. Doing \".sp 5 coal_gondola loaded hank\" won't fix it either, as the default era still excludes those cars from the "+
            "search. Instead, do \".sp 5 coal loaded 90s\" to specify an era and get the car you need. Alternatively, you can do add \"anytime\" to the search to ignore era alltogether, though this will produce very odd trains like Nodef. There are a number of "+
            "other \"any\" tags, such as \"anywhere\" for locale, \"anyone\" for modeler (not to be confused with the anyone991 tag for Anyone's models), \"anytype\" for car type, \"anykind\" for stock type (like or MOW), and \"anydetail\" for detail level.")
            playsound("ding")
            hideChat(HIDE_CHAT) 
             
        }elseif(CommandTextSpaced[1,string] == "addons"){
            
            printS(1,"Here's a link to the FC&N Server Collection\n"+
            "It should contain the textures and models required.\n"+
            "http://steamcommunity.com/sharedfiles/filedetails/?id=390798140\n"+
            "Hit the Subscribe All button, and close Garry's Mod.\n"+
            "Re-launch the game, let the addons download, then rejoin!")
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "faq"){
            
            printS(1,"Here's some common questions answered: \n"+
            "Q: Can it spawn RSG/2ft? A: Yes! Do .gauge rsg or .gauge 2ft.\n"+
            "Q: Can it spawn Unit Trains? A: Yep. Read the .help adv for instructions.\n"+
            "Q: Can I add my own cars, like Passenger? A: Yes. Follow the examples and key near the top (line 140 or so)\n"+
            "Q: Cam you add this car/improvement? A: Totally. DM me about it, I'll add it to the Trello.")
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "contact"){
            
            printS(1,"Want to contact me? Report a bug? Got feedback? Here you go!\n"+
            "https://steamcommunity.com/profiles/76561198077247660/\n"+
            "Discord: sirmetaladon")
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "tags"){
            
            printS(1,"Tags are separated into groups based on exclusivity:\n"+
            "The 1st group is Car Type, like boxcar or tanker.\n"+
            "The 2nd group is Era, like 2020s, 1930s, or preera (civil war).\n"+
            "The 3rd group is Modeler, like gsgrove or metaladon.\n"+
            "The 4th group is Detail;  mdetail, hdetail, mstsports, tf2.\n"+
            "The 5th group is Country, like usamerican and ussrussian.\n"+
            "The 6th group is Special, tags like nodef and mdltag.\n"+
            "The 7th group is Load, just loaded or empty.\n"+
            "The 8th group is Modelpath, use with mdltag tag.\n"+
            "Do .taglist for a massive list of almost ALL possible tags.")
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "settings"){
        
            printS(1,"Here's a section explaining your current settings:\n"+
            "Gauge type is currently "+GaugeMode+".\n"+
            "WEIGHT_MULTIPLIER is currently "+WEIGHT_MULTIPLIER*2+", so average loaded car weight is "+WEIGHT_MULTIPLIER*200+" tons.\n"+
            "LOADED_CHANCE is currently "+LOADED_CHANCE+", so chance to be loaded is a "+round(LOADED_CHANCE*100)+"% chance.\n"+
            "LOAD_IMPACT is currently "+LOAD_IMPACT+", so the load percentage is "+LOAD_IMPACT*100+"%.\n"+
            "SAFE_MODE is currently "+select(SAFE_MODE+1,"off, so the e2 is faster","on, so the e2 is slower")+".\n"+
            "FOLLOW_RAILS is currently in "+select(FOLLOW_RAILS+1,"straight-line","track-following")+" mode.\n"+
            "BLOCK_STACK_SIZE is currently "+BLOCK_STACK_SIZE+", so cuts are typically "+BLOCK_STACK_SIZE*(2/5)+" cars long.")
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "taglist"){
            
            TagsPrinting = 1
            printS(1,"Here goes!")
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "default"){
            
            printS(1,"Here's the default tags.")
            
            for(X = 1, DEFAULT_TAGS:count()){
                
                PrinterStack = PrinterStack:add(DEFAULT_TAGS[X,array])
                
            }
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "bogie" | CommandTextSpaced[1,string] == "bogey"){
        
            local Search = CommandTextSpaced[2,string]+" "+CommandTextSpaced[3,string]+" "+CommandTextSpaced[4,string]:trim()
            
            local Bd = calibogie(Search+" "+GaugeMode:lower())
            
            if(Bd[1,string] != "" & Search:trim() != ""){
            
                printS(1,"Forced the bogie type to "+Bd[1,string])
                ForceUseThisBogie = Bd[1,string]
                playsound("ding")
                
            }else{
                
                printS(1,"Reset bogie type to \"automatic\"")
                ForceUseThisBogie = ""
                playsound("ding")
                
            }
            
            hideChat(HIDE_CHAT) 
              
        }elseif(CommandTextSpaced[1,string] == "restart"){
        
            MainCommandQueue:pushTable(table("restart"))
            CommandArchive:pushString(systime()+" restart")
    
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "flip"){
        
            MainCommandQueue:pushTable(table("flip"))
            CommandArchive:pushString(systime()+" flip")
    
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "unitmode"){
        
            MainCommandQueue:pushTable(table("unitmode"))
            CommandArchive:pushString(systime()+" unitmode")
    
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "dismiss"){
        
            MainCommandQueue:pushTable(table("goto",vec(0)))
            CommandArchive:pushString(systime()+" goto 0")
    
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "summon"){
        
            MainCommandQueue:pushTable(table("goto",owner():aimPos()+vec(0,0,50),owner():eyeAngles():yaw()+90))
            CommandArchive:pushString(systime()+" goto "+owner():aimPos()+vec(0,0,50)+" "+(owner():eyeAngles():yaw()+90))
    
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "delete"){
            
            printColor(hsl2rgb(vec(CCCHue,TEXT_COLOR:x(),TEXT_COLOR:y())),"[CCC] Deleting the carspawner E2... Good luck on your travels!")
            hideChat(HIDE_CHAT) 
            ScanProp:propDelete()
            SpawnHeadEntity:propDelete()
            selfDestruct()
            
        }elseif(CommandTextSpaced[1,string] == "nuke"){
            
            printColor(hsl2rgb(vec(CCCHue,TEXT_COLOR:x(),TEXT_COLOR:y())),"[CCC] Nuking the consist and carspawner E2 from orbit. Just to be sure!")
            hideChat(HIDE_CHAT) 
            propDeleteAll()
            selfDestructAll()
            
        }elseif(CommandTextSpaced[1,string] == "setskin"){
            
            if(owner():aimEntity():isValidPhysics()){
                
                local Model = owner():aimEntity():model()
                
                if(CommandTextSpaced[2,string] == "clear"){
                    
                    CopySkin[Model,number] = 0
                    printS(0,"Cleared the skin of \""+Model+"\".")
                    
                }else{
                
                    local Skin = owner():aimEntity():getSkin()
                    CopySkin[Model,number] = Skin+1
                    printS(1,"Set the skin of \""+Model+"\" to "+Skin+".")
                    
                }
                
            }elseif(CommandTextSpaced[2,string] == "clear"){
                
                CopySkin = table()
                printS(0,"Cleared all the set skins.")
                
            }
            hideChat(HIDE_CHAT) 
            
        }elseif((CommandTextSpaced[1,string] == "clear") & (OperationsArmingSwitch == 0 | owner():aimEntity() == SpawnHeadEntity)){
            
            MainCommandQueue = table()
            MainCommandQueue:pushTable(table("respawn",SpawnHeadEntity:pos(),SpawnHeadEntity:angles(),SpawnHeadEntity:model()))
            CommandArchive:pushString(systime()+" cleared "+MainCommandQueue:count())
            CommandArchive:pushString(systime()+" respawn "+SpawnHeadEntity:pos()+" "+SpawnHeadEntity:angles()+" "+SpawnHeadEntity:model())
            propDeleteAll()
                
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "stats"){
            
            printS(0,"Here's the stats for the currently spawned cars:")
            printS(1,Props:count() + " cars, " + round(TotalTrainLength/12) + " feet + " + SpacerFtLength + " feet of spacer, " + round(TotalTrainWeight/907) + " tons")
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "commandlist"){
            
            printS(1,"A full list of commands:\n"+
            ".sp [number of cars/tons/feet] [tag] [tag] etc (Spawns cars. Add a t at the end of the first number for tons, and ft for feet. Add a , divider between tags to specify groups of distinct tags.)\n"+
            ".rem [number of cars/tons/feet] (Removes cars. Add a t at the end of the number for tons, and ft for feet.)\n"+
            ".kill (Stops the spawning/deleting procedure)\n"+
            ".help (Basic tutorial on spawning cars)\n"+
            ".help adv (Shows adv usage and tips)\n"+
            ".help tags (Explains how tags work specifically)\n \n"+
                    
            ".faq (Frequently Asked Questions about the E2 and it's capabilities)\n"+
            ".settings (Explains the current settings of the E2)\n"+
            ".updates (Links to the Github for updates and other versions)\n"+
            ".addons (Links to FC&N Workshop collection.)\n"+
            ".contact (Shows Steam and Discord contact info)\n"+
            ".changelog (Shows all the changes since the last version)\n"+
            ".commandlist (You know what it does)\n \n"+
                    
            ".stats (Gives the current number of cars, train length, and weight)\n"+
            ".tags (Prints the types of tags)\n"+
            ".taglist (Prints literally all of the tags. (except model tags))\n"+
            ".default (Prints the default tags)\n \n"+
                    
            ".restart (Resets the E2 for a train and forgets existing cars)\n"+
            ".flip (Similar to .restart, but also flips the spawner 180 degrees)\n"+
            ".dismiss (Sends the carspawner away into dormancy, for use later)\n"+
            ".summon (Brings the carspawner to the cursor)\n"+
            ".unitmode (Toggles between 3 states for flipping cars; random, one way, other way)\n"+
            ".setskin (aim at a car). Sets the skin of that model to whatever the car is; append clear to reset.\n"+
            ".gauge [gauge] (Sets the gauge of the spawner)\n"+
            ".bogie [arg1] [arg2] etc (Forced the bogie type based on the input. Blank input resets to normal)\n"+
            ".space [number of feet] (Adds phantom space on the end of the train for use as a gap for inserting mid-train helpers, 0 resets the spacer)\n"+
            ".delete (Deletes the E2, but not the train)\n"+
            ".clear (Removes all spawned cars, but not the e2 itself. Use .rem all to remove all cars in the current train instead)\n"+
            ".nuke (Deletes the E2 AND the train)")
            
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "updates"){
            
            printS(1,"Here's how to get the latest version:\n"
            +"Go to the github, then click on the file convenient_classic_carspawner X.XXX. Select the RAW option.\n"
            +"Rightclick, select Save As, then download the file as the normal name.\n"
            +"Move the file to your Steam directory, in this spot: steamapps/common/garrysmod/garrysmod/data/expression2\n"
            +"Hit Refresh on the E2 sidebar ingame.\n"
            +"https://github.com/SirMetaladon/convenient-classic-carspawner/tree/master")
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "changelog"){
            
            printS(1,"Here's the changelog since the last major version (0.9573):\n"
            +"0.99:\n"
            +"Massive system-wide renaming of variables (literally all of them)\n"
            +"Added Whalebelly Hoppers, Hotmetal cars, and Articulated Wellcars.\n"
            +"Removed Slack by default.\n"
            +"Tuned up and refactored a lot of code to work more effectively.\n"
            +"Added default support for Magnum's Autocoupler.\n"
            +"Added more Austrailian stock.\n"
            +"Added Coalveyors.\n"
            +"Removed slack by default.\n"
            +"Removed old Tankers.\n"
            +"Removed Boxcar5.\n"
            +"Updated the entire chip for modern Wiremod.\n"
            +"0.9901:\n"
            +"Refreshed Weathering.\n"
            +"Removed all the old, scratchy textures.\n"
            +"Removed Hopper4 from Grain service.\n"
            +"0.992:\n"
            +"Added Buckeye truck.\n"
            +"Added 54ft DODX Flat.\n"
            +"Added Parkman's Tanker.\n"
            +"Added Hank's MOW Gondola.\n"
            +"Added \"new\" tag for spawning newly added cars.\n"
            +"Changelog format is since the last major version.\n"
            +"0.9921:\n"
            +"Exchanged NoCollide commands for better server operability.\n"
            +"0.993:\n"
            +"Added more skins to Hank's Bethgon.\n"
            +"Add a command and variable for controlling the flip state of cars: .unitmode\n"
            +"Removed the remainder of the New Wire errors.\n"
            +"Printing settings now has a low-detail level.\n"
            +"0.9931:\n"
            +"Added Parkman's Battleship Gondola.\n"
            +"Added Snowy's Reefer.\n"
            +"Added 2-axle freight car support.\n"
            +"Added Rusty's Chok van, courtesty of EpicStormchaser.\n"
            +"0.9932:\n"
            +"Added Spark's Reefer, Side-Dump, Caboose, and Flatcar.\n"
            +"Raised spawning height slightly for banked curves.\n"
            +"0.994:\n"
            +"Added the ability to copy skins with .setskin\n"
            +"Look at a model to copy, or do .clear to clear a model or all.\n"
            +"0.9941:\n"
            +"Fixed a HTTPS Timeout issue.\n"
            +"Fixed mdltag to work correctly again.\n"
            +"Renamed .mode to .gauge to clarify usage.\n"
            +"0.9942:\n"
            +"Introduced compatibility with off-center cars. and centered Spark's Reefer.\n"
            +"Added an option to disable TF2 cars.\n"
            +"Added an option to disable long cars (for SSG2).\n"
            +"Fixed GitHub link in .updates.\n"
            +"Added a constant soundStop() to prevent calculation sound from playing forever.\n"
            +"Fixed a bug with the unitfreight tag mangling some SSG2 trains.\n"
            +"0.995:\n"
            +"Added 53ft and 48ft 3-unit articulated wellcar sets.\n"
            +"Refactored the Articulated car code to make adding more easier.\n"
            +"0.9951:\n"
            +"Added 3 variants of 40ft, and one 48ft 5-unit articulated wellcar sets.\n"
            +"0.9952:\n"
            +"Adjusted the spawning characteristics of Magnum's 40b wellcars.\n"
            +"Added Fox's Bopper Car.\n"
            +"Re-sorted all cars in the data file, courtesy of Wilde.\n"
            +"0.9953:\n"
            +"Added Snowy's Caboose.\n"
            +"Added West's Tar Tanker.\n"
            +"0.996:\n"
            +"Added N&W Hopper.\n"
            +"Added 5-unit MSTS Wellcar.\n"
            +"Added 53ft 9-unit Wellzilla.\n"
            +"Made height off the railhead a configuration option.\n"
            )
            
            playsound("ding")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "space"){
            
            if(CommandTextSpaced[2,string]:toNumber() > 0){
                
                printS(0,"Queued " + CommandTextSpaced[2,string]:toNumber() + " feet of mid-helper spacer.")
                MainCommandQueue:pushTable(table("spc",CommandTextSpaced[2,string]:toNumber()))
                CommandArchive:pushString(systime()+" spc "+CommandTextSpaced[2,string]:toNumber())
                
            }else{
                
                MainCommandQueue:pushTable(table("spc",-SpacerFtLength))
                CommandArchive:pushString(systime()+" spc -SpacerFtLength "+SpacerFtLength)
                printS(0,"Queued reset of the spacer from " + SpacerFtLength + " feet to 0.")
                
            } 
    
            playsound("space")
            hideChat(HIDE_CHAT) 
            
        }elseif(CommandTextSpaced[1,string] == "kill"){
            
            printS(0,"Killed the process!")
            
            if(SpawnPhase != 0){
                
                 foreach(OLD:number,Entity:entity = Props[Props:count(),array]){
                    
                    OLD = OLD
                    
                    Entity:propDelete()
                    
                }
                
            }
            
            ParserSpacesIterator = ParserTagGroupsIterator = ParserTagItemsIterator = 1
            endScan()
            ForceUseThisBogie = ""
            ParserCommasIterator = ParserPhase = ModelIDToSpawn = DistToPreviousBogie = 0
            BlockedCarBuffer = array()
            MainCommandQueue = table()
            MainCommandQueue:pushTable(table("donezo",DonezoString))
            CommandArchive:pushString(systime()+" cleared via kill")
            hideChat(HIDE_CHAT) 
            playsound("kill")
            soundStop(2)
            
        }
        
    }
        
    ChatEvent = 1
    
}

if(ChatEvent == 0){ #Other Events
    
    if(httpClk()){ #when the HTTPS check to the Github returns the data
        
        local Data = httpData():explode("|")[1,string]:trim()
        
        if(Data == VERSION){
            
            printS(0,"You're up to date!")
            
        }elseif(VERSION:toNumber() < Data:toNumber()){
            
            printS(1,"Outdated version detected! Newest version is "+Data+". Do .updates to get the link.")
            holoEntity(1):soundPlay(0,0,"buttons/combine_button_locked.wav")
            holoEntity(0):soundPlay(1,0,"vo/engineer_moveup01.mp3")
            
        }elseif(VERSION:toNumber() > Data:toNumber()){
            
            printS(0,"This is a developer version. Do not distribute.")
            
        }
        
        stoptimer("HttpsTimeout")
        
    }elseif(dsClk("populate")){ #legacy pass-through for older versions of OPS and CCC
        
        OperationsArmingSwitch = 1 #this is a flag that means I can't accidentally delete all the cars with .clear
    
        local PopulateTable = dsGetTable()
    
        if(PopulateTable:count()){
            
            for(X = 1,PopulateTable:count()-1){
                
                local Data = PopulateTable[X:toString(),array]
                
                if(Data[1,string] == "summon"){
                    
                    CommandArchive:pushString(systime()+" summon via populate")
                    MainCommandQueue:pushTable(table("goto",Data[2,vector],Data[3,number],1))
                    
                }else{
                
                    MainCommandQueue:pushTable(table("clean"))
                    MainCommandQueue:pushTable(table("sp",Data[1,string],Data[2,vector],Data[3,string]))
                    
                    CommandArchive:pushString(systime()+" clean via pop")
                    CommandArchive:pushString(systime()+" pop sp "+Data[1,string])
                    
                }
                
            }
            
            DonezoString = PopulateTable[PopulateTable:count():toString(),string] #a pass-through for the OPS E2 to tell which command just finished when CCC finishes executing on these instructions
            
            if(PopulateTable:count() > 2 | PopulateTable["1",array][1,string] != "summon"){MainCommandQueue:pushTable(table("donezo",DonezoString))}
            
            playsound("spawn")
            printS(0,"Queued population.")
            
        }
        
    }elseif(dsClk("ccc"+entity():id())){ #if a command for this specific chip is recieved through Data Signal
        
        OperationsArmingSwitch = 1 #this is a flag that means I can't accidentally delete all the cars with .clear
    
        local CommandInjection = dsGetTable()
            
        for(X = 1,CommandInjection:count()){
            
            MainCommandQueue:pushTable(CommandInjection[X:toString(),table])
            
        }

        playsound("spawn")
        printS(0,"CCC "+entity():id()+" recieved a "+CommandInjection:count()+"-command injection.")
        
    }
    
}

#Instructions Blocks

CommandLoop = function(){

    if(MainCommandQueue:count() & (NewModelEntriesToProcess == 0) & !DelayInterlock & safe()){
        
        local CommandName = MainCommandQueue[1,table][1,string]
        
        switch(CommandName){
            
            case("sp"), #If the current command input is .sp
                
                if(!ParserCommasIterator){ #If it's the first iteration
                    
                    spawningStartupProcedure()
                    
                }
                
                #no else here so it can flow freely from start to go without an extra iteration
                
                if(ParserCommasIterator != 0){
                    
                    local SpawnStringCommasExplode = MainCommandQueue[1,table][2,string]:explode(",")
                    
                    while(ParserCommasIterator <= SpawnStringCommasExplode:count() & safe()){ #While Counter 0 <= the number of comma-separated segments of the command
                        
                        CurrentCommaString = SpawnStringCommasExplode[ParserCommasIterator,string]
                        
                        commaParserProcedure(CurrentCommaString)
                        
                    }
                    
                    if(ParserCommasIterator > SpawnStringCommasExplode:count()){ #If Counter 0 is terminated, finalize the instructions
                        
                        SpawningInstruction[5,array] = SpawningInstruction[5,array]:add(array(SpawningInstruction[5,array][1,number])) #Finish the randomizer block
                        
                        playsound("done")
                        soundStop(2)
                        
                        if(SpawningInstruction[5,array]:count() > 2){ #If the tag bank has tags, success!
                            
                            SearchArchive[MainCommandQueue[1,table][2,string],array] = SpawningInstruction[5,array]:clone()
                            
                            printS(0,"Found " + (SpawningInstruction[5,array]:count()-2)/2 + " car variants matching searched tags.")
                            MainCommandQueue[1,table] = SpawningInstruction
                            CommandArchive:pushString(systime()+" added SPWN")
                            
                        }else{ #Else, print an error
                            
                            printS(0,"No cars exist with those tags! Do \".help tags\" to see what might have gone wrong.") 
                            MainCommandQueue:remove(1)
                            
                            endScan()
                            CommandArchive:pushString(systime()+" exited SP via no tags 2")
                            
                        }
                        
                        ParserCommasIterator = 0
                        
                    }
                    
                }
            
            break
            case("clean"),
            
                if((!isOnRails(SpawnHeadEntity) & FOLLOW_RAILS) & !AIRBORNE_MODE){ #If it's derailed 
                        
                    playsound("err")
                    soundStop(2)
                    printS(0,"Carspawner is not on the rails! Process aborted.")
                    MainCommandQueue:remove(1)
                    MainCommandQueue:remove(1)
                    
                    CommandArchive:pushString(systime()+" removed 2 via norails")
                    
                }else{
                    
                    if(FOLLOW_RAILS){
                        
                        MainCommandQueue:insertTable(2,table("scan")),CommandArchive:pushString(systime()+" scan")
                            
                    }
                    
                    CommandArchive:pushString(systime()+" stock removal of clean")
                    MainCommandQueue:remove(1)
                    
                }
             
            break  
            case("scan"),
                    
                local StartingEntity = Props[Props:count(),array][3,entity]
                local SecondBogie = Props[Props:count(),array][5,entity]
                if(!Props:count()){StartingEntity = SpawnHeadEntity}
                
                SpawnHeadEntity:propFreeze(1)
                 
                ScanPhase = "started"
                ScanDistance = 0
                
                enableConstraintUndo(0)
                
                if(ScanProp:isValid()){
                    
                    ScanProp:noCollideAll(0)
                    StartingEntity:noCollideAll(1)
                    if(SecondBogie:isValid()){SecondBogie:noCollideAll(1)}
                    
                    DisconnectScannerNoCollide = function(){
                        
                        if(StartingEntity:isValid()){
                        
                            StartingEntity:noCollideAll(0)
                            
                        }
                        
                        if(SecondBogie:isValid()){
                        
                            SecondBogie:noCollideAll(0)
                            
                        }
                        
                    }
                    
                    #local DisconnectScannerNoCollide = functionNameIGuess(StartingEntity,SecondBogie)
                    
                    timer(0.5,DisconnectScannerNoCollide)
                    
                }
                
                enableConstraintUndo(1)
                
                ScanProp:setPos(StartingEntity:pos()+vec(0,0,5))
                ScanProp:setAng(StartingEntity:angles()-ang(0,calibogie(StartingEntity:model())[4,number],0))
                
                DistToPreviousBogie = TotalTrainLength - ((modelLength(CarModelIDs[Props:count(),number])-MODELS[CarModelIDs[Props:count(),number]+3,vector4]:x())/2)*(StartingEntity != SpawnHeadEntity)
                
                ScanProp:propFreeze(1)
                
                #This is to prevent a bug when teleporting the scanhead around; it kept getting ejected at random angles because for some reason physics still applies for 1 tick when you no-collide
                timer(0.015,function(){ScanProp:propFreeze(0)})
                
                local StartScanning = function(){#After the scanner settles
                    
                    ScanPointsTable = table()
                    logScanner(ScanDistance)
                    ScanProp:setAlpha(255*SCANNER_VISIBLE)
                }
                
                timer("StartScanning",0.2,StartScanning) #Starting the process
                
                
                
                CommandArchive:pushString(systime()+" scan end")
                MainCommandQueue:remove(1)
            
            break
            case("spwn"),
                
                if(!ModelIDToSpawn & maxquota() > 5000){
                    
                    SpawnPhase = 0
                    
                    while(BlockedCarBuffer:count() < BLOCK_STACK_SIZE & safe()){
                    
                        ModelIDToSpawn = random(0.00001,MainCommandQueue[1,table][5,array][1,number])
                           
                        for(X = 1,(MainCommandQueue[1,table][5,array]:count()-2)/2){
                            
                            if(MainCommandQueue[1,table][5,array][(X*2)+2,number] > ModelIDToSpawn){
                                
                                BlockedCarBuffer:pushVector2(vec2((MainCommandQueue[1,table][5,array][X*2+1,vector2]:x()*ENTRIES_PER_MODEL)-(ENTRIES_PER_MODEL-1),MainCommandQueue[1,table][5,array][X*2+1,vector2]:y()))
                                break
                                
                            }
                            
                        }
                        
                    }
                    
                    NextCar = findnext(BlockCurrentType)
                    
                    local Rn = random() > BLOCK_END_CHANCE
                    
                    if(NextCar &  !(BlockSameInARow > BLOCK_LENGTH_LIMIT & Rn)){
                        
                        ModelIDToSpawn = BlockedCarBuffer[NextCar,vector2]:x()
                        BlockCurrentType[3,number] = CarIsLoaded = BlockedCarBuffer[NextCar,vector2]:y()
                        BlockCurrentType[1,string] = resolveTagsToType(MODELS[ModelIDToSpawn+2,string])
                        BlockedCarBuffer:remove(NextCar)
                        
                    }else{
                        
                        BlockSameInARow = 0
                        local R = randint(1,BlockedCarBuffer:count())
                        ModelIDToSpawn = BlockedCarBuffer[R,vector2]:x()
                        CarIsLoaded = BlockedCarBuffer[R,vector2]:y()
                        BlockedCarBuffer:remove(R)
                        BlockCurrentType = resolveModelIDToBlockInfo(ModelIDToSpawn):add(array(BlockedCarBuffer[R,vector2]:y()))
                        
                    }
                    
                }
            
                if(ScanDistance < (-DistToPreviousBogie + TotalTrainLength + SpacerFtLength*12 + modelLength(ModelIDToSpawn))+100 & FOLLOW_RAILS & ModelIDToSpawn != 0){
                    
                    if(ScanPhase == "bad"){
                    
                        printS(0,"Reached the end of the valid track (scanner derailed or stopped)\nThe scanner randomly derails on some corners, just go again.")
                        
                        MainCommandQueue:remove(1)
                        CommandArchive:pushString(systime()+" spwn endoftrack")
                        BlockedCarBuffer = array()
                        ModelIDToSpawn = 0
                        
                    }
                    
                }elseif(minquota() > 3000 & ModelIDToSpawn){
                
                    if(SpawnPhase == 0){
                        
                        SpecialInstructionSet = getSpecialInstructions(MODELS[ModelIDToSpawn+2,string])
                        
                        #sets BogieData according to what the car is
                        if(ForceUseThisBogie != ""){BogieData = calibogie(ForceUseThisBogie)}else{BogieData = calibogie(getBogie(MODELS[ModelIDToSpawn+2,string]))} #Set the bogie data
                        
                        local CarLengthBetweenBogies = MODELS[ModelIDToSpawn+3,vector4]:x()
                        local EndOfTrainDistance = -DistToPreviousBogie + TotalTrainLength + SpacerFtLength*12 + (modelLength(ModelIDToSpawn)-CarLengthBetweenBogies)/2
                        
                        AnchorPoints = locate(EndOfTrainDistance) #array of vector-yaw number pairs of bogies along the track, which the first is alway 0 relative to the end distance
                        AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies))
                        
                        if(SpecialInstructionSet == "" | SpecialInstructionSet == "2axle"){
                            
                            local Differ = (AnchorPoints[3,vector]-AnchorPoints[1,vector])
                            
                            CarSlopeAngle = atan(Differ:z()/flat(Differ):length())
                            SlopeAxis = flat(Differ):rotateAroundAxis(vec(0,0,1),-90) 
                            
                        }elseif(SpecialInstructionSet == "whale" | SpecialInstructionSet == "hotmetalcar"){
                            
                            local BolsterDist = 106 #hotmetal
                            
                            if((SpecialInstructionSet == "whale")){
                                BolsterDist = 132
                            }
                        
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + BolsterDist))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies - BolsterDist))
                            
                            local SubAxis1 = (AnchorPoints[1,vector]+AnchorPoints[5,vector])/2
                            local SubAxis2 = (AnchorPoints[3,vector]+AnchorPoints[7,vector])/2
                            local Differ = (SubAxis1-SubAxis2)
                            
                            CarSlopeAngle = atan(Differ:z()/flat(Differ):length())
                            SlopeAxis = flat(Differ):rotateAroundAxis(vec(0,0,1),-90) 
                            
                        }elseif(SpecialInstructionSet == "3set"){
                            
                            local BolsterDist = 60
                            
                            if(MODELS[ModelIDToSpawn,string] == "models/hanksabutt/rollingstock/wellcars/wellcar_lopac_middle.mdl"){
                                BolsterDist = 613
                            }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_53_middle.mdl"){
                                BolsterDist = 800
                            }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_48_middle.mdl"){
                                BolsterDist = 736
                            }elseif(MODELS[ModelIDToSpawn,string]:find("models/magtrains/intermodal/wellcar_40")){
                                BolsterDist = 640
                            }
                        
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + BolsterDist))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies - BolsterDist))
                            
                            local Differ = (AnchorPoints[3,vector]-AnchorPoints[1,vector])
                            
                            CarSlopeAngle = atan(Differ:z()/flat(Differ):length())
                            SlopeAxis = flat(Differ):rotateAroundAxis(vec(0,0,1),-90) 
                            
                        }elseif(SpecialInstructionSet == "5set"){
                            
                            local BolsterDist = 60
                            
                            if(MODELS[ModelIDToSpawn,string] == "models/hanksabutt/rollingstock/wellcars/wellcar_lopac_middle.mdl"){
                                BolsterDist = 613
                            }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_53_middle.mdl"){
                                BolsterDist = 800
                            }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_48_middle.mdl"){
                                BolsterDist = 736
                            }elseif(MODELS[ModelIDToSpawn,string]:find("models/magtrains/intermodal/wellcar_40")){
                                BolsterDist = 640
                            }
                            
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + BolsterDist))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies - BolsterDist))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + BolsterDist*2))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies - BolsterDist*2))
                            
                            local Differ = (AnchorPoints[3,vector]-AnchorPoints[1,vector])
                            
                            CarSlopeAngle = atan(Differ:z()/flat(Differ):length())
                            SlopeAxis = flat(Differ):rotateAroundAxis(vec(0,0,1),-90) 
                            
                        }elseif(SpecialInstructionSet == "zilla"){
                            
                            local BolsterDist = 60
                            
                            if(MODELS[ModelIDToSpawn,string] == "models/hanksabutt/rollingstock/wellcars/wellcar_lopac_middle.mdl"){
                                BolsterDist = 613
                            }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_53_middle.mdl"){
                                BolsterDist = 800
                            }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_48_middle.mdl"){
                                BolsterDist = 736
                            }elseif(MODELS[ModelIDToSpawn,string]:find("models/magtrains/intermodal/wellcar_40")){
                                BolsterDist = 640
                            }
                            
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + BolsterDist))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies - BolsterDist))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + BolsterDist*2))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies - BolsterDist*2))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + BolsterDist*3))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies - BolsterDist*3))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + BolsterDist*4))
                            AnchorPoints = AnchorPoints:add(locate(EndOfTrainDistance + CarLengthBetweenBogies - BolsterDist*4))
                            
                            
                            local Differ = (AnchorPoints[3,vector]-AnchorPoints[1,vector])
                            
                            CarSlopeAngle = atan(Differ:z()/flat(Differ):length())
                            SlopeAxis = flat(Differ):rotateAroundAxis(vec(0,0,1),-90) 
                            
                        }
                        
                        SpawnPhase = 1
                        
                        Props:pushArray(array())
                        CarEntityArray = Props[Props:count(),array]
                        
                    }
                    
                    if(SpawnPhase == 1){
                        
                        local SpawnModel = ""
                        local SpawnPos = vec(0)
                        local SpawnAng = ang(0)
                        
                        local Progress = Props[Props:count(),array]:count()
                        
                        local CanFlipCar = 1 #not working correctly, difficult to explain why
                        #[if(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_53_middle.mdl" | MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_48_middle.mdl"){
                            CanFlipCar = 0
                        }]#
                        
                        local FlipState = CanFlipCar ? (Flipping_Direction != 0 ? clamp(Flipping_Direction,0,1) : randint(0,1)) : 0
                            
                        if(SpecialInstructionSet == "" | SpecialInstructionSet == "2axle"){
        
                            if(Progress == 0){ #Frame
                            
                                SpawnModel = MODELS[ModelIDToSpawn,string]
                                SpawnPos = (AnchorPoints[3,vector]+AnchorPoints[1,vector])/2 + vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat((AnchorPoints[3,vector]-AnchorPoints[1,vector])):rotateAroundAxis(vec(0,0,1),MODELS[ModelIDToSpawn+3,vector4]:z()+90+(FlipState*180)):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 1){ #Rear Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[1,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[2,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 2){ #Front Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[3,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[4,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }
                            
                        }elseif(SpecialInstructionSet == "whale"){
                        
                            if(Progress == 0){ #Frame
                            
                                SpawnModel = MODELS[ModelIDToSpawn,string]
                                SpawnPos = (AnchorPoints[1,vector]+AnchorPoints[3,vector]+AnchorPoints[5,vector]+AnchorPoints[7,vector])/4 + vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat((AnchorPoints[3,vector]+AnchorPoints[7,vector]-AnchorPoints[1,vector]-AnchorPoints[5,vector])):rotateAroundAxis(vec(0,0,1),MODELS[ModelIDToSpawn+3,vector4]:z()+90+(randint(0,1)*180)):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 1){ #Rear Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[1,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[2,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 2){ #Front Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[3,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[4,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 3){ #2nd Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[5,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[6,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 4){ #3rd Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[7,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[8,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 5){ #Front Bolster
                                
                                SpawnModel = "models/props_metaladon/tanker_50k_whalebelly_bolster.mdl"
                                SpawnPos = ((AnchorPoints[1,vector]+AnchorPoints[5,vector])/2)+vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]-7):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat((AnchorPoints[1,vector]-AnchorPoints[5,vector])):rotateAroundAxis(vec(0,0,1),90):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 6){ #Rear Bolster
                                
                                SpawnModel = "models/props_metaladon/tanker_50k_whalebelly_bolster.mdl"
                                SpawnPos = ((AnchorPoints[3,vector]+AnchorPoints[7,vector])/2)+vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]-7):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat((AnchorPoints[3,vector]-AnchorPoints[7,vector])):rotateAroundAxis(vec(0,0,1),90):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }
                            
                        }elseif(SpecialInstructionSet == "hotmetalcar"){
                        
                            if(Progress == 0){ #Frame
                            
                                SpawnModel = MODELS[ModelIDToSpawn,string]
                                SpawnPos = (AnchorPoints[1,vector]+AnchorPoints[3,vector]+AnchorPoints[5,vector]+AnchorPoints[7,vector])/4 + vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat((AnchorPoints[3,vector]+AnchorPoints[7,vector]-AnchorPoints[1,vector]-AnchorPoints[5,vector])):rotateAroundAxis(vec(0,0,1),MODELS[ModelIDToSpawn+3,vector4]:z()+90):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 1){ #Rear Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[1,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[2,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 2){ #Front Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[3,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[4,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 3){ #2nd Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[5,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[6,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 4){ #3rd Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[7,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[8,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 5){ #Front Bolster
                                
                                SpawnModel = "models/props_metaladon/placeholders/hotmetal_8axle_torpedo_bolster_plain.mdl"
                                SpawnAng = flat((AnchorPoints[5,vector]-AnchorPoints[1,vector])):rotateAroundAxis(vec(0,0,1),90):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnPos = ((AnchorPoints[1,vector]+AnchorPoints[5,vector])/2)+vec(0,25,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle):rotateAroundAxis(vec(0,0,1),SpawnAng:yaw())
                                
                                
                            }elseif(Progress == 6){ #Rear Bolster
                                
                                SpawnModel = "models/props_metaladon/placeholders/hotmetal_8axle_torpedo_bolster_greebles.mdl"
                                SpawnAng = flat((AnchorPoints[3,vector]-AnchorPoints[7,vector])):rotateAroundAxis(vec(0,0,1),90):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnPos = ((AnchorPoints[3,vector]+AnchorPoints[7,vector])/2)+vec(0,-25,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle):rotateAroundAxis(vec(0,0,1),SpawnAng:yaw())
                                
                                
                            }
                            
                        }elseif(SpecialInstructionSet == "3set"){
                        
                            if(Progress == 0){ #Center Frame
                            
                                SpawnModel = MODELS[ModelIDToSpawn,string]
                                SpawnPos = (AnchorPoints[5,vector]+AnchorPoints[7,vector])/2 + vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat(AnchorPoints[7,vector]-AnchorPoints[5,vector]):rotateAroundAxis(vec(0,0,1),MODELS[ModelIDToSpawn+3,vector4]:z()+90+(randint(0,1)*180)):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 1){ #Rear Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[1,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[2,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 2){ #Front Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[3,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[4,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 3){ #2nd Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[5,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[6,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 4){ #3rd Bogie
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[7,vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[8,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 5){ #Front Bolster
                                
                                local WellcarData = get_wellcar_ends(MODELS[ModelIDToSpawn,string],1)
                                
                                SpawnModel = WellcarData[1,string]
                                SpawnPos = ((AnchorPoints[1,vector]+AnchorPoints[5,vector])/2)+vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat((AnchorPoints[5,vector]-AnchorPoints[1,vector])):rotateAroundAxis(vec(0,0,1),WellcarData[2,number]):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Progress == 6){ #Rear Bolster
                                
                                local WellcarData = get_wellcar_ends(MODELS[ModelIDToSpawn,string],-1)

                                SpawnModel = WellcarData[1,string]
                                SpawnPos = ((AnchorPoints[3,vector]+AnchorPoints[7,vector])/2)+vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat((AnchorPoints[3,vector]-AnchorPoints[7,vector])):rotateAroundAxis(vec(0,0,1),WellcarData[2,number]):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }
                            
                        }elseif(SpecialInstructionSet == "5set"){
                            
                            local Types = array("Base","Bogie","Bogie","Bogie","Bogie","End1","End2","Bogie","Bogie","Base","Base")
                            local Anchors = array(vec2(9,11),1,3,5,7,vec2(5,1),vec2(3,7),9,11,vec2(7,11),vec2(9,5))
                            
                            local Type = Types[Progress+1,string]
                        
                            if(Type == "Base"){
                            
                                SpawnModel = MODELS[ModelIDToSpawn,string]
                                SpawnPos = (AnchorPoints[Anchors[Progress+1,vector2]:x(),vector]+AnchorPoints[Anchors[Progress+1,vector2]:y(),vector])/2 + vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat(AnchorPoints[Anchors[Progress+1,vector2]:y(),vector]-AnchorPoints[Anchors[Progress+1,vector2]:x(),vector]):rotateAroundAxis(vec(0,0,1),MODELS[ModelIDToSpawn+3,vector4]:z()+90+(randint(0,1)*180)):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Type == "Bogie"){
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[Anchors[Progress+1,number],vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[Anchors[Progress+1,number]+1,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Type:find("End")){
                                
                                local WellcarData = get_wellcar_ends(MODELS[ModelIDToSpawn,string],Type == "End1" ? 1 : -1)
                                
                                SpawnModel = WellcarData[1,string]
                                SpawnPos = ( (AnchorPoints[Anchors[Progress+1,vector2]:x(),vector]+AnchorPoints[Anchors[Progress+1,vector2]:y(),vector])/2)+vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat( (AnchorPoints[Anchors[Progress+1,vector2]:x(),vector]-AnchorPoints[Anchors[Progress+1,vector2]:y(),vector])):rotateAroundAxis(vec(0,0,1),WellcarData[2,number]):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }
                            
                        }elseif(SpecialInstructionSet == "zilla"){
                            
                            local Types = array("Base","Bogie","Bogie","Bogie","Bogie","End1","End2","Bogie","Bogie","Base","Base","Base","Base","Base","Base","Bogie","Bogie","Bogie","Bogie")
                            local Anchors = array(vec2(17,19),1,3,5,7,vec2(5,1),vec2(3,7),9,11,vec2(7,11),vec2(9,5),vec2(9,13),vec2(15,11),vec2(15,19),vec2(17,13),13,15,17,19)
                            
                            local Type = Types[Progress+1,string]
                        
                            if(Type == "Base"){
                            
                                SpawnModel = MODELS[ModelIDToSpawn,string]
                                SpawnPos = (AnchorPoints[Anchors[Progress+1,vector2]:x(),vector]+AnchorPoints[Anchors[Progress+1,vector2]:y(),vector])/2 + vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat(AnchorPoints[Anchors[Progress+1,vector2]:y(),vector]-AnchorPoints[Anchors[Progress+1,vector2]:x(),vector]):rotateAroundAxis(vec(0,0,1),MODELS[ModelIDToSpawn+3,vector4]:z()+90+(randint(0,1)*180)):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Type == "Bogie"){
                                
                                SpawnModel = BogieData[1,string]
                                SpawnPos = AnchorPoints[Anchors[Progress+1,number],vector]+vec(0,0,BogieData[2,number]-Railhead):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = ang(0,AnchorPoints[Anchors[Progress+1,number]+1,number]+BogieData[4,number],0):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }elseif(Type:find("End")){
                                
                                local WellcarData = get_wellcar_ends(MODELS[ModelIDToSpawn,string],Type == "End1" ? 1 : -1)
                                
                                SpawnModel = WellcarData[1,string]
                                SpawnPos = ( (AnchorPoints[Anchors[Progress+1,vector2]:x(),vector]+AnchorPoints[Anchors[Progress+1,vector2]:y(),vector])/2)+vec(0,0,MODELS[ModelIDToSpawn+3,vector4]:y()-Railhead+BogieData[3,number]):rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                SpawnAng = flat( (AnchorPoints[Anchors[Progress+1,vector2]:x(),vector]-AnchorPoints[Anchors[Progress+1,vector2]:y(),vector])):rotateAroundAxis(vec(0,0,1),WellcarData[2,number]):toAngle():rotateAroundAxis(SlopeAxis,CarSlopeAngle)
                                
                            }
                            
                        }
                        
                        local Prop = noentity()
                        
                        if(validate(SpawnModel,SpawnPos,SpawnAng)){
                            
                            Prop = propSpawn(SpawnModel,SpawnPos,SpawnAng,1)
                                                
                        }else{
                        
                            printS(1,"Broken car \""+MODELS[ModelIDToSpawn,string]+"\" detected! Spawning halted. This is probably because A: The server doesn't have the car model installed (do .addons for requirements) or B: The server has been running for longer than 12hrs, and addons have broken.")
                            ParserSpacesIterator = ParserTagGroupsIterator = ParserTagItemsIterator = 1
                            MainCommandQueue:remove(1)
                            CommandArchive:pushString(systime()+" spwn brokencar")
                            BlockedCarBuffer = array()
                            
                            foreach(OLD:number, Entity:entity = Props[Props:count(),array]){
                                
                                OLD = OLD
                                Entity:propDelete()
                                
                            }
                            
                        }
                        
                        if(Prop:isValid()){
                            
                            Prop:nudge() #move the car according to custom centering rules defined in NUDGE
                            
                            CarEntityArray:pushEntity(Prop)
                            Prop:setMass(50000)
                            
                        }
                        
                        if((SpecialInstructionSet == "" | SpecialInstructionSet == "2axle") & Props[Props:count(),array]:count() == 3){
                            
                            SpawnPhase = 2
                            
                        }elseif((SpecialInstructionSet == "whale" | SpecialInstructionSet == "3set" | SpecialInstructionSet == "hotmetalcar") & Props[Props:count(),array]:count() == 7){
                            
                            SpawnPhase = 2
                            
                        }elseif(SpecialInstructionSet == "5set" & Props[Props:count(),array]:count() == 11){
                            
                            SpawnPhase = 2
                            
                        }elseif(SpecialInstructionSet == "zilla" & Props[Props:count(),array]:count() == 19){
                            
                            SpawnPhase = 2
                            
                        }
                        
                    }
                    
                }
                    
                if(SpawnPhase == 2 & minquota() > 3000){
                    
                    SpawnPhase = 0
                    
                    CarEntityArray[1,entity]:noCollideAll(1)
                    
                    if(SpecialInstructionSet == "hotmetalcar" | SpecialInstructionSet == "whale" | SpecialInstructionSet == "3set"){
                        
                        CarEntityArray[6,entity]:noCollideAll(1)
                        CarEntityArray[7,entity]:noCollideAll(1)
                        
                    }
                    
                    if(SpecialInstructionSet == "5set"){
                        
                        CarEntityArray[6,entity]:noCollideAll(1)
                        CarEntityArray[7,entity]:noCollideAll(1)
                        CarEntityArray[10,entity]:noCollideAll(1)
                        CarEntityArray[11,entity]:noCollideAll(1)
                        
                    }
                    
                    if(SpecialInstructionSet == "zilla"){
                        
                        CarEntityArray[6,entity]:noCollideAll(1)
                        CarEntityArray[7,entity]:noCollideAll(1)
                        CarEntityArray[10,entity]:noCollideAll(1)
                        CarEntityArray[11,entity]:noCollideAll(1)
                        CarEntityArray[12,entity]:noCollideAll(1)
                        CarEntityArray[13,entity]:noCollideAll(1)
                        CarEntityArray[14,entity]:noCollideAll(1)
                        CarEntityArray[15,entity]:noCollideAll(1)
                        
                    }
                    
                    if(SpecialInstructionSet == "hotmetalcar"){
                        
                        CarEntityArray[2,entity]:noCollide(CarEntityArray[4,entity])
                        CarEntityArray[3,entity]:noCollide(CarEntityArray[5,entity])
                        
                    }
                    
                    local EntityIDsArray = array()
                    
                    foreach(OLD:number,Ent:entity = CarEntityArray){
                        
                        OLD = OLD
                        EntityIDsArray:pushNumber(Ent:id())
                        
                    }
                    
                    local As = table(EntityIDsArray,MainCommandQueue[1,table][6,string])
                
                    if(MainCommandQueue[1,table][6,string] != ""){
                        if(minquota() < 1){print("PREPARE FOR IMPACT; REPORT THIS BUG TO METALADON")}
                        dsSend("markthis","operations",As:clone())
                        
                    }
                    
                    if(maxquota() < 1000){
                        
                        print("durrr ima die now -data signal stupidity")
                        
                    }
                    
                    #CarEntityArray[1,entity]:quickSetupAutoCouplers(48,DRAWBAR_LENGTH,0)
                             
                    CarEntityArray[1,entity]:soundPlay(SoundID+5,100,"doors/heavy_metal_stop1.wav")
                    SoundID = (SoundID+1)%10
                    
                    CarModelIDs[Props:count(),number] = ModelIDToSpawn
                    
                    if(SpecialInstructionSet == "whale" | SpecialInstructionSet == "hotmetalcar"){
                        
                        axis(CarEntityArray[2,entity],CarEntityArray[2,entity]:massCenterL(),CarEntityArray[6,entity],CarEntityArray[6,entity]:toLocal(CarEntityArray[2,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[3,entity],CarEntityArray[3,entity]:massCenterL(),CarEntityArray[7,entity],CarEntityArray[7,entity]:toLocal(CarEntityArray[3,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[4,entity],CarEntityArray[4,entity]:massCenterL(),CarEntityArray[6,entity],CarEntityArray[6,entity]:toLocal(CarEntityArray[4,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[5,entity],CarEntityArray[5,entity]:massCenterL(),CarEntityArray[7,entity],CarEntityArray[7,entity]:toLocal(CarEntityArray[5,entity]:massCenter()+vec(0,0,10)))
                        
                        axis(CarEntityArray[6,entity],vec(0),CarEntityArray[1,entity],CarEntityArray[1,entity]:toLocal(CarEntityArray[6,entity]:pos()+vec(0,0,10)))
                        axis(CarEntityArray[7,entity],vec(0),CarEntityArray[1,entity],CarEntityArray[1,entity]:toLocal(CarEntityArray[7,entity]:pos()+vec(0,0,10)))
                        
                    }elseif(SpecialInstructionSet == "3set"){
                        
                        axis(CarEntityArray[4,entity],CarEntityArray[4,entity]:massCenterL(),CarEntityArray[1,entity],CarEntityArray[1,entity]:toLocal(CarEntityArray[4,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[5,entity],CarEntityArray[5,entity]:massCenterL(),CarEntityArray[1,entity],CarEntityArray[1,entity]:toLocal(CarEntityArray[5,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[2,entity],CarEntityArray[2,entity]:massCenterL(),CarEntityArray[6,entity],CarEntityArray[6,entity]:toLocal(CarEntityArray[2,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[3,entity],CarEntityArray[3,entity]:massCenterL(),CarEntityArray[7,entity],CarEntityArray[7,entity]:toLocal(CarEntityArray[3,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[4,entity],CarEntityArray[4,entity]:massCenterL(),CarEntityArray[6,entity],CarEntityArray[6,entity]:toLocal(CarEntityArray[4,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[5,entity],CarEntityArray[5,entity]:massCenterL(),CarEntityArray[7,entity],CarEntityArray[7,entity]:toLocal(CarEntityArray[5,entity]:massCenter()+vec(0,0,10)))
                        
                    }elseif(SpecialInstructionSet == "5set"){
                        
                        #local Types = array("Base","Bogie","Bogie","Bogie","Bogie","End1","End2","Bogie","Bogie","Base","Base")
                        #local Anchors = array(vec2(9,11),1,3,5,7,vec2(5,1),vec2(3,7),9,11,vec2(7,11),vec2(9,5))
                        
                        #3 to 5, 5 to 9, 9 to 8, 8 to 4 4 to 2
                        
                        local Instr = array(vec2(2,6),vec2(3,7),vec2(4,6),vec2(5,7),vec2(4,11),vec2(5,10),vec2(8,1),vec2(9,1),vec2(8,11),vec2(9,10))
                        
                        for(X = 1,Instr:count()){
                        
                            axis(CarEntityArray[Instr[X,vector2]:x(),entity],
                            CarEntityArray[Instr[X,vector2]:x(),entity]:massCenterL(),
                            CarEntityArray[Instr[X,vector2]:y(),entity],
                            CarEntityArray[Instr[X,vector2]:y(),entity]:toLocal(
                            CarEntityArray[Instr[X,vector2]:x(),entity]:massCenter()+vec(0,0,10)))
                            
                        }
                        
                    }elseif(SpecialInstructionSet == "zilla"){
                        
                        #local Types = array("Base","Bogie","Bogie","Bogie","Bogie","End1","End2","Bogie","Bogie","Base","Base",base,base,base,base,b,b,b,b)
                        #local Anchors = array(vec2(9,11),1,3,5,7,vec2(5,1),vec2(3,7),9,11,vec2(7,11),vec2(9,5))
                        
                        #3 to 5, 5 to 9, 9 to 8, 8 to 4 4 to 2

                        local Instr = array(vec2(2,6),vec2(3,7),vec2(4,6),vec2(5,7),vec2(4,11),vec2(5,10),vec2(18,1),vec2(19,1),vec2(8,11),vec2(9,10),vec2(8,12),vec2(9,13),vec2(18,15),vec2(19,14),vec2(16,15),vec2(17,14),vec2(16,12),vec2(17,13))
                        
                        for(X = 1,Instr:count()){
                        
                            axis(CarEntityArray[Instr[X,vector2]:x(),entity],
                            CarEntityArray[Instr[X,vector2]:x(),entity]:massCenterL(),
                            CarEntityArray[Instr[X,vector2]:y(),entity],
                            CarEntityArray[Instr[X,vector2]:y(),entity]:toLocal(
                            CarEntityArray[Instr[X,vector2]:x(),entity]:massCenter()+vec(0,0,10)))
                            
                        }

                        
                    }elseif(SpecialInstructionSet == "2axle"){
                        
                        CarEntityArray[2,entity]:weld(CarEntityArray[1,entity])
                        CarEntityArray[3,entity]:weld(CarEntityArray[1,entity])
                        
                    }else{
                    
                        axis(CarEntityArray[2,entity],CarEntityArray[2,entity]:massCenterL(),CarEntityArray[1,entity],CarEntityArray[1,entity]:toLocal(CarEntityArray[2,entity]:massCenter()+vec(0,0,10)))
                        axis(CarEntityArray[3,entity],CarEntityArray[3,entity]:massCenterL(),CarEntityArray[1,entity],CarEntityArray[1,entity]:toLocal(CarEntityArray[3,entity]:massCenter()+vec(0,0,10)))
                        
                    }
                    
                    local PrevBogie = Props[Props:count()-1,array][3,entity]
                    
                    local Invalid = 0
                    
                    if(!PrevBogie:isValidPhysics()){
                        Invalid = 1
                    }
                    
                    CarEntityArray[1,entity]:quickSetupAutoCouplers(48,DRAWBAR_LENGTH,2)
                    
                    if(!Invalid & CarEntityArray[2,entity]:massCenter():distance(PrevBogie:massCenter()) < 400){
                        
                        RopeID++
                        
                        Offset = (PrevBogie:toWorld(PrevBogie:massCenterL())-CarEntityArray[2,entity]:toWorld(CarEntityArray[2,entity]:massCenterL()))/
                        (PrevBogie:toWorld(PrevBogie:massCenterL())-CarEntityArray[2,entity]:toWorld(CarEntityArray[2,entity]:massCenterL())):length()
                        if(CarEntityArray[2,entity]:isValid() & PrevBogie:isValid()){
                            
                            if(DRAWBAR_LENGTH == 0){
                                rope(RopeID,CarEntityArray[2,entity],CarEntityArray[2,entity]:toLocal((Offset*50)+CarEntityArray[2,entity]:massCenter()),
                                PrevBogie,PrevBogie:toLocal((-Offset*50)+PrevBogie:massCenter()),0,0,"cable",1)
                            }else{
                                local MidPoint = (CarEntityArray[2,entity]:pos() + PrevBogie:pos())/2
                                #Slack mod
                                rope(RopeID,CarEntityArray[2,entity],CarEntityArray[2,entity]:toLocal(MidPoint),PrevBogie,PrevBogie:toLocal(MidPoint),DRAWBAR_LENGTH/2,0,"cable",0)
                            }
                            
                        }
                        
                        CommandArchive:pushString(systime()+" rope attempt "+CarEntityArray[2,entity]:massCenter():distance(PrevBogie:massCenter())+" "+CarEntityArray[2,entity]:id()+",and "+PrevBogie:id())
                        
                    }
                    
                    PrevTrainWeight = TotalTrainWeight
                    
                    if(OperationsArmingSwitch){
                        
                        CarEntityArray[1,entity]:setMass(10000)
                        CarEntityArray[2,entity]:setMass(3500)
                        CarEntityArray[3,entity]:setMass(3500)
                        
                    }else{
                    
                        CarEntityArray[1,entity]:setMass(max(progress(CarIsLoaded,MODELS[ModelIDToSpawn+8,number])*((3/5)*(WEIGHT_MULTIPLIER*907)),8163))
                        CarEntityArray[2,entity]:setMass(max(progress(CarIsLoaded,MODELS[ModelIDToSpawn+8,number])*((1/5)*(WEIGHT_MULTIPLIER*907)),2721))
                        CarEntityArray[3,entity]:setMass(max(progress(CarIsLoaded,MODELS[ModelIDToSpawn+8,number])*((1/5)*(WEIGHT_MULTIPLIER*907)),2721))
                        
                        TotalTrainWeight = TotalTrainWeight + (CarEntityArray[2,entity]:mass() + CarEntityArray[3,entity]:mass() + CarEntityArray[1,entity]:mass())/WEIGHT_MULTIPLIER
                        
                    }
                    
                    if(SpecialInstructionSet == "whale" | SpecialInstructionSet == "hotmetalcar"){
                        
                        CarEntityArray[1,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[2,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[3,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[4,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[5,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[6,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[7,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        
                        TotalTrainWeight = TotalTrainWeight + (13* 15000)
                        
                    }elseif(SpecialInstructionSet == "3set"){
                        
                        CarEntityArray[1,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[2,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[3,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[4,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[5,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[6,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[7,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        
                        TotalTrainWeight = TotalTrainWeight + (13* 15000)
                        
                    }elseif(SpecialInstructionSet == "5set"){
                        
                        CarEntityArray[1,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[2,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[3,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[4,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[5,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[6,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[7,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[8,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[9,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[10,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[11,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        
                        TotalTrainWeight = TotalTrainWeight + (21 * 15000)
                        
                    }elseif(SpecialInstructionSet == "zilla"){
                        
                        CarEntityArray[1,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[2,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[3,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[4,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[5,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[6,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[7,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[8,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[9,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[10,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[11,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[12,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[13,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[14,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[15,entity]:setMass(15000*3*WEIGHT_MULTIPLIER)
                        CarEntityArray[16,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[17,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[18,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        CarEntityArray[19,entity]:setMass(15000*WEIGHT_MULTIPLIER)
                        
                        TotalTrainWeight = TotalTrainWeight + (37 * 15000)
                        
                    }
                    
                    
                    
                    for(X = 1,MODELS[ModelIDToSpawn+7,array]:count()){
                        
                        W = randint(MODELS[ModelIDToSpawn+7,array][X,vector]:y(),MODELS[ModelIDToSpawn+7,array][X,vector]:z())
                         
                        CarEntityArray[1,entity]:setBodygroup(MODELS[ModelIDToSpawn+7,array][X,vector]:x(),W)
                        if(CarEntityArray[1,entity]:getBodygroups(MODELS[ModelIDToSpawn+7,array][X,vector]:x()) == 1){
                            
                            printS(1,"Spawning \""+extractModelName(CarEntityArray[1,entity]:model())+"\" attempted to address a bodygroup slot with no options. Slot " + MODELS[ModelIDToSpawn+7,array][X,vector]:x()+" , option " + W)
                            
                        }
                        
                        local EntitiesTodo = array(6,7,10,11,12,13,14,15)
                        
                        for(Y = 1,EntitiesTodo:count()){
                            
                            W = randint(MODELS[ModelIDToSpawn+7,array][X,vector]:y(),MODELS[ModelIDToSpawn+7,array][X,vector]:z()+1)
                            CarEntityArray[Y,entity]:setBodygroup(MODELS[ModelIDToSpawn+7,array][X,vector]:x(),W)
                            
                        }

                    }
        
                    W = randint(1,WEATHERING:count()/ENTRIES_PER_WEATHERING)*ENTRIES_PER_WEATHERING
                    
                    for(X = 1,MODELS[ModelIDToSpawn+4,array]:count()/2){
                         
                        CarEntityArray[1,entity]:setSubMaterial(MODELS[ModelIDToSpawn+4,array][X*2,number],WEATHERING[W-(ENTRIES_PER_WEATHERING-MODELS[ModelIDToSpawn+4,array][X*2-1,number]),string])
                        
                    }
                    
                    local SpecialWeathering = table()
                    
                    if(SpecialInstructionSet == "whale"){
                        
                        SpecialWeathering:pushTable(table(CarEntityArray[6,entity],array(1,1,2,3)))
                        
                    }elseif(SpecialInstructionSet == "hotmetalcar"){
                        
                        SpecialWeathering:pushTable(table(CarEntityArray[6,entity],array(3,1,2,4,2,5)))
                        SpecialWeathering:pushTable(table(CarEntityArray[7,entity],array(3,4,2,1,2,2)))
                        
                    }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_53_middle.mdl"){
                        
                        SpecialWeathering:pushTable(table(CarEntityArray[6,entity],array(1,1,2,2,3,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[7,entity],array(1,2,3,3,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[10,entity],array(1,1,3,2,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[11,entity],array(1,1,3,2,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[12,entity],array(1,1,3,2,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[13,entity],array(1,1,3,2,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[14,entity],array(1,1,3,2,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[15,entity],array(1,1,3,2,2,4)))
                        
                    }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_48_middle.mdl"){
                        
                        SpecialWeathering:pushTable(table(CarEntityArray[6,entity],array(1,1,3,2,2,3)))
                        SpecialWeathering:pushTable(table(CarEntityArray[7,entity],array(1,2,3,3,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[10,entity],array(1,1,3,3,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[11,entity],array(1,1,3,3,2,4)))
                        
                    }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_40_middle.mdl"){
                        
                        SpecialWeathering:pushTable(table(CarEntityArray[6,entity],array(1,1,3,2,2,3)))
                        SpecialWeathering:pushTable(table(CarEntityArray[7,entity],array(1,2,3,3,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[10,entity],array(1,1,3,3,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[11,entity],array(1,1,3,3,2,4)))
                        
                    }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_40b_middle.mdl"){
                        
                        SpecialWeathering:pushTable(table(CarEntityArray[6,entity],array(1,1,3,2,2,3)))
                        SpecialWeathering:pushTable(table(CarEntityArray[7,entity],array(1,1,3,2,2,3)))
                        SpecialWeathering:pushTable(table(CarEntityArray[10,entity],array(1,1,3,2)))
                        SpecialWeathering:pushTable(table(CarEntityArray[11,entity],array(1,1,3,2)))
                        
                    }elseif(MODELS[ModelIDToSpawn,string] == "models/magtrains/intermodal/wellcar_40r_middle.mdl"){
                        
                        SpecialWeathering:pushTable(table(CarEntityArray[6,entity],array(1,1,3,3,2,2)))
                        SpecialWeathering:pushTable(table(CarEntityArray[7,entity],array(1,2,3,3,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[10,entity],array(1,1,3,2,2,4)))
                        SpecialWeathering:pushTable(table(CarEntityArray[11,entity],array(1,1,3,2,2,4)))
                        
                    }
                    
                    for(T = 1,SpecialWeathering:count()){
                    
                        local WeatherData = SpecialWeathering[T,table]
                    
                        for(X = 1,WeatherData[2,array]:count()/2){
                        
                            WeatherData[1,entity]:setSubMaterial(WeatherData[2,array][X*2,number],WEATHERING[W-(ENTRIES_PER_WEATHERING-WeatherData[2,array][X*2-1,number]),string])
                            
                        }
                        
                    }
                    
                    local BogieBodygroups = BogieData[7,array]
                    
                    if(SpecialInstructionSet == "whale"){
                        
                        BogieBodygroups = array(1,1)
                        
                    }
                    
                    if(SpecialInstructionSet == "hotmetalcar"){
                        
                        BogieBodygroups = array(1,0)
                        
                    }
        
                    BogBody = randomBogieBodygroups(BogieData[1,string],MODELS[ModelIDToSpawn+2,string],MODELS[ModelIDToSpawn+8,number],BogieBodygroups)
                    
                    
                    Bogies = array(CarEntityArray[2,entity],CarEntityArray[3,entity])
                    
                    if(SpecialInstructionSet == "whale" | SpecialInstructionSet == "3set" | SpecialInstructionSet == "hotmetalcar"){
                        
                        Bogies:pushEntity(CarEntityArray[4,entity])
                        Bogies:pushEntity(CarEntityArray[5,entity])
                        
                    }elseif(SpecialInstructionSet == "5set"){
                        
                        Bogies:pushEntity(CarEntityArray[4,entity])
                        Bogies:pushEntity(CarEntityArray[5,entity])
                        Bogies:pushEntity(CarEntityArray[8,entity])
                        Bogies:pushEntity(CarEntityArray[9,entity])
                        
                    }elseif(SpecialInstructionSet == "zilla"){
                        
                        Bogies:pushEntity(CarEntityArray[4,entity])
                        Bogies:pushEntity(CarEntityArray[5,entity])
                        Bogies:pushEntity(CarEntityArray[8,entity])
                        Bogies:pushEntity(CarEntityArray[9,entity])
                        Bogies:pushEntity(CarEntityArray[16,entity])
                        Bogies:pushEntity(CarEntityArray[17,entity])
                        Bogies:pushEntity(CarEntityArray[18,entity])
                        Bogies:pushEntity(CarEntityArray[19,entity])
                        
                    }
                    
                    for(B = 1,Bogies:count()){
                    
                        for(X = 1,BogBody:count()/2){
                            
                            Bogies[B,entity]:setBodygroup(BogBody[X*2-1,number],BogBody[X*2,number])
                            
                        }
            
                        for(X = 1,BogieData[8,array]:count()/2){
                            
                            Bogies[B,entity]:setSubMaterial(BogieData[8,array][X*2-1,number],BogieData[8,array][X*2,string])
                            
                        }
                        
                        Bogies[B,entity]:propPhysicalMaterial("friction_00")
                        Bogies[B,entity]:setColor(BogieData[5,vector])
                        
                    }
                    
                    if(MODELS[ModelIDToSpawn+5,array]:count()){
                    
                        W = randint(1,MODELS[ModelIDToSpawn+5,array]:count())
                        
                        local Base = COLORS[MODELS[ModelIDToSpawn+5,array][W,number]*2-1,vector]
                        local Shade = COLORS[MODELS[ModelIDToSpawn+5,array][W,number]*2,vector]
                        
                        local Color = hsl2rgb(vec(mod(random(Base:x(),Shade:x()),360),clamp(Base:y()+random(Shade:y(),-Shade:y()),0,1),clamp(Base:z()+random(Shade:z(),-Shade:z()),0,1)))
                        
                        CarEntityArray[1,entity]:setColor(Color)
                        
                        if(SpecialInstructionSet == "whale" | SpecialInstructionSet == "hotmetalcar" | SpecialInstructionSet == "3set"){
                            
                            CarEntityArray[6,entity]:setColor(Color)
                            CarEntityArray[7,entity]:setColor(Color)
                            
                        }elseif(SpecialInstructionSet == "5set"){
                            
                            CarEntityArray[6,entity]:setColor(Color)
                            CarEntityArray[7,entity]:setColor(Color)
                            CarEntityArray[10,entity]:setColor(Color)
                            CarEntityArray[11,entity]:setColor(Color)
                            
                        }elseif(SpecialInstructionSet == "zilla"){
                            
                            CarEntityArray[6,entity]:setColor(Color)
                            CarEntityArray[7,entity]:setColor(Color)
                            CarEntityArray[10,entity]:setColor(Color)
                            CarEntityArray[11,entity]:setColor(Color)
                            CarEntityArray[12,entity]:setColor(Color)
                            CarEntityArray[13,entity]:setColor(Color)
                            CarEntityArray[14,entity]:setColor(Color)
                            CarEntityArray[15,entity]:setColor(Color)
                            
                        }
                        
                    }
                    
                    local Skin = randint(MODELS[ModelIDToSpawn+6,vector2]:x(),MODELS[ModelIDToSpawn+6,vector2]:y())
                    
                    if(CarEntityArray[1,entity]:model() == "models/gsgtrainprops/trains/rolling_stock/bathtub_thrall_coal.mdl" & Skin == 15){
                        Skin = 14
                    }
                    
                    if(CarEntityArray[1,entity]:model() == "models/zexciv_train_stuff/usa/stock/prr_g39_jenny.mdl"){
                        
                        if(Skin == 4 | Skin == 5 | (Skin >= 9 & Skin <= 14)){
                        
                            CarEntityArray[1,entity]:setBodygroup(1,1)
                            
                        }
                        
                    }
                    
                    if(CarEntityArray[1,entity]:model() == "models/zexciv_train_stuff/usa/stock/prr_g38_jenny.mdl"){
                        
                        if(Skin != 1 & Skin != 2 & Skin != 5){
                        
                            CarEntityArray[1,entity]:setBodygroup(1,1)
                            
                        }
                        
                    } 
                    
                    if(SpecialInstructionSet == "3set"){
                        
                        CarEntityArray[1,entity]:modSetSkin(Skin*3-3)
                        CarEntityArray[6,entity]:modSetSkin(Skin*2-2)
                        CarEntityArray[7,entity]:modSetSkin(Skin*2-1)
                        
                    }elseif(SpecialInstructionSet == "5set"){
                        
                        CarEntityArray[1,entity]:modSetSkin(Skin*3-3)
                        CarEntityArray[6,entity]:modSetSkin(Skin*2-2)
                        CarEntityArray[7,entity]:modSetSkin(Skin*2-1)
                        CarEntityArray[10,entity]:modSetSkin(Skin*3-2)
                        CarEntityArray[11,entity]:modSetSkin(Skin*3-1)
                        
                    }else{
                    
                        CarEntityArray[1,entity]:modSetSkin(Skin)
                        
                    }
                    
                    local NewLength = modelLength(ModelIDToSpawn)
                    
                    TotalTrainLength += NewLength
                    
                    MainCommandQueue[1,table][2,number] = max(MainCommandQueue[1,table][2,number]-1,0)
                    MainCommandQueue[1,table][3,number] = max(MainCommandQueue[1,table][3,number]-NewLength/12,0)
                    MainCommandQueue[1,table][4,number] = max(MainCommandQueue[1,table][4,number]-(TotalTrainWeight-PrevTrainWeight)/907,0)
                    
                    if(!MainCommandQueue[1,table][2,number] & !MainCommandQueue[1,table][3,number] & !MainCommandQueue[1,table][4,number]){
                        
                        MainCommandQueue:remove(1)
                        CommandArchive:pushString(systime()+" spwn completed")
                        BlockedCarBuffer = array()
                        endScan()
                        
                    }
                    
                    ModelIDToSpawn = 0
                    
                }
            
            break
            case("rem"),
            
                if(MainCommandQueue[1,table][2,number] <= 0 & MainCommandQueue[1,table][3,number] <= 0 & MainCommandQueue[1,table][4,number] <= 0){
                    
                    endScan()
                    MainCommandQueue:remove(1)
                    CommandArchive:pushString(systime()+" rem end odd")
                    
                }else{
                    
                    TotalTrainLength -= modelLength(CarModelIDs[Props:count(),number])
                    MainCommandQueue[1,table][2,number] = max(MainCommandQueue[1,table][2,number]-1,0)
                    MainCommandQueue[1,table][3,number] = max(MainCommandQueue[1,table][3,number]-modelLength(CarModelIDs[Props:count(),number])/12,0)
                    
                    foreach(OLD:number,Ent:entity = Props[Props:count(),array]){
                        
                        OLD = OLD
                        TotalTrainWeight -= Ent:mass()/WEIGHT_MULTIPLIER
                        MainCommandQueue[1,table][4,number] = MainCommandQueue[1,table][4,number]- (Ent:mass()/WEIGHT_MULTIPLIER)/907
                        Ent:propDelete()
                        
                    }
                    
                    Props:remove(Props:count()) 
                    
                    if((MainCommandQueue[1,table][2,number] <= 0 & MainCommandQueue[1,table][3,number] <= 0 & MainCommandQueue[1,table][4,number] <= 0) | !Props:count()){
                        
                        if(TotalTrainLength < 1){
                            
                            SpacerFtLength = 0
                            TotalTrainLength = 0
                            
                        }
                        
                        MainCommandQueue:remove(1)
                        CommandArchive:pushString(systime()+" rem end even")
                        endScan()
                        
                    }else{
                        
                        stoptimer("CommandLoop")
                        timer("CommandLoop",0.1,CommandLoop) #this refires the entire E2 more quickly so .rem commands are processed faster than the sluggish main update rate. Think of it as increasing your metabolism briefly to digest something.
                        
                    }
                    
                } 
                
            break
            case("spc"),
                
                SpacerFtLength = SpacerFtLength + MainCommandQueue[1,table][2,number]
                SpacerFtLength = (SpacerFtLength <= 0 ? 0 : SpacerFtLength) 
                MainCommandQueue:remove(1)
                CommandArchive:pushString(systime()+" spc end")
                
            break
            case("gauge"),
            
                local SetTo = determinebogie(MainCommandQueue[1,table][2,string])
                    
                if(SetTo == SpawnHeadEntity:model()){
                    
                    printS(0,"Gauge is already set to "+GaugeMode+".")
                    owner():soundPlay(3,100,"buttons/button16.wav",0)
                    MainCommandQueue:remove(1)
                    CommandArchive:pushString(systime()+" mode already")
                    
                }elseif(SetTo != ""){
                    
                    local NewGaugeMode = switchGauge(SetTo)
                        
                    if(NewGaugeMode != ""){
                        
                        local FirstBogieEntity = Props[1,array][2,entity]
                        enableConstraintUndo(0)
                        if(SpawnHeadEntity:isValid() & FirstBogieEntity:isValid()){SpawnHeadEntity:noCollide(FirstBogieEntity)}
                        enableConstraintUndo(1)
                        ForceUseThisBogie = ""
                        resetSpawn()
                        GaugeMode = NewGaugeMode
                        printS(0,"Changed the gauge mode to "+GaugeMode+", and reset spawn parameters.")
                        owner():soundPlay(3,100,"buttons/bell1.wav",0)
                        soundVolume(3,0.2)  
                        MainCommandQueue:remove(1)
                        CommandArchive:pushString(systime()+" mode done")
                      
                    }
                    
                }else{
                    
                    printS(0,"Could not recognise gauge mode.")
                    MainCommandQueue:remove(1)
                    CommandArchive:pushString(systime()+" mode bad")
                    owner():soundPlay(3,100,"buttons/combine_button_locked.wav",0)
                    soundVolume(3,0.2)
                    
                }
                
            break
            case("respawn"),
                
                local SetTo = switchGauge(MainCommandQueue[1,table][4,string])
                  
                if(SetTo != ""){
                    
                    ForceUseThisBogie = ""
                    resetSpawn()
                    GaugeMode = SetTo
                    
                    printS(0,"Deleting all cars spawned by the carspawner.")
                    owner():soundPlay(3,100,"buttons/bell1.wav",0)
                    soundVolume(3,0.2)
                    MainCommandQueue:remove(1)
                    CommandArchive:pushString(systime()+" respawn completed")
                  
                }
                
            break
            case("restart"),
                    
                if(GaugeMode == "PHX"){St = 1}elseif(GaugeMode == "RSG"){St = 2}elseif(GaugeMode == "2ft"){St = 3}else{St = 4}
                
                holoPos(0,SpawnHeadEntity:toWorld(select(St,vec(0,70,-7),vec(0,70,-7),vec(0,38,12),vec(68,0,-16))))
                holoAng(0,SpawnHeadEntity:toWorld(select(St,ang(0,0,-90),ang(0,0,-90),ang(0,0,-90),ang(0,-90,-90))))
                holoParent(0,SpawnHeadEntity)
                printS(0,"Reset everything. Feel free to move the spawner!")
                resetSpawn()
                MainCommandQueue:remove(1)
                CommandArchive:pushString(systime()+" restart completed")
                    
            break
            case("flip"),
                    
                if(GaugeMode == "PHX"){St = 1}elseif(GaugeMode == "RSG"){St = 2}elseif(GaugeMode == "2ft"){St = 3}else{St = 4}
                
                holoPos(0,SpawnHeadEntity:toWorld(select(St,vec(0,70,-7),vec(0,70,-7),vec(0,38,12),vec(68,0,-16))))
                holoAng(0,SpawnHeadEntity:toWorld(select(St,ang(0,0,-90),ang(0,0,-90),ang(0,0,-90),ang(0,-90,-90))))
                holoParent(0,SpawnHeadEntity)
                
                local FirstBogie = Props[1,array][2,entity]
                
                if(FirstBogie:isValid() & SpawnHeadEntity:isValid()){
                    
                    FirstBogie:noCollide(SpawnHeadEntity)
                    FirstBogie:noCollide(ScanProp)
                    
                }
                
                resetSpawn()
                printS(0,"Flipped the spawner to the opposite direction.")
                
                SpawnHeadEntity:setAng(ang(0,SpawnHeadEntity:angles():yaw()+180,0))
                SpawnHeadEntity:setPos(SpawnHeadEntity:pos()+vec(0,0,5))
                SpawnHeadEntity:propFreeze(0)
                
                timer(0.5,function(){SpawnHeadEntity:propFreeze(1)})
                CommandArchive:pushString(systime()+" flip completed")
                MainCommandQueue:remove(1)
                
            break
            case("unitmode"),
            
                local Text = ""
                    
                if(Flipping_Direction == 1){
                    Flipping_Direction = -1
                    Text = "\"the other way\"."
                }elseif(Flipping_Direction == -1){
                    Flipping_Direction = 0
                    Text = "\"random\"."
                }else{
                    Flipping_Direction = 1
                    Text = "\"one way\"."
                }
                
                printS(1,"Set automatic flipping to "+Text)

                CommandArchive:pushString(systime()+" unitmode "+Flipping_Direction+" completed")
                MainCommandQueue:remove(1)
                
            break
            case("goto"),
                
                soundStop(2)
                
                if(!MainCommandQueue[1,table][4,number]){
                    
                    if(MainCommandQueue[1,table][2,vector] == vec(0)){
                        printS(0,"Dismissed the E2. Bring it to your cursor with \".summon\""),SpawnHeadEntity:noCollideAll(1),SpawnHeadEntity:setAlpha(0),holoAlpha(0,0)
                    }else{
                        printS(0,"Teleported the E2 to the designated location."),SpawnHeadEntity:noCollideAll(0),SpawnHeadEntity:setAlpha(255),SpawnHeadEntity:propFreeze(0),timer(0.5,function(){SpawnHeadEntity:propFreeze(1)}),holoAlpha(0,255)
                    }
                    
                }else{
                    
                    SpawnHeadEntity:noCollideAll(0),SpawnHeadEntity:setAlpha(0),SpawnHeadEntity:propFreeze(0),timer(0.5,function(){SpawnHeadEntity:propFreeze(1)}),holoAlpha(0,255)
                    DelayInterlock = 1
                    timer(0.8,function(){DelayInterlock = 0})
                    
                }
                
                if(GaugeMode == "PHX"){St = 1}elseif(GaugeMode == "RSG"){St = 2}elseif(GaugeMode == "2ft"){St = 3}else{St = 4}
                
                holoPos(0,SpawnHeadEntity:toWorld(select(St,vec(0,70,-7),vec(0,70,-7),vec(0,38,12),vec(68,0,-16))))
                holoAng(0,SpawnHeadEntity:toWorld(select(St,ang(0,0,-90),ang(0,0,-90),ang(0,0,-90),ang(0,-90,-90))))
                holoParent(0,SpawnHeadEntity)
                
                SpawnHeadEntity:setPos(MainCommandQueue[1,table][2,vector])
                SpawnHeadEntity:setAng(ang(0,MainCommandQueue[1,table][3,number],0))
                SpawnHeadEntity:propSetVelocityInstant(vec(0))
                resetSpawn()
                CommandArchive:pushString(systime()+" goto completed")
                MainCommandQueue:remove(1)
                
            break
            case("donezo"),
            
                if(MainCommandQueue[1,table][2,string] == ""){
                    
                    CommandArchive:pushString(systime()+" invalid donezo?")
                    MainCommandQueue:remove(1)
                    
                }elseif(minquota() > 3000 & maxquota() > 40000){
                    
                    dsSend("donewith","operations",MainCommandQueue[1,table][2,string])
                
                    CommandArchive:pushString(systime()+" donezo")
                    MainCommandQueue:remove(1)
                    
                }
                
            break
            default,
                
                CommandArchive:pushString(systime()+" removed invalid command")
                MainCommandQueue:remove(1)
            
            break
                
            
        }
    
    }else{
        
        #if not currently executing on anything, be silent.
        soundStop(2)
        
    }
    
}

if(first()){
    timer("MainLoop",0.25,0,MainLoop)
}

CurrentTopCommand = MainCommandQueue[1,table][1,string]

#If at any time the Scanhead gets deleted, remove everything.
if(!SpawnHeadEntity:isValidPhysics()){ScanProp:propDelete(),SpawnHeadEntity:propDelete(),selfDestruct()}

